// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("campaignactivity")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class CampaignActivity : BaseProxyClass
    {
        public new const string LogicalName = "campaignactivity";
        public const int ObjectTypeCode = 4402;
        public const string PrimaryIdAttribute = "activityid";
        public const string PrimaryNameAttribute = "subject";
        
        static CampaignActivity()
        {
            BaseProxyClass.RegisterProxyType(typeof(CampaignActivity), "campaignactivity");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public CampaignActivity() : base(new Entity("campaignactivity")) { }
        public CampaignActivity(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<CampaignActivity>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: activitytypecode</para>
///</summary>
[AttributeLogicalNameAttribute("activitytypecode")]
public string ActivityType
{
	get { return this.GetPropertyValue<string>("activitytypecode"); }
}
///<summary>
///<para>Logical Name: actualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? ActualCost
{
	get
	{
		if (ActualCostMoney != null) { return ActualCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualCostMoney = new Money(value.Value); }
		else this.ActualCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: actualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("actualcost")]
public Money ActualCostMoney
{
	get { return this.GetPropertyValue<Money>("actualcost"); }
	set { this.SetPropertyValue("actualcost", (Money)value, (decimal)0, (decimal)1000000000000, "ActualCostMoney"); }
}
///<summary>
///<para>Logical Name: actualcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualCost_Base
{
	get
	{
		if (ActualCost_BaseMoney != null) { return ActualCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: actualcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("actualcost_base")]
public Money ActualCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("actualcost_base"); }
}
///<summary>
///<para>Logical Name: actualdurationminutes</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("actualdurationminutes")]
public int? ActualDuration
{
	get { return this.GetPropertyValue<int?>("actualdurationminutes"); }
	set { this.SetPropertyValue("actualdurationminutes", (int?)value, (int)0, (int)2147483647, "ActualDuration"); }
}
///<summary>
///<para>Logical Name: actualend</para>
///</summary>
[AttributeLogicalNameAttribute("actualend")]
public DateTime? ActualEnd
{
	get { return this.GetPropertyValue<DateTime?>("actualend"); }
	set { this.SetPropertyValue<DateTime?>("actualend", value, "ActualEnd"); }
}
///<summary>
///<para>Logical Name: actualstart</para>
///</summary>
[AttributeLogicalNameAttribute("actualstart")]
public DateTime? ActualStart
{
	get { return this.GetPropertyValue<DateTime?>("actualstart"); }
	set { this.SetPropertyValue<DateTime?>("actualstart", value, "ActualStart"); }
}
///<summary>
///<para>Logical Name: budgetedcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? BudgetAllocated
{
	get
	{
		if (BudgetAllocatedMoney != null) { return BudgetAllocatedMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.BudgetAllocatedMoney = new Money(value.Value); }
		else this.BudgetAllocatedMoney = null;
	}
}
///<summary>
///<para>Logical Name: budgetedcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("budgetedcost")]
public Money BudgetAllocatedMoney
{
	get { return this.GetPropertyValue<Money>("budgetedcost"); }
	set { this.SetPropertyValue("budgetedcost", (Money)value, (decimal)0, (decimal)1000000000000, "BudgetAllocatedMoney"); }
}
///<summary>
///<para>Logical Name: budgetedcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? BudgetAllocated_Base
{
	get
	{
		if (BudgetAllocated_BaseMoney != null) { return BudgetAllocated_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: budgetedcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("budgetedcost_base")]
public Money BudgetAllocated_BaseMoney
{
	get { return this.GetPropertyValue<Money>("budgetedcost_base"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: activityid</para>
///</summary>
[AttributeLogicalNameAttribute("activityid")]
public Guid CampaignActivityId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: category</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("category")]
public string Category
{
	get { return this.GetPropertyValue<string>("category"); }
	set { this.SetPropertyValue("category", value, 250, "Category"); }
}
/// <summary>
///Logical Name: channeltypecode
/// </summary>
[AttributeLogicalNameAttribute("channeltypecode")]
public eChannel? Channel
{
	get
	{
		if (Channel_OptionSetValue != null) { return (eChannel)Channel_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Channel_OptionSetValue = new OptionSetValue((int)value); }
		else this.Channel_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: channeltypecode</para>
///</summary>
[AttributeLogicalNameAttribute("channeltypecode")]
public OptionSetValue Channel_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("channeltypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("channeltypecode", value, "Channel_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Channel_Text(IOrganizationService Service)
{
	return this.Channel_OptionSetValue.GetOptionSetText(Service, this, "channeltypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Channel_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Channel_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: donotsendonoptout</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("donotsendonoptout")]
public bool? ExcludeMembersWhoOptOut
{
	get { return this.GetPropertyValue<bool?>("donotsendonoptout"); }
	set { this.SetPropertyValue<bool?>("donotsendonoptout", value, "ExcludeMembersWhoOptOut"); }
}
///<summary>
///<para>Logical Name: from</para>
///</summary>
[AttributeLogicalNameAttribute("from")]
public EntityCollection @From
{
	get { return this.GetPropertyValue<EntityCollection>("from"); }
	set { this.SetPropertyValue<EntityCollection>("from", value, "@From"); }
}
///<summary>
///<para>Logical Name: ignoreinactivelistmembers</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("ignoreinactivelistmembers")]
public bool? IgnoreInactiveMarketingListMembers
{
	get { return this.GetPropertyValue<bool?>("ignoreinactivelistmembers"); }
	set { this.SetPropertyValue<bool?>("ignoreinactivelistmembers", value, "IgnoreInactiveMarketingListMembers"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: isbilled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isbilled")]
public bool? IsBilled
{
	get { return this.GetPropertyValue<bool?>("isbilled"); }
	set { this.SetPropertyValue<bool?>("isbilled", value, "IsBilled"); }
}
///<summary>
///<para>Logical Name: isregularactivity</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isregularactivity")]
public bool? IsRegularActivity
{
	get { return this.GetPropertyValue<bool?>("isregularactivity"); }
}
///<summary>
///<para>Logical Name: isworkflowcreated</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isworkflowcreated")]
public bool? IsWorkflowCreated
{
	get { return this.GetPropertyValue<bool?>("isworkflowcreated"); }
	set { this.SetPropertyValue<bool?>("isworkflowcreated", value, "IsWorkflowCreated"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: excludeifcontactedinxdays</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 9999</para>
///</summary>
[AttributeLogicalNameAttribute("excludeifcontactedinxdays")]
public int? No_OfDays
{
	get { return this.GetPropertyValue<int?>("excludeifcontactedinxdays"); }
	set { this.SetPropertyValue("excludeifcontactedinxdays", (int?)value, (int)0, (int)9999, "No_OfDays"); }
}
///<summary>
///<para>Logical Name: partners</para>
///</summary>
[AttributeLogicalNameAttribute("partners")]
public EntityCollection OutsourceVendors
{
	get { return this.GetPropertyValue<EntityCollection>("partners"); }
	set { this.SetPropertyValue<EntityCollection>("partners", value, "OutsourceVendors"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference ParentCampaign
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "ParentCampaign"); }
}
/// <summary>
///Logical Name: prioritycode
/// </summary>
[AttributeLogicalNameAttribute("prioritycode")]
public ePriority? Priority
{
	get
	{
		if (Priority_OptionSetValue != null) { return (ePriority)Priority_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Priority_OptionSetValue = new OptionSetValue((int)value); }
		else this.Priority_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: prioritycode</para>
///</summary>
[AttributeLogicalNameAttribute("prioritycode")]
public OptionSetValue Priority_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("prioritycode"); }
	set { this.SetPropertyValue<OptionSetValue>("prioritycode", value, "Priority_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Priority_Text(IOrganizationService Service)
{
	return this.Priority_OptionSetValue.GetOptionSetText(Service, this, "prioritycode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Priority_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Priority_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public Guid Process
{
	get { return this.GetPropertyValue<Guid>("processid"); }
	set { this.SetPropertyValue<Guid>("processid", value, "Process"); }
}
///<summary>
///<para>Logical Name: stageid</para>
///</summary>
[AttributeLogicalNameAttribute("stageid")]
public Guid ProcessStage
{
	get { return this.GetPropertyValue<Guid>("stageid"); }
	set { this.SetPropertyValue<Guid>("stageid", value, "ProcessStage"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: scheduleddurationminutes</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("scheduleddurationminutes")]
public int? ScheduledDuration
{
	get { return this.GetPropertyValue<int?>("scheduleddurationminutes"); }
}
///<summary>
///<para>Logical Name: scheduledend</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledend")]
public DateTime? ScheduledEnd
{
	get { return this.GetPropertyValue<DateTime?>("scheduledend"); }
	set { this.SetPropertyValue<DateTime?>("scheduledend", value, "ScheduledEnd"); }
}
///<summary>
///<para>Logical Name: scheduledstart</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledstart")]
public DateTime? ScheduledStart
{
	get { return this.GetPropertyValue<DateTime?>("scheduledstart"); }
	set { this.SetPropertyValue<DateTime?>("scheduledstart", value, "ScheduledStart"); }
}
///<summary>
///<para>Logical Name: serviceid</para>
///</summary>
[AttributeLogicalNameAttribute("serviceid")]
public EntityReference Service
{
	get { return this.GetPropertyValue<EntityReference>("serviceid"); }
	set { this.SetPropertyValue<EntityReference>("serviceid", value, "Service"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: subcategory</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("subcategory")]
public string Sub_Category
{
	get { return this.GetPropertyValue<string>("subcategory"); }
	set { this.SetPropertyValue("subcategory", value, 250, "Sub_Category"); }
}
///<summary>
///<para>Logical Name: subject</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("subject")]
public string Subject
{
	get { return this.GetPropertyValue<string>("subject"); }
	set { this.SetPropertyValue("subject", value, 200, "Subject"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string TraversedPath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "TraversedPath"); }
}
/// <summary>
///Logical Name: typecode
/// </summary>
[AttributeLogicalNameAttribute("typecode")]
public eType? Type
{
	get
	{
		if (Type_OptionSetValue != null) { return (eType)Type_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Type_OptionSetValue = new OptionSetValue((int)value); }
		else this.Type_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: typecode</para>
///</summary>
[AttributeLogicalNameAttribute("typecode")]
public OptionSetValue Type_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("typecode"); }
	set { this.SetPropertyValue<OptionSetValue>("typecode", value, "Type_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Type_Text(IOrganizationService Service)
{
	return this.Type_OptionSetValue.GetOptionSetText(Service, this, "typecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Type_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Type_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>ActivityParty (Activity)</b></para>
/// <para>Schema Name: campaignactivity_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Activity (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "activityid", Columns); }
/// <summary>
/// <para><b>ActivityParty (Activity)</b></para>
/// <para>Schema Name: campaignactivity_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Activity (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "activityid", Columns); }
/// <summary>
/// <para><b>ActivityParty (Party)</b></para>
/// <para>Schema Name: campaignactivity_activityparties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Party (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>ActivityParty (Party)</b></para>
/// <para>Schema Name: campaignactivity_activityparties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Party (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: CampaignActivity_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: CampaignActivity_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QuickCampaign (Import File Name)</b></para>
/// <para>Schema Name: CampaignActivity_BulkOperations</para>
/// </summary>
public List<QuickCampaign> GetQuickCampaigns_ImportFileName (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuickCampaign>(Service, this.Id, "bulkoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QuickCampaign (Import File Name)</b></para>
/// <para>Schema Name: CampaignActivity_BulkOperations</para>
/// </summary>
public List<QuickCampaign> GetQuickCampaigns_ImportFileName (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuickCampaign>(Service, this.Id, "bulkoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: campaignactivity_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: campaignactivity_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: campaignactivity_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: campaignactivity_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: CampaignActivity_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: CampaignActivity_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: campaignactivity_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: campaignactivity_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: campaignactivity_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: campaignactivity_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: campaignactivity_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: campaignactivity_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: CampaignActivity_QueueItem</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: CampaignActivity_QueueItem</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: CampaignActivity_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: CampaignActivity_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: CampaignActivity_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_campaignactivity</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_campaignactivity</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>Sales Literature</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignactivitysalesliterature_association</para>
/// </summary>
public List<SalesLiterature> GetSalesLiterature (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<SalesLiterature>(Service, this, "campaignactivity", "activityid", "salesliterature", "salesliteratureid", "campaignactivityitem", "campaignactivityid", "itemid", Columns); }
public List<SalesLiterature> GetSalesLiterature (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<SalesLiterature>(Service, this, "campaignactivity", "activityid", "salesliterature", "salesliteratureid", "campaignactivityitem", "campaignactivityid", "itemid", Columns); }
public void RelateSalesLiterature (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignactivitysalesliterature_association", Items); }
public void RelateSalesLiterature (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignactivitysalesliterature_association", Items); }
public void UnRelateSalesLiterature (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignactivitysalesliterature_association", Items); }
public void UnRelateSalesLiterature (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignactivitysalesliterature_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Marketing List</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignactivitylist_association</para>
/// </summary>
public List<MarketingList> GetMarketingLists (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<MarketingList>(Service, this, "campaignactivity", "activityid", "list", "listid", "campaignactivityitem", "campaignactivityid", "itemid", Columns); }
public List<MarketingList> GetMarketingLists (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<MarketingList>(Service, this, "campaignactivity", "activityid", "list", "listid", "campaignactivityitem", "campaignactivityid", "itemid", Columns); }
public void RelateMarketingLists (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignactivitylist_association", Items); }
public void RelateMarketingLists (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignactivitylist_association", Items); }
public void UnRelateMarketingLists (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignactivitylist_association", Items); }
public void UnRelateMarketingLists (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignactivitylist_association", Items); }


                /// <summary>
        /// Adds an item to a campaign activity.
        /// </summary>
        /// <param name="Service">Organization Service</param>
        /// <param name="Item">Item to add to the Campaign Activity</param>
        /// <returns></returns>
        public Guid AddItem(IOrganizationService Service, EntityReference Item)
        {
            AddItemCampaignActivityRequest Request = new AddItemCampaignActivityRequest() { CampaignActivityId = this.Id, ItemId = Item.Id, EntityName = Item.LogicalName };
            return ((AddItemCampaignActivityResponse)Service.Execute(Request)).CampaignActivityItemId;
        }


        public enum eChannel
{
	///<summary><para>Phone</para>
	///<para>Value = 1</para></summary>
	[Description("Phone")]
	Phone = 1, 
	///<summary><para>Appointment</para>
	///<para>Value = 2</para></summary>
	[Description("Appointment")]
	Appointment = 2, 
	///<summary><para>Letter</para>
	///<para>Value = 3</para></summary>
	[Description("Letter")]
	Letter = 3, 
	///<summary><para>Letter via Mail Merge</para>
	///<para>Value = 4</para></summary>
	[Description("Letter via Mail Merge")]
	LetterViaMailMerge = 4, 
	///<summary><para>Fax</para>
	///<para>Value = 5</para></summary>
	[Description("Fax")]
	Fax = 5, 
	///<summary><para>Fax via Mail Merge</para>
	///<para>Value = 6</para></summary>
	[Description("Fax via Mail Merge")]
	FaxViaMailMerge = 6, 
	///<summary><para>Email</para>
	///<para>Value = 7</para></summary>
	[Description("Email")]
	Email = 7, 
	///<summary><para>Email via Mail Merge</para>
	///<para>Value = 8</para></summary>
	[Description("Email via Mail Merge")]
	EmailViaMailMerge = 8, 
	///<summary><para>Other</para>
	///<para>Value = 9</para></summary>
	[Description("Other")]
	Other = 9
}
public enum ePriority
{
	///<summary><para>Low</para>
	///<para>Value = 0</para></summary>
	[Description("Low")]
	Low = 0, 
	///<summary><para>Normal</para>
	///<para>Value = 1</para></summary>
	[Description("Normal")]
	Normal = 1, 
	///<summary><para>High</para>
	///<para>Value = 2</para></summary>
	[Description("High")]
	High = 2
}
public enum eStatus
{
	///<summary><para>Open</para>
	///<para>Value = 0</para></summary>
	[Description("Open")]
	Open = 0, 
	///<summary><para>Closed</para>
	///<para>Value = 1</para></summary>
	[Description("Closed")]
	Closed = 1, 
	///<summary><para>Canceled</para>
	///<para>Value = 2</para></summary>
	[Description("Canceled")]
	Canceled = 2
}
public enum eStatusReason
{
	///<summary><para>Proposed</para>
	///<para>Value = 1</para></summary>
	[Description("Proposed")]
	Proposed_Open = 1, 
	///<summary><para>In Progress</para>
	///<para>Value = 0</para></summary>
	[Description("In Progress")]
	InProgress_Open = 0, 
	///<summary><para>Closed</para>
	///<para>Value = 2</para></summary>
	[Description("Closed")]
	Closed_Closed = 2, 
	///<summary><para>Canceled</para>
	///<para>Value = 3</para></summary>
	[Description("Canceled")]
	Canceled_Canceled = 3, 
	///<summary><para>Pending</para>
	///<para>Value = 4</para></summary>
	[Description("Pending")]
	Pending_Open = 4, 
	///<summary><para>System Aborted</para>
	///<para>Value = 5</para></summary>
	[Description("System Aborted")]
	SystemAborted_Open = 5, 
	///<summary><para>Completed</para>
	///<para>Value = 6</para></summary>
	[Description("Completed")]
	Completed_Open = 6
}
public enum eType
{
	///<summary><para>Research</para>
	///<para>Value = 1</para></summary>
	[Description("Research")]
	Research = 1, 
	///<summary><para>Content Preparation</para>
	///<para>Value = 2</para></summary>
	[Description("Content Preparation")]
	ContentPreparation = 2, 
	///<summary><para>Target Marketing List Creation</para>
	///<para>Value = 3</para></summary>
	[Description("Target Marketing List Creation")]
	TargetMarketingListCreation = 3, 
	///<summary><para>Lead Qualification</para>
	///<para>Value = 4</para></summary>
	[Description("Lead Qualification")]
	LeadQualification = 4, 
	///<summary><para>Content Distribution</para>
	///<para>Value = 5</para></summary>
	[Description("Content Distribution")]
	ContentDistribution = 5, 
	///<summary><para>Direct Initial Contact</para>
	///<para>Value = 6</para></summary>
	[Description("Direct Initial Contact")]
	DirectInitialContact = 6, 
	///<summary><para>Direct Follow-Up Contact</para>
	///<para>Value = 7</para></summary>
	[Description("Direct Follow-Up Contact")]
	DirectFollow_UpContact = 7, 
	///<summary><para>Reminder Distribution</para>
	///<para>Value = 8</para></summary>
	[Description("Reminder Distribution")]
	ReminderDistribution = 8
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>regardingobjectidyominame</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>Activity Type</para>
	/// <para>activitytypecode</para></summary>
	public const string ActivityType = "activitytypecode";
	/// <summary><para>Actual Cost</para>
	/// <para>actualcost</para></summary>
	public const string ActualCost = "actualcost";
	/// <summary><para>Actual Cost (Base)</para>
	/// <para>actualcost_base</para></summary>
	public const string ActualCost_Base = "actualcost_base";
	/// <summary><para>Actual Duration </para>
	/// <para>actualdurationminutes</para></summary>
	public const string ActualDuration = "actualdurationminutes";
	/// <summary><para>Actual End</para>
	/// <para>actualend</para></summary>
	public const string ActualEnd = "actualend";
	/// <summary><para>Actual Start</para>
	/// <para>actualstart</para></summary>
	public const string ActualStart = "actualstart";
	/// <summary><para>Budget Allocated</para>
	/// <para>budgetedcost</para></summary>
	public const string BudgetAllocated = "budgetedcost";
	/// <summary><para>Budget Allocated (Base)</para>
	/// <para>budgetedcost_base</para></summary>
	public const string BudgetAllocated_Base = "budgetedcost_base";
	/// <summary><para>Campaign Activity</para>
	/// <para>activityid</para></summary>
	public const string CampaignActivityId = "activityid";
	/// <summary><para>Category</para>
	/// <para>category</para></summary>
	public const string Category = "category";
	/// <summary><para>Channel</para>
	/// <para>channeltypecode</para></summary>
	public const string Channel = "channeltypecode";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Exclude Members Who Opt Out</para>
	/// <para>donotsendonoptout</para></summary>
	public const string ExcludeMembersWhoOptOut = "donotsendonoptout";
	/// <summary><para>From</para>
	/// <para>from</para></summary>
	public const string @From = "from";
	/// <summary><para>Ignore Inactive Marketing List Members</para>
	/// <para>ignoreinactivelistmembers</para></summary>
	public const string IgnoreInactiveMarketingListMembers = "ignoreinactivelistmembers";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Is Billed</para>
	/// <para>isbilled</para></summary>
	public const string IsBilled = "isbilled";
	/// <summary><para>Is Regular Activity</para>
	/// <para>isregularactivity</para></summary>
	public const string IsRegularActivity = "isregularactivity";
	/// <summary><para>Is Workflow Created</para>
	/// <para>isworkflowcreated</para></summary>
	public const string IsWorkflowCreated = "isworkflowcreated";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>No. of Days</para>
	/// <para>excludeifcontactedinxdays</para></summary>
	public const string No_OfDays = "excludeifcontactedinxdays";
	/// <summary><para>Outsource Vendors</para>
	/// <para>partners</para></summary>
	public const string OutsourceVendors = "partners";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Parent Campaign</para>
	/// <para>regardingobjectid</para></summary>
	public const string ParentCampaign = "regardingobjectid";
	/// <summary><para>Priority</para>
	/// <para>prioritycode</para></summary>
	public const string Priority = "prioritycode";
	/// <summary><para>Process</para>
	/// <para>processid</para></summary>
	public const string Process = "processid";
	/// <summary><para>Process Stage</para>
	/// <para>stageid</para></summary>
	public const string ProcessStage = "stageid";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Scheduled Duration</para>
	/// <para>scheduleddurationminutes</para></summary>
	public const string ScheduledDuration = "scheduleddurationminutes";
	/// <summary><para>Scheduled End</para>
	/// <para>scheduledend</para></summary>
	public const string ScheduledEnd = "scheduledend";
	/// <summary><para>Scheduled Start</para>
	/// <para>scheduledstart</para></summary>
	public const string ScheduledStart = "scheduledstart";
	/// <summary><para>Service</para>
	/// <para>serviceid</para></summary>
	public const string Service = "serviceid";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Sub-Category</para>
	/// <para>subcategory</para></summary>
	public const string Sub_Category = "subcategory";
	/// <summary><para>Subject</para>
	/// <para>subject</para></summary>
	public const string Subject = "subject";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Traversed Path</para>
	/// <para>traversedpath</para></summary>
	public const string TraversedPath = "traversedpath";
	/// <summary><para>Type</para>
	/// <para>typecode</para></summary>
	public const string Type = "typecode";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
