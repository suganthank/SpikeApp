// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("recommendationcache")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class RecommendationCache : BaseProxyClass
    {
        public new const string LogicalName = "recommendationcache";
        public const int ObjectTypeCode = 9938;
        public const string PrimaryIdAttribute = "RecommendationCacheid";
        public const string PrimaryNameAttribute = "";
        
        static RecommendationCache()
        {
            BaseProxyClass.RegisterProxyType(typeof(RecommendationCache), "recommendationcache");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public RecommendationCache() : base(new Entity("recommendationcache")) { }
        public RecommendationCache(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<RecommendationCache>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: itemidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("itemidname")]
public string ItemIdName
{
	get { return this.GetPropertyValue<string>("itemidname"); }
}
///<summary>
///<para>Logical Name: recommendeditemidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recommendeditemidname")]
public string RecommendedItemIdName
{
	get { return this.GetPropertyValue<string>("recommendeditemidname"); }
}
///<summary>
///<para>Logical Name: recommendationmodelidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelidname")]
public string RecommendationModelIdName
{
	get { return this.GetPropertyValue<string>("recommendationmodelidname"); }
}
///<summary>
///<para>Logical Name: isrecommendationactive</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isrecommendationactive")]
public bool? IsActive
{
	get { return this.GetPropertyValue<bool?>("isrecommendationactive"); }
	set { this.SetPropertyValue<bool?>("isrecommendationactive", value, "IsActive"); }
}
///<summary>
///<para>Logical Name: itemid</para>
///</summary>
[AttributeLogicalNameAttribute("itemid")]
public EntityReference Product
{
	get { return this.GetPropertyValue<EntityReference>("itemid"); }
	set { this.SetPropertyValue<EntityReference>("itemid", value, "Product"); }
}
///<summary>
///<para>Logical Name: additionaldatarecordid</para>
///</summary>
[AttributeLogicalNameAttribute("additionaldatarecordid")]
public EntityReference ProductDetails
{
	get { return this.GetPropertyValue<EntityReference>("additionaldatarecordid"); }
	set { this.SetPropertyValue<EntityReference>("additionaldatarecordid", value, "ProductDetails"); }
}
///<summary>
///<para>Logical Name: recommendationrating</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationrating")]
public decimal? Rating
{
	get { return this.GetPropertyValue<decimal?>("recommendationrating"); }
	set { this.SetPropertyValue("recommendationrating", (decimal?)value, (decimal)0, (decimal)1, "Rating"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: RecommendationCacheid</para>
///</summary>
[AttributeLogicalNameAttribute("RecommendationCacheid")]
public Guid RecommendationCacheId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: recommendationmodelid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelid")]
public EntityReference RecommendationModel
{
	get { return this.GetPropertyValue<EntityReference>("recommendationmodelid"); }
	set { this.SetPropertyValue<EntityReference>("recommendationmodelid", value, "RecommendationModel"); }
}
/// <summary>
///Logical Name: recommendationsource
/// </summary>
[AttributeLogicalNameAttribute("recommendationsource")]
public eRecommendationSource? RecommendationSource
{
	get
	{
		if (RecommendationSource_OptionSetValue != null) { return (eRecommendationSource)RecommendationSource_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RecommendationSource_OptionSetValue = new OptionSetValue((int)value); }
		else this.RecommendationSource_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: recommendationsource</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationsource")]
public OptionSetValue RecommendationSource_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("recommendationsource"); }
	set { this.SetPropertyValue<OptionSetValue>("recommendationsource", value, "RecommendationSource_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string RecommendationSource_Text(IOrganizationService Service)
{
	return this.RecommendationSource_OptionSetValue.GetOptionSetText(Service, this, "recommendationsource");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string RecommendationSource_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.RecommendationSource_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: recommendeditemid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendeditemid")]
public EntityReference RecommendedProduct
{
	get { return this.GetPropertyValue<EntityReference>("recommendeditemid"); }
	set { this.SetPropertyValue<EntityReference>("recommendeditemid", value, "RecommendedProduct"); }
}
/// <summary>
///Logical Name: recommendationtype
/// </summary>
[AttributeLogicalNameAttribute("recommendationtype")]
public eRecommendationType? Type
{
	get
	{
		if (Type_OptionSetValue != null) { return (eRecommendationType)Type_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Type_OptionSetValue = new OptionSetValue((int)value); }
		else this.Type_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: recommendationtype</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationtype")]
public OptionSetValue Type_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("recommendationtype"); }
	set { this.SetPropertyValue<OptionSetValue>("recommendationtype", value, "Type_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Type_Text(IOrganizationService Service)
{
	return this.Type_OptionSetValue.GetOptionSetText(Service, this, "recommendationtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Type_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Type_OptionSetValue.Value);
}


        

        

        

        public enum eRecommendationSource
{
	///<summary><para>Azure Machine Learning</para>
	///<para>Value = 1</para></summary>
	[Description("Azure Machine Learning")]
	AzureMachineLearning = 1, 
	///<summary><para>Substitute Product</para>
	///<para>Value = 2</para></summary>
	[Description("Substitute Product")]
	SubstituteProduct = 2
}
public enum eRecommendationType
{
	///<summary><para>Cross-Sell</para>
	///<para>Value = 1</para></summary>
	[Description("Cross-Sell")]
	Cross_Sell = 1, 
	///<summary><para>Accessory</para>
	///<para>Value = 2</para></summary>
	[Description("Accessory")]
	Accessory = 2
}


        public static class Properties
{
	/// <summary><para>itemidname</para>
	/// <para>itemidname</para></summary>
	public const string ItemIdName = "itemidname";
	/// <summary><para>recommendeditemidname</para>
	/// <para>recommendeditemidname</para></summary>
	public const string RecommendedItemIdName = "recommendeditemidname";
	/// <summary><para>recommendationmodelidname</para>
	/// <para>recommendationmodelidname</para></summary>
	public const string RecommendationModelIdName = "recommendationmodelidname";
	/// <summary><para>Is Active</para>
	/// <para>isrecommendationactive</para></summary>
	public const string IsActive = "isrecommendationactive";
	/// <summary><para>Product</para>
	/// <para>itemid</para></summary>
	public const string Product = "itemid";
	/// <summary><para>Product Details</para>
	/// <para>additionaldatarecordid</para></summary>
	public const string ProductDetails = "additionaldatarecordid";
	/// <summary><para>Rating</para>
	/// <para>recommendationrating</para></summary>
	public const string Rating = "recommendationrating";
	/// <summary><para>Recommendation Cache</para>
	/// <para>RecommendationCacheid</para></summary>
	public const string RecommendationCacheId = "RecommendationCacheid";
	/// <summary><para>Recommendation Model</para>
	/// <para>recommendationmodelid</para></summary>
	public const string RecommendationModel = "recommendationmodelid";
	/// <summary><para>Recommendation Source</para>
	/// <para>recommendationsource</para></summary>
	public const string RecommendationSource = "recommendationsource";
	/// <summary><para>Recommended Product</para>
	/// <para>recommendeditemid</para></summary>
	public const string RecommendedProduct = "recommendeditemid";
	/// <summary><para>Type</para>
	/// <para>recommendationtype</para></summary>
	public const string Type = "recommendationtype";
}

    }
}
