// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("tracelog")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Trace : BaseProxyClass
    {
        public new const string LogicalName = "tracelog";
        public const int ObjectTypeCode = 8050;
        public const string PrimaryIdAttribute = "tracelogid";
        public const string PrimaryNameAttribute = "text";
        
        static Trace()
        {
            BaseProxyClass.RegisterProxyType(typeof(Trace), "tracelog");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Trace() : base(new Entity("tracelog")) { }
        public Trace(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Trace>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 4000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: machinename</para>
///<para>Max Length: 320 characters</para>
///</summary>
[AttributeLogicalNameAttribute("machinename")]
public string MachineName
{
	get { return this.GetPropertyValue<string>("machinename"); }
	set { this.SetPropertyValue("machinename", value, 320, "MachineName"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: errordetails</para>
///<para>Max Length: 2048 characters</para>
///</summary>
[AttributeLogicalNameAttribute("errordetails")]
public string ErrorDetails
{
	get { return this.GetPropertyValue<string>("errordetails"); }
	set { this.SetPropertyValue("errordetails", value, 2048, "ErrorDetails"); }
}
///<summary>
///<para>Logical Name: collationlevel</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("collationlevel")]
public int? CollationLevel
{
	get { return this.GetPropertyValue<int?>("collationlevel"); }
	set { this.SetPropertyValue("collationlevel", (int?)value, (int)0, (int)2147483647, "CollationLevel"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: tracecode</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("tracecode")]
public int? ErrorCode
{
	get { return this.GetPropertyValue<int?>("tracecode"); }
	set { this.SetPropertyValue("tracecode", (int?)value, (int)0, (int)1000000000, "ErrorCode"); }
}
///<summary>
///<para>Logical Name: isunique</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isunique")]
public bool? IsUniqueTrace
{
	get { return this.GetPropertyValue<bool?>("isunique"); }
	set { this.SetPropertyValue<bool?>("isunique", value, "IsUniqueTrace"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? LastUpdateOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
/// <summary>
///Logical Name: level
/// </summary>
[AttributeLogicalNameAttribute("level")]
public eLevel? Level
{
	get
	{
		if (Level_OptionSetValue != null) { return (eLevel)Level_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Level_OptionSetValue = new OptionSetValue((int)value); }
		else this.Level_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: level</para>
///</summary>
[AttributeLogicalNameAttribute("level")]
public OptionSetValue Level_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("level"); }
	set { this.SetPropertyValue<OptionSetValue>("level", value, "Level_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Level_Text(IOrganizationService Service)
{
	return this.Level_OptionSetValue.GetOptionSetText(Service, this, "level");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Level_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Level_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: regardingobjectownerid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectownerid"); }
}
///<summary>
///<para>Logical Name: regardingobjectowneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectowneridtype")]
public string OwnerType
{
	get { return this.GetPropertyValue<string>("regardingobjectowneridtype"); }
}
///<summary>
///<para>Logical Name: regardingobjectowningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectowningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectowningbusinessunit"); }
}
///<summary>
///<para>Logical Name: parenttracelogid</para>
///</summary>
[AttributeLogicalNameAttribute("parenttracelogid")]
public EntityReference ParentId
{
	get { return this.GetPropertyValue<EntityReference>("parenttracelogid"); }
	set { this.SetPropertyValue<EntityReference>("parenttracelogid", value, "ParentId"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectType
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectType"); }
}
///<summary>
///<para>Logical Name: text</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("text")]
public string Text
{
	get { return this.GetPropertyValue<string>("text"); }
	set { this.SetPropertyValue("text", value, 2000, "Text"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: tracelogid</para>
///</summary>
[AttributeLogicalNameAttribute("tracelogid")]
public Guid TraceId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: traceactionxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traceactionxml")]
public string TraceActionsXML
{
	get { return this.GetPropertyValue<string>("traceactionxml"); }
	set { this.SetPropertyValue("traceactionxml", value, 1073741823, "TraceActionsXML"); }
}
///<summary>
///<para>Logical Name: canbedeleted</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbedeleted")]
public bool? TraceCanBeDeletedFlag
{
	get { return this.GetPropertyValue<bool?>("canbedeleted"); }
	set { this.SetPropertyValue<bool?>("canbedeleted", value, "TraceCanBeDeletedFlag"); }
}
///<summary>
///<para>Logical Name: tracedetailxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("tracedetailxml")]
public string TraceDetailXML
{
	get { return this.GetPropertyValue<string>("tracedetailxml"); }
	set { this.SetPropertyValue("tracedetailxml", value, 1073741823, "TraceDetailXML"); }
}
///<summary>
///<para>Logical Name: errortypedisplay</para>
///<para>Max Length: 320 characters</para>
///</summary>
[AttributeLogicalNameAttribute("errortypedisplay")]
public string TraceErrorDetails
{
	get { return this.GetPropertyValue<string>("errortypedisplay"); }
	set { this.SetPropertyValue("errortypedisplay", value, 320, "TraceErrorDetails"); }
}
///<summary>
///<para>Logical Name: traceparameterhash</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("traceparameterhash")]
public int? TraceParameterHash
{
	get { return this.GetPropertyValue<int?>("traceparameterhash"); }
}
///<summary>
///<para>Logical Name: traceparameterxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traceparameterxml")]
public string TraceParameterXML
{
	get { return this.GetPropertyValue<string>("traceparameterxml"); }
	set { this.SetPropertyValue("traceparameterxml", value, 1073741823, "TraceParameterXML"); }
}
///<summary>
///<para>Logical Name: traceregardingid</para>
///</summary>
[AttributeLogicalNameAttribute("traceregardingid")]
public EntityReference TraceRegarding
{
	get { return this.GetPropertyValue<EntityReference>("traceregardingid"); }
}
///<summary>
///<para>Logical Name: tracestatus</para>
///<para>True = Success</para>
///<para>False = Failure</para>
///</summary>
[AttributeLogicalNameAttribute("tracestatus")]
public bool? TraceStatus
{
	get { return this.GetPropertyValue<bool?>("tracestatus"); }
	set { this.SetPropertyValue<bool?>("tracestatus", value, "TraceStatus"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}


        /// <summary>
/// <para><b>TraceAssociation (Trace)</b></para>
/// <para>Schema Name: traceassociation_TraceLog</para>
/// </summary>
public List<TraceAssociation> GetTraceAssociations_Trace (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TraceAssociation>(Service, this.Id, "traceassociation", "tracelogid", Columns); }
/// <summary>
/// <para><b>TraceAssociation (Trace)</b></para>
/// <para>Schema Name: traceassociation_TraceLog</para>
/// </summary>
public List<TraceAssociation> GetTraceAssociations_Trace (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TraceAssociation>(Service, this.Id, "traceassociation", "tracelogid", Columns); }
/// <summary>
/// <para><b>Trace (Parent Id)</b></para>
/// <para>Schema Name: tracelog_parent_tracelog</para>
/// </summary>
public List<Trace> GetTraces_ParentId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Trace>(Service, this.Id, "tracelog", "parenttracelogid", Columns); }
/// <summary>
/// <para><b>Trace (Parent Id)</b></para>
/// <para>Schema Name: tracelog_parent_tracelog</para>
/// </summary>
public List<Trace> GetTraces_ParentId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Trace>(Service, this.Id, "tracelog", "parenttracelogid", Columns); }


        

        

        public enum eLevel
{
	///<summary><para>Information</para>
	///<para>Value = 1</para></summary>
	[Description("Information")]
	Information = 1, 
	///<summary><para>Warning</para>
	///<para>Value = 2</para></summary>
	[Description("Warning")]
	Warning = 2, 
	///<summary><para>Error</para>
	///<para>Value = 3</para></summary>
	[Description("Error")]
	Error = 3
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>regardingobjectidyominame</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>machinename</para>
	/// <para>machinename</para></summary>
	public const string MachineName = "machinename";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>errordetails</para>
	/// <para>errordetails</para></summary>
	public const string ErrorDetails = "errordetails";
	/// <summary><para>Collation Level</para>
	/// <para>collationlevel</para></summary>
	public const string CollationLevel = "collationlevel";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Error Code</para>
	/// <para>tracecode</para></summary>
	public const string ErrorCode = "tracecode";
	/// <summary><para>Is Unique Trace</para>
	/// <para>isunique</para></summary>
	public const string IsUniqueTrace = "isunique";
	/// <summary><para>Last Update On</para>
	/// <para>modifiedon</para></summary>
	public const string LastUpdateOn = "modifiedon";
	/// <summary><para>Level</para>
	/// <para>level</para></summary>
	public const string Level = "level";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Owner</para>
	/// <para>regardingobjectownerid</para></summary>
	public const string Owner = "regardingobjectownerid";
	/// <summary><para>Owner Type</para>
	/// <para>regardingobjectowneridtype</para></summary>
	public const string OwnerType = "regardingobjectowneridtype";
	/// <summary><para>Owning Business Unit</para>
	/// <para>regardingobjectowningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "regardingobjectowningbusinessunit";
	/// <summary><para>Parent Id</para>
	/// <para>parenttracelogid</para></summary>
	public const string ParentId = "parenttracelogid";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Regarding Object Type</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectType = "regardingobjecttypecode";
	/// <summary><para>Text</para>
	/// <para>text</para></summary>
	public const string Text = "text";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Trace</para>
	/// <para>tracelogid</para></summary>
	public const string TraceId = "tracelogid";
	/// <summary><para>Trace Actions XML</para>
	/// <para>traceactionxml</para></summary>
	public const string TraceActionsXML = "traceactionxml";
	/// <summary><para>Trace CanBeDeleted Flag</para>
	/// <para>canbedeleted</para></summary>
	public const string TraceCanBeDeletedFlag = "canbedeleted";
	/// <summary><para>Trace Detail XML</para>
	/// <para>tracedetailxml</para></summary>
	public const string TraceDetailXML = "tracedetailxml";
	/// <summary><para>Trace Error Details</para>
	/// <para>errortypedisplay</para></summary>
	public const string TraceErrorDetails = "errortypedisplay";
	/// <summary><para>Trace Parameter Hash</para>
	/// <para>traceparameterhash</para></summary>
	public const string TraceParameterHash = "traceparameterhash";
	/// <summary><para>Trace Parameter XML</para>
	/// <para>traceparameterxml</para></summary>
	public const string TraceParameterXML = "traceparameterxml";
	/// <summary><para>Trace Regarding</para>
	/// <para>traceregardingid</para></summary>
	public const string TraceRegarding = "traceregardingid";
	/// <summary><para>Trace Status</para>
	/// <para>tracestatus</para></summary>
	public const string TraceStatus = "tracestatus";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
}

    }
}
