// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("mailbox")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Mailbox : BaseProxyClass
    {
        public new const string LogicalName = "mailbox";
        public const int ObjectTypeCode = 9606;
        public const string PrimaryIdAttribute = "mailboxid";
        public const string PrimaryNameAttribute = "name";
        
        static Mailbox()
        {
            BaseProxyClass.RegisterProxyType(typeof(Mailbox), "mailbox");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Mailbox() : base(new Entity("mailbox")) { }
        public Mailbox(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Mailbox>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: entityimage_timestamp</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_timestamp")]
public int? EntityImage_Timestamp
{
	get { return this.GetPropertyValue<int?>("entityimage_timestamp"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: owningbusinessunitname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunitname")]
public string OwningBusinessUnitName
{
	get { return this.GetPropertyValue<string>("owningbusinessunitname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: emailserverprofilename</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailserverprofilename")]
public string EmailServerProfileName
{
	get { return this.GetPropertyValue<string>("emailserverprofilename"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: ispasswordset</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("ispasswordset")]
public bool? IsPasswordSet
{
	get { return this.GetPropertyValue<bool?>("ispasswordset"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: entityimage_url</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_url")]
public string EntityImage_URL
{
	get { return this.GetPropertyValue<string>("entityimage_url"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: allowemailconnectortousecredentials</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("allowemailconnectortousecredentials")]
public bool? AllowToUseCredentialsForEmailProcessing
{
	get { return this.GetPropertyValue<bool?>("allowemailconnectortousecredentials"); }
	set { this.SetPropertyValue<bool?>("allowemailconnectortousecredentials", value, "AllowToUseCredentialsForEmailProcessing"); }
}
/// <summary>
///Logical Name: actdeliverymethod
/// </summary>
[AttributeLogicalNameAttribute("actdeliverymethod")]
public eAppointments_Contacts_AndTasks? Appointments_Contacts_AndTasks
{
	get
	{
		if (Appointments_Contacts_AndTasks_OptionSetValue != null) { return (eAppointments_Contacts_AndTasks)Appointments_Contacts_AndTasks_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Appointments_Contacts_AndTasks_OptionSetValue = new OptionSetValue((int)value); }
		else this.Appointments_Contacts_AndTasks_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: actdeliverymethod</para>
///</summary>
[AttributeLogicalNameAttribute("actdeliverymethod")]
public OptionSetValue Appointments_Contacts_AndTasks_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("actdeliverymethod"); }
	set { this.SetPropertyValue<OptionSetValue>("actdeliverymethod", value, "Appointments_Contacts_AndTasks_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Appointments_Contacts_AndTasks_Text(IOrganizationService Service)
{
	return this.Appointments_Contacts_AndTasks_OptionSetValue.GetOptionSetText(Service, this, "actdeliverymethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Appointments_Contacts_AndTasks_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Appointments_Contacts_AndTasks_OptionSetValue.Value);
}
/// <summary>
///Logical Name: actstatus
/// </summary>
[AttributeLogicalNameAttribute("actstatus")]
public eAppointments_Contacts_AndTasksStatus? Appointments_Contacts_AndTasksStatus
{
	get
	{
		if (Appointments_Contacts_AndTasksStatus_OptionSetValue != null) { return (eAppointments_Contacts_AndTasksStatus)Appointments_Contacts_AndTasksStatus_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: actstatus</para>
///</summary>
[AttributeLogicalNameAttribute("actstatus")]
public OptionSetValue Appointments_Contacts_AndTasksStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("actstatus"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Appointments_Contacts_AndTasksStatus_Text(IOrganizationService Service)
{
	return this.Appointments_Contacts_AndTasksStatus_OptionSetValue.GetOptionSetText(Service, this, "actstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Appointments_Contacts_AndTasksStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Appointments_Contacts_AndTasksStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: forcedunlockcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("forcedunlockcount")]
public int? CountOfTheNumberOfTimesAMailboxGetsForcedUnlocked
{
	get { return this.GetPropertyValue<int?>("forcedunlockcount"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: orgmarkedasprimaryforexchangesync</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("orgmarkedasprimaryforexchangesync")]
public bool? CrmOrgMarkedAsPrimaryOrgForExchangeMailbox
{
	get { return this.GetPropertyValue<bool?>("orgmarkedasprimaryforexchangesync"); }
	set { this.SetPropertyValue<bool?>("orgmarkedasprimaryforexchangesync", value, "CrmOrgMarkedAsPrimaryOrgForExchangeMailbox"); }
}
///<summary>
///<para>Logical Name: processinglastattemptedon</para>
///</summary>
[AttributeLogicalNameAttribute("processinglastattemptedon")]
public DateTime? DateProcessingLastAttempted
{
	get { return this.GetPropertyValue<DateTime?>("processinglastattemptedon"); }
}
///<summary>
///<para>Logical Name: processanddeleteemails</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("processanddeleteemails")]
public bool? DeleteEmailsAfterProcessing
{
	get { return this.GetPropertyValue<bool?>("processanddeleteemails"); }
	set { this.SetPropertyValue<bool?>("processanddeleteemails", value, "DeleteEmailsAfterProcessing"); }
}
///<summary>
///<para>Logical Name: emailaddress</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailaddress")]
public string EmailAddress
{
	get { return this.GetPropertyValue<string>("emailaddress"); }
	set { this.SetPropertyValue("emailaddress", value, 100, "EmailAddress"); }
}
///<summary>
///<para>Logical Name: isemailaddressapprovedbyo365admin</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isemailaddressapprovedbyo365admin")]
public bool? EmailAddressO365AdminApprovalStatus
{
	get { return this.GetPropertyValue<bool?>("isemailaddressapprovedbyo365admin"); }
	set { this.SetPropertyValue<bool?>("isemailaddressapprovedbyo365admin", value, "EmailAddressO365AdminApprovalStatus"); }
}
/// <summary>
///Logical Name: emailrouteraccessapproval
/// </summary>
[AttributeLogicalNameAttribute("emailrouteraccessapproval")]
public eShowsWhetherTheEmailAddressIsApprovedForEachMailboxForProcessingEmailThroughServer_sideSynchronizationOrTheEmailRouter? EmailAddressStatus
{
	get
	{
		if (EmailAddressStatus_OptionSetValue != null) { return (eShowsWhetherTheEmailAddressIsApprovedForEachMailboxForProcessingEmailThroughServer_sideSynchronizationOrTheEmailRouter)EmailAddressStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EmailAddressStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.EmailAddressStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: emailrouteraccessapproval</para>
///</summary>
[AttributeLogicalNameAttribute("emailrouteraccessapproval")]
public OptionSetValue EmailAddressStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("emailrouteraccessapproval"); }
	set { this.SetPropertyValue<OptionSetValue>("emailrouteraccessapproval", value, "EmailAddressStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string EmailAddressStatus_Text(IOrganizationService Service)
{
	return this.EmailAddressStatus_OptionSetValue.GetOptionSetText(Service, this, "emailrouteraccessapproval");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string EmailAddressStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.EmailAddressStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: enabledforact</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("enabledforact")]
public bool? EnabledForAppointments_Contacts_AndTasks
{
	get { return this.GetPropertyValue<bool?>("enabledforact"); }
	set { this.SetPropertyValue<bool?>("enabledforact", value, "EnabledForAppointments_Contacts_AndTasks"); }
}
///<summary>
///<para>Logical Name: enabledforincomingemail</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("enabledforincomingemail")]
public bool? EnabledForIncomingEmail
{
	get { return this.GetPropertyValue<bool?>("enabledforincomingemail"); }
	set { this.SetPropertyValue<bool?>("enabledforincomingemail", value, "EnabledForIncomingEmail"); }
}
///<summary>
///<para>Logical Name: enabledforoutgoingemail</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("enabledforoutgoingemail")]
public bool? EnabledForOutgoingEmail
{
	get { return this.GetPropertyValue<bool?>("enabledforoutgoingemail"); }
	set { this.SetPropertyValue<bool?>("enabledforoutgoingemail", value, "EnabledForOutgoingEmail"); }
}
///<summary>
///<para>Logical Name: entityimageid</para>
///</summary>
[AttributeLogicalNameAttribute("entityimageid")]
public Guid EntityImageId
{
	get { return this.GetPropertyValue<Guid>("entityimageid"); }
}
///<summary>
///<para>Logical Name: exchangesyncstatexml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("exchangesyncstatexml")]
public string ExchangeSyncState
{
	get { return this.GetPropertyValue<string>("exchangesyncstatexml"); }
	set { this.SetPropertyValue("exchangesyncstatexml", value, 1073741823, "ExchangeSyncState"); }
}
///<summary>
///<para>Logical Name: ewsurl</para>
///<para>Max Length: 2084 characters</para>
///</summary>
[AttributeLogicalNameAttribute("ewsurl")]
public string ExchangeWebServicesURL
{
	get { return this.GetPropertyValue<string>("ewsurl"); }
	set { this.SetPropertyValue("ewsurl", value, 2084, "ExchangeWebServicesURL"); }
}
///<summary>
///<para>Logical Name: folderhierarchy</para>
///<para>Max Length: 1048576 characters</para>
///</summary>
[AttributeLogicalNameAttribute("folderhierarchy")]
public string FolderHierarchy
{
	get { return this.GetPropertyValue<string>("folderhierarchy"); }
	set { this.SetPropertyValue("folderhierarchy", value, 1048576, "FolderHierarchy"); }
}
///<summary>
///<para>Logical Name: hostid</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("hostid")]
public string Host
{
	get { return this.GetPropertyValue<string>("hostid"); }
}
/// <summary>
///Logical Name: incomingemaildeliverymethod
/// </summary>
[AttributeLogicalNameAttribute("incomingemaildeliverymethod")]
public eIncomingEmailDeliveryMethod? IncomingEmail
{
	get
	{
		if (IncomingEmail_OptionSetValue != null) { return (eIncomingEmailDeliveryMethod)IncomingEmail_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.IncomingEmail_OptionSetValue = new OptionSetValue((int)value); }
		else this.IncomingEmail_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: incomingemaildeliverymethod</para>
///</summary>
[AttributeLogicalNameAttribute("incomingemaildeliverymethod")]
public OptionSetValue IncomingEmail_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("incomingemaildeliverymethod"); }
	set { this.SetPropertyValue<OptionSetValue>("incomingemaildeliverymethod", value, "IncomingEmail_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IncomingEmail_Text(IOrganizationService Service)
{
	return this.IncomingEmail_OptionSetValue.GetOptionSetText(Service, this, "incomingemaildeliverymethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IncomingEmail_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IncomingEmail_OptionSetValue.Value);
}
/// <summary>
///Logical Name: incomingemailstatus
/// </summary>
[AttributeLogicalNameAttribute("incomingemailstatus")]
public eIncomingEmailStatus? IncomingEmailStatus
{
	get
	{
		if (IncomingEmailStatus_OptionSetValue != null) { return (eIncomingEmailStatus)IncomingEmailStatus_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: incomingemailstatus</para>
///</summary>
[AttributeLogicalNameAttribute("incomingemailstatus")]
public OptionSetValue IncomingEmailStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("incomingemailstatus"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IncomingEmailStatus_Text(IOrganizationService Service)
{
	return this.IncomingEmailStatus_OptionSetValue.GetOptionSetText(Service, this, "incomingemailstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IncomingEmailStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IncomingEmailStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: isforwardmailbox</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isforwardmailbox")]
public bool? IsForwardMailbox
{
	get { return this.GetPropertyValue<bool?>("isforwardmailbox"); }
}
///<summary>
///<para>Logical Name: isserviceaccount</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isserviceaccount")]
public bool? IsServiceAccount
{
	get { return this.GetPropertyValue<bool?>("isserviceaccount"); }
}
///<summary>
///<para>Logical Name: itemsfailedforlastsync</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("itemsfailedforlastsync")]
public int? ItemsFailedForLastSync
{
	get { return this.GetPropertyValue<int?>("itemsfailedforlastsync"); }
	set { this.SetPropertyValue("itemsfailedforlastsync", (int?)value, (int)0, (int)2147483647, "ItemsFailedForLastSync"); }
}
///<summary>
///<para>Logical Name: itemsprocessedforlastsync</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("itemsprocessedforlastsync")]
public int? ItemsProcessedForLastSync
{
	get { return this.GetPropertyValue<int?>("itemsprocessedforlastsync"); }
	set { this.SetPropertyValue("itemsprocessedforlastsync", (int?)value, (int)0, (int)2147483647, "ItemsProcessedForLastSync"); }
}
///<summary>
///<para>Logical Name: lastactiveon</para>
///</summary>
[AttributeLogicalNameAttribute("lastactiveon")]
public DateTime? LastActiveOn
{
	get { return this.GetPropertyValue<DateTime?>("lastactiveon"); }
}
///<summary>
///<para>Logical Name: lastautodiscoveredon</para>
///</summary>
[AttributeLogicalNameAttribute("lastautodiscoveredon")]
public DateTime? LastAutoDiscoveredOn
{
	get { return this.GetPropertyValue<DateTime?>("lastautodiscoveredon"); }
	set { this.SetPropertyValue<DateTime?>("lastautodiscoveredon", value, "LastAutoDiscoveredOn"); }
}
///<summary>
///<para>Logical Name: lastmailboxforcedunlockoccurredon</para>
///</summary>
[AttributeLogicalNameAttribute("lastmailboxforcedunlockoccurredon")]
public DateTime? LastDateTimeWhenAMailboxGotForcedUnlocked
{
	get { return this.GetPropertyValue<DateTime?>("lastmailboxforcedunlockoccurredon"); }
}
///<summary>
///<para>Logical Name: lastmessageid</para>
///<para>Max Length: 320 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lastmessageid")]
public string LastMessageID
{
	get { return this.GetPropertyValue<string>("lastmessageid"); }
}
///<summary>
///<para>Logical Name: lastsuccessfulsynccompletedon</para>
///</summary>
[AttributeLogicalNameAttribute("lastsuccessfulsynccompletedon")]
public DateTime? LastSuccessfulSyncTime
{
	get { return this.GetPropertyValue<DateTime?>("lastsuccessfulsynccompletedon"); }
}
///<summary>
///<para>Logical Name: lastsyncerrorcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("lastsyncerrorcode")]
public int? LastSyncErrorCode
{
	get { return this.GetPropertyValue<int?>("lastsyncerrorcode"); }
	set { this.SetPropertyValue("lastsyncerrorcode", (int?)value, (int)-2147483648, (int)2147483647, "LastSyncErrorCode"); }
}
///<summary>
///<para>Logical Name: lastsyncerrorcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("lastsyncerrorcount")]
public int? LastSyncErrorContinuousCount
{
	get { return this.GetPropertyValue<int?>("lastsyncerrorcount"); }
	set { this.SetPropertyValue("lastsyncerrorcount", (int?)value, (int)0, (int)2147483647, "LastSyncErrorContinuousCount"); }
}
///<summary>
///<para>Logical Name: lastsyncerrormachinename</para>
///<para>Max Length: 320 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lastsyncerrormachinename")]
public string LastSyncErrorMachineName
{
	get { return this.GetPropertyValue<string>("lastsyncerrormachinename"); }
	set { this.SetPropertyValue("lastsyncerrormachinename", value, 320, "LastSyncErrorMachineName"); }
}
///<summary>
///<para>Logical Name: lastsyncerror</para>
///<para>Max Length: 2048 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lastsyncerror")]
public string LastSyncErrorStack
{
	get { return this.GetPropertyValue<string>("lastsyncerror"); }
	set { this.SetPropertyValue("lastsyncerror", value, 2048, "LastSyncErrorStack"); }
}
///<summary>
///<para>Logical Name: lastsyncerroroccurredon</para>
///</summary>
[AttributeLogicalNameAttribute("lastsyncerroroccurredon")]
public DateTime? LastSyncErrorTime
{
	get { return this.GetPropertyValue<DateTime?>("lastsyncerroroccurredon"); }
	set { this.SetPropertyValue<DateTime?>("lastsyncerroroccurredon", value, "LastSyncErrorTime"); }
}
///<summary>
///<para>Logical Name: lastsyncstartedon</para>
///</summary>
[AttributeLogicalNameAttribute("lastsyncstartedon")]
public DateTime? LastSyncStartTime
{
	get { return this.GetPropertyValue<DateTime?>("lastsyncstartedon"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: mailboxid</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxid")]
public Guid MailboxId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: processingstatecode</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("processingstatecode")]
public int? MailboxProcessingState
{
	get { return this.GetPropertyValue<int?>("processingstatecode"); }
}
/// <summary>
///Logical Name: mailboxstatus
/// </summary>
[AttributeLogicalNameAttribute("mailboxstatus")]
public eMailboxStatus? MailboxStatus
{
	get
	{
		if (MailboxStatus_OptionSetValue != null) { return (eMailboxStatus)MailboxStatus_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: mailboxstatus</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxstatus")]
public OptionSetValue MailboxStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("mailboxstatus"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string MailboxStatus_Text(IOrganizationService Service)
{
	return this.MailboxStatus_OptionSetValue.GetOptionSetText(Service, this, "mailboxstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string MailboxStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.MailboxStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: testmailboxaccesscompletedon</para>
///</summary>
[AttributeLogicalNameAttribute("testmailboxaccesscompletedon")]
public DateTime? MailboxTestCompletedOn
{
	get { return this.GetPropertyValue<DateTime?>("testmailboxaccesscompletedon"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: lastduration</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("lastduration")]
public int? MonitorLastDurationPerformance
{
	get { return this.GetPropertyValue<int?>("lastduration"); }
}
///<summary>
///<para>Logical Name: processedtimes</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("processedtimes")]
public int? MonitorPerformance
{
	get { return this.GetPropertyValue<int?>("processedtimes"); }
}
///<summary>
///<para>Logical Name: averagetotalduration</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("averagetotalduration")]
public int? MonitorTotalPerformance
{
	get { return this.GetPropertyValue<int?>("averagetotalduration"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 200, "Name"); }
}
///<summary>
///<para>Logical Name: officeappsdeploymentcompleteon</para>
///</summary>
[AttributeLogicalNameAttribute("officeappsdeploymentcompleteon")]
public DateTime? OfficeAppsDeploymentCompletedOn
{
	get { return this.GetPropertyValue<DateTime?>("officeappsdeploymentcompleteon"); }
}
///<summary>
///<para>Logical Name: officeappsdeploymenterror</para>
///<para>Max Length: 2048 characters</para>
///</summary>
[AttributeLogicalNameAttribute("officeappsdeploymenterror")]
public string OfficeAppsDeploymentError
{
	get { return this.GetPropertyValue<string>("officeappsdeploymenterror"); }
}
///<summary>
///<para>Logical Name: officeappsdeploymentscheduled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("officeappsdeploymentscheduled")]
public bool? OfficeAppsDeploymentScheduled
{
	get { return this.GetPropertyValue<bool?>("officeappsdeploymentscheduled"); }
	set { this.SetPropertyValue<bool?>("officeappsdeploymentscheduled", value, "OfficeAppsDeploymentScheduled"); }
}
/// <summary>
///Logical Name: officeappsdeploymentstatus
/// </summary>
[AttributeLogicalNameAttribute("officeappsdeploymentstatus")]
public eOfficeAppsDeploymentType? OfficeAppsDeploymentType
{
	get
	{
		if (OfficeAppsDeploymentType_OptionSetValue != null) { return (eOfficeAppsDeploymentType)OfficeAppsDeploymentType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.OfficeAppsDeploymentType_OptionSetValue = new OptionSetValue((int)value); }
		else this.OfficeAppsDeploymentType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: officeappsdeploymentstatus</para>
///</summary>
[AttributeLogicalNameAttribute("officeappsdeploymentstatus")]
public OptionSetValue OfficeAppsDeploymentType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("officeappsdeploymentstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("officeappsdeploymentstatus", value, "OfficeAppsDeploymentType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OfficeAppsDeploymentType_Text(IOrganizationService Service)
{
	return this.OfficeAppsDeploymentType_OptionSetValue.GetOptionSetText(Service, this, "officeappsdeploymentstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OfficeAppsDeploymentType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OfficeAppsDeploymentType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
/// <summary>
///Logical Name: outgoingemaildeliverymethod
/// </summary>
[AttributeLogicalNameAttribute("outgoingemaildeliverymethod")]
public eOutgoingEmailDeliveryMethod? OutgoingEmail
{
	get
	{
		if (OutgoingEmail_OptionSetValue != null) { return (eOutgoingEmailDeliveryMethod)OutgoingEmail_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.OutgoingEmail_OptionSetValue = new OptionSetValue((int)value); }
		else this.OutgoingEmail_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: outgoingemaildeliverymethod</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingemaildeliverymethod")]
public OptionSetValue OutgoingEmail_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("outgoingemaildeliverymethod"); }
	set { this.SetPropertyValue<OptionSetValue>("outgoingemaildeliverymethod", value, "OutgoingEmail_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OutgoingEmail_Text(IOrganizationService Service)
{
	return this.OutgoingEmail_OptionSetValue.GetOptionSetText(Service, this, "outgoingemaildeliverymethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OutgoingEmail_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OutgoingEmail_OptionSetValue.Value);
}
/// <summary>
///Logical Name: outgoingemailstatus
/// </summary>
[AttributeLogicalNameAttribute("outgoingemailstatus")]
public eOutgoingEmailStatus? OutgoingEmailStatus
{
	get
	{
		if (OutgoingEmailStatus_OptionSetValue != null) { return (eOutgoingEmailStatus)OutgoingEmailStatus_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: outgoingemailstatus</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingemailstatus")]
public OptionSetValue OutgoingEmailStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("outgoingemailstatus"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OutgoingEmailStatus_Text(IOrganizationService Service)
{
	return this.OutgoingEmailStatus_OptionSetValue.GetOptionSetText(Service, this, "outgoingemailstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OutgoingEmailStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OutgoingEmailStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: password</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("password")]
public string Password
{
	get { return this.GetPropertyValue<string>("password"); }
	set { this.SetPropertyValue("password", value, 200, "Password"); }
}
///<summary>
///<para>Logical Name: postponemailboxprocessinguntil</para>
///</summary>
[AttributeLogicalNameAttribute("postponemailboxprocessinguntil")]
public DateTime? PostponeMailboxProcessingUntil
{
	get { return this.GetPropertyValue<DateTime?>("postponemailboxprocessinguntil"); }
	set { this.SetPropertyValue<DateTime?>("postponemailboxprocessinguntil", value, "PostponeMailboxProcessingUntil"); }
}
///<summary>
///<para>Logical Name: postponeofficeappsdeploymentuntil</para>
///</summary>
[AttributeLogicalNameAttribute("postponeofficeappsdeploymentuntil")]
public DateTime? PostponeOutlookMailAppInstallUntil
{
	get { return this.GetPropertyValue<DateTime?>("postponeofficeappsdeploymentuntil"); }
	set { this.SetPropertyValue<DateTime?>("postponeofficeappsdeploymentuntil", value, "PostponeOutlookMailAppInstallUntil"); }
}
///<summary>
///<para>Logical Name: receivingpostponeduntilforact</para>
///</summary>
[AttributeLogicalNameAttribute("receivingpostponeduntilforact")]
public DateTime? PostponeProcessingAppointments_Contacts_AndTasksForTheMailboxUntilTheSpecifiedDataAndTime
{
	get { return this.GetPropertyValue<DateTime?>("receivingpostponeduntilforact"); }
}
///<summary>
///<para>Logical Name: receivingpostponeduntil</para>
///</summary>
[AttributeLogicalNameAttribute("receivingpostponeduntil")]
public DateTime? PostponeReceivingEmailsForTheMailboxUntilTheSpecifiedDataAndTime
{
	get { return this.GetPropertyValue<DateTime?>("receivingpostponeduntil"); }
}
///<summary>
///<para>Logical Name: postponesendinguntil</para>
///</summary>
[AttributeLogicalNameAttribute("postponesendinguntil")]
public DateTime? PostponeSendingUntil
{
	get { return this.GetPropertyValue<DateTime?>("postponesendinguntil"); }
	set { this.SetPropertyValue<DateTime?>("postponesendinguntil", value, "PostponeSendingUntil"); }
}
///<summary>
///<para>Logical Name: postponetestemailconfigurationuntil</para>
///</summary>
[AttributeLogicalNameAttribute("postponetestemailconfigurationuntil")]
public DateTime? PostponeTestEmailConfigurationUntil
{
	get { return this.GetPropertyValue<DateTime?>("postponetestemailconfigurationuntil"); }
	set { this.SetPropertyValue<DateTime?>("postponetestemailconfigurationuntil", value, "PostponeTestEmailConfigurationUntil"); }
}
///<summary>
///<para>Logical Name: processemailreceivedafter</para>
///</summary>
[AttributeLogicalNameAttribute("processemailreceivedafter")]
public DateTime? ProcessEmailReceivedAfter
{
	get { return this.GetPropertyValue<DateTime?>("processemailreceivedafter"); }
	set { this.SetPropertyValue<DateTime?>("processemailreceivedafter", value, "ProcessEmailReceivedAfter"); }
}
///<summary>
///<para>Logical Name: mailboxprocessingcontext</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxprocessingcontext")]
public int? ProcessingContextOfTheMailbox
{
	get { return this.GetPropertyValue<int?>("mailboxprocessingcontext"); }
	set { this.SetPropertyValue("mailboxprocessingcontext", (int?)value, (int)0, (int)2147483647, "ProcessingContextOfTheMailbox"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
}
///<summary>
///<para>Logical Name: emailserverprofile</para>
///</summary>
[AttributeLogicalNameAttribute("emailserverprofile")]
public EntityReference ServerProfile
{
	get { return this.GetPropertyValue<EntityReference>("emailserverprofile"); }
	set { this.SetPropertyValue<EntityReference>("emailserverprofile", value, "ServerProfile"); }
}
///<summary>
///<para>Logical Name: isactsyncorgflagset</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isactsyncorgflagset")]
public bool? SetCurrentOrganizationAsSynchronizationOrganization
{
	get { return this.GetPropertyValue<bool?>("isactsyncorgflagset"); }
	set { this.SetPropertyValue<bool?>("isactsyncorgflagset", value, "SetCurrentOrganizationAsSynchronizationOrganization"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: testemailconfigurationretrycount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("testemailconfigurationretrycount")]
public int? TestEmailConfigurationRetryCount
{
	get { return this.GetPropertyValue<int?>("testemailconfigurationretrycount"); }
	set { this.SetPropertyValue("testemailconfigurationretrycount", (int?)value, (int)0, (int)2147483647, "TestEmailConfigurationRetryCount"); }
}
///<summary>
///<para>Logical Name: testemailconfigurationscheduled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("testemailconfigurationscheduled")]
public bool? TestEmailConfigurationScheduled
{
	get { return this.GetPropertyValue<bool?>("testemailconfigurationscheduled"); }
	set { this.SetPropertyValue<bool?>("testemailconfigurationscheduled", value, "TestEmailConfigurationScheduled"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: transientfailurecount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("transientfailurecount")]
public int? TransientFailureCount
{
	get { return this.GetPropertyValue<int?>("transientfailurecount"); }
}
///<summary>
///<para>Logical Name: undeliverablefolder</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("undeliverablefolder")]
public string UndeliverableFolder
{
	get { return this.GetPropertyValue<string>("undeliverablefolder"); }
	set { this.SetPropertyValue("undeliverablefolder", value, 256, "UndeliverableFolder"); }
}
///<summary>
///<para>Logical Name: username</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("username")]
public string UserName
{
	get { return this.GetPropertyValue<string>("username"); }
	set { this.SetPropertyValue("username", value, 200, "UserName"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: verboseloggingenabled</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///</summary>
[AttributeLogicalNameAttribute("verboseloggingenabled")]
public int? VerboseLogging
{
	get { return this.GetPropertyValue<int?>("verboseloggingenabled"); }
	set { this.SetPropertyValue("verboseloggingenabled", (int?)value, (int)0, (int)100, "VerboseLogging"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: noactcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("noactcount")]
public int? ZeroAppointment_Contact_TaskCountForMailbox
{
	get { return this.GetPropertyValue<int?>("noactcount"); }
}
///<summary>
///<para>Logical Name: noemailcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("noemailcount")]
public int? ZeroEmailCountForMailbox
{
	get { return this.GetPropertyValue<int?>("noemailcount"); }
}


        /// <summary>
/// <para><b>Activity (Sender's Mailbox)</b></para>
/// <para>Schema Name: activitypointer_sendermailboxid_mailbox</para>
/// </summary>
public List<Activity> GetActivities_SendersMailbox (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>Activity (Sender's Mailbox)</b></para>
/// <para>Schema Name: activitypointer_sendermailboxid_mailbox</para>
/// </summary>
public List<Activity> GetActivities_SendersMailbox (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Mailbox_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Mailbox_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: mailbox_asyncoperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: mailbox_asyncoperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Email (Sender's Mailbox)</b></para>
/// <para>Schema Name: email_sendermailboxid_mailbox</para>
/// </summary>
public List<Email> GetEmailMessages_SendersMailbox (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>Email (Sender's Mailbox)</b></para>
/// <para>Schema Name: email_sendermailboxid_mailbox</para>
/// </summary>
public List<Email> GetEmailMessages_SendersMailbox (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>MailboxStatistics (Regarding Mailbox)</b></para>
/// <para>Schema Name: mailbox_mailboxstatistics</para>
/// </summary>
public List<MailboxStatistics> GetMailboxStatistics_RegardingMailbox (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxStatistics>(Service, this.Id, "mailboxstatistics", "mailboxid", Columns); }
/// <summary>
/// <para><b>MailboxStatistics (Regarding Mailbox)</b></para>
/// <para>Schema Name: mailbox_mailboxstatistics</para>
/// </summary>
public List<MailboxStatistics> GetMailboxStatistics_RegardingMailbox (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxStatistics>(Service, this.Id, "mailboxstatistics", "mailboxid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (MailboxId)</b></para>
/// <para>Schema Name: Mailbox_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_MailboxId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "mailboxid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (MailboxId)</b></para>
/// <para>Schema Name: Mailbox_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_MailboxId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "mailboxid", Columns); }
/// <summary>
/// <para><b>Approval (Sender's Mailbox)</b></para>
/// <para>Schema Name: msdyn_approval_mailbox_sendermailboxid</para>
/// </summary>
public List<Approval> GetApprovals_SendersMailbox (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>Approval (Sender's Mailbox)</b></para>
/// <para>Schema Name: msdyn_approval_mailbox_sendermailboxid</para>
/// </summary>
public List<Approval> GetApprovals_SendersMailbox (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Sender's Mailbox)</b></para>
/// <para>Schema Name: msdyn_bookingalert_mailbox_sendermailboxid</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_SendersMailbox (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Sender's Mailbox)</b></para>
/// <para>Schema Name: msdyn_bookingalert_mailbox_sendermailboxid</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_SendersMailbox (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "sendermailboxid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: mailbox_processsessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: mailbox_processsessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Queue (Mailbox)</b></para>
/// <para>Schema Name: queue_defaultmailbox_mailbox</para>
/// </summary>
public List<Queue> GetQueues_Mailbox (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Queue>(Service, this.Id, "queue", "defaultmailbox", Columns); }
/// <summary>
/// <para><b>Queue (Mailbox)</b></para>
/// <para>Schema Name: queue_defaultmailbox_mailbox</para>
/// </summary>
public List<Queue> GetQueues_Mailbox (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Queue>(Service, this.Id, "queue", "defaultmailbox", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Mailbox_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Mailbox_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>User (Mailbox)</b></para>
/// <para>Schema Name: systemuser_defaultmailbox_mailbox</para>
/// </summary>
public List<User> GetUsers_Mailbox (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<User>(Service, this.Id, "systemuser", "defaultmailbox", Columns); }
/// <summary>
/// <para><b>User (Mailbox)</b></para>
/// <para>Schema Name: systemuser_defaultmailbox_mailbox</para>
/// </summary>
public List<User> GetUsers_Mailbox (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<User>(Service, this.Id, "systemuser", "defaultmailbox", Columns); }
/// <summary>
/// <para><b>Trace (Regarding)</b></para>
/// <para>Schema Name: tracelog_Mailbox</para>
/// </summary>
public List<Trace> GetTraces_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Trace>(Service, this.Id, "tracelog", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Trace (Regarding)</b></para>
/// <para>Schema Name: tracelog_Mailbox</para>
/// </summary>
public List<Trace> GetTraces_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Trace>(Service, this.Id, "tracelog", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>TraceRegarding (Regarding)</b></para>
/// <para>Schema Name: mailbox_TraceRegardings</para>
/// </summary>
public List<TraceRegarding> GetTraceRegarding_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TraceRegarding>(Service, this.Id, "traceregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>TraceRegarding (Regarding)</b></para>
/// <para>Schema Name: mailbox_TraceRegardings</para>
/// </summary>
public List<TraceRegarding> GetTraceRegarding_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TraceRegarding>(Service, this.Id, "traceregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: mailbox_userentityinstancedatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: mailbox_userentityinstancedatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eAppointments_Contacts_AndTasks
{
	///<summary><para>Microsoft Dynamics 365 for Outlook</para>
	///<para>Value = 0</para></summary>
	[Description("Microsoft Dynamics 365 for Outlook")]
	MicrosoftDynamics365ForOutlook = 0, 
	///<summary><para>Server-Side Synchronization</para>
	///<para>Value = 1</para></summary>
	[Description("Server-Side Synchronization")]
	Server_SideSynchronization = 1, 
	///<summary><para>None</para>
	///<para>Value = 2</para></summary>
	[Description("None")]
	None = 2
}
public enum eAppointments_Contacts_AndTasksStatus
{
	///<summary><para>Not Run</para>
	///<para>Value = 0</para></summary>
	[Description("Not Run")]
	NotRun = 0, 
	///<summary><para>Success</para>
	///<para>Value = 1</para></summary>
	[Description("Success")]
	Success = 1, 
	///<summary><para>Failure</para>
	///<para>Value = 2</para></summary>
	[Description("Failure")]
	Failure = 2
}
public enum eShowsWhetherTheEmailAddressIsApprovedForEachMailboxForProcessingEmailThroughServer_sideSynchronizationOrTheEmailRouter
{
	///<summary><para>Empty</para>
	///<para>Value = 0</para></summary>
	[Description("Empty")]
	Empty = 0, 
	///<summary><para>Approved</para>
	///<para>Value = 1</para></summary>
	[Description("Approved")]
	Approved = 1, 
	///<summary><para>Pending Approval</para>
	///<para>Value = 2</para></summary>
	[Description("Pending Approval")]
	PendingApproval = 2, 
	///<summary><para>Rejected</para>
	///<para>Value = 3</para></summary>
	[Description("Rejected")]
	Rejected = 3
}
public enum eIncomingEmailDeliveryMethod
{
	///<summary><para>None</para>
	///<para>Value = 0</para></summary>
	[Description("None")]
	None = 0, 
	///<summary><para>Microsoft Dynamics 365 for Outlook</para>
	///<para>Value = 1</para></summary>
	[Description("Microsoft Dynamics 365 for Outlook")]
	MicrosoftDynamics365ForOutlook = 1, 
	///<summary><para>Server-Side Synchronization or Email Router</para>
	///<para>Value = 2</para></summary>
	[Description("Server-Side Synchronization or Email Router")]
	Server_SideSynchronizationOrEmailRouter = 2, 
	///<summary><para>Forward Mailbox</para>
	///<para>Value = 3</para></summary>
	[Description("Forward Mailbox")]
	ForwardMailbox = 3
}
public enum eIncomingEmailStatus
{
	///<summary><para>Not Run</para>
	///<para>Value = 0</para></summary>
	[Description("Not Run")]
	NotRun = 0, 
	///<summary><para>Success</para>
	///<para>Value = 1</para></summary>
	[Description("Success")]
	Success = 1, 
	///<summary><para>Failure</para>
	///<para>Value = 2</para></summary>
	[Description("Failure")]
	Failure = 2
}
public enum eMailboxStatus
{
	///<summary><para>Not Run</para>
	///<para>Value = 0</para></summary>
	[Description("Not Run")]
	NotRun = 0, 
	///<summary><para>Success</para>
	///<para>Value = 1</para></summary>
	[Description("Success")]
	Success = 1, 
	///<summary><para>Failure</para>
	///<para>Value = 2</para></summary>
	[Description("Failure")]
	Failure = 2
}
public enum eOfficeAppsDeploymentType
{
	///<summary><para>NotInstalled</para>
	///<para>Value = 0</para></summary>
	[Description("NotInstalled")]
	NotInstalled = 0, 
	///<summary><para>Installed</para>
	///<para>Value = 1</para></summary>
	[Description("Installed")]
	Installed = 1, 
	///<summary><para>InstallFailed</para>
	///<para>Value = 2</para></summary>
	[Description("InstallFailed")]
	InstallFailed = 2, 
	///<summary><para>UninstallFailed</para>
	///<para>Value = 3</para></summary>
	[Description("UninstallFailed")]
	UninstallFailed = 3, 
	///<summary><para>UpgradeRequired</para>
	///<para>Value = 4</para></summary>
	[Description("UpgradeRequired")]
	UpgradeRequired = 4
}
public enum eOutgoingEmailDeliveryMethod
{
	///<summary><para>None</para>
	///<para>Value = 0</para></summary>
	[Description("None")]
	None = 0, 
	///<summary><para>Microsoft Dynamics 365 for Outlook</para>
	///<para>Value = 1</para></summary>
	[Description("Microsoft Dynamics 365 for Outlook")]
	MicrosoftDynamics365ForOutlook = 1, 
	///<summary><para>Server-Side Synchronization or Email Router</para>
	///<para>Value = 2</para></summary>
	[Description("Server-Side Synchronization or Email Router")]
	Server_SideSynchronizationOrEmailRouter = 2
}
public enum eOutgoingEmailStatus
{
	///<summary><para>Not Run</para>
	///<para>Value = 0</para></summary>
	[Description("Not Run")]
	NotRun = 0, 
	///<summary><para>Success</para>
	///<para>Value = 1</para></summary>
	[Description("Success")]
	Success = 1, 
	///<summary><para>Failure</para>
	///<para>Value = 2</para></summary>
	[Description("Failure")]
	Failure = 2
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>entityimage_timestamp</para>
	/// <para>entityimage_timestamp</para></summary>
	public const string EntityImage_Timestamp = "entityimage_timestamp";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>owningbusinessunitname</para>
	/// <para>owningbusinessunitname</para></summary>
	public const string OwningBusinessUnitName = "owningbusinessunitname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>emailserverprofilename</para>
	/// <para>emailserverprofilename</para></summary>
	public const string EmailServerProfileName = "emailserverprofilename";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>ispasswordset</para>
	/// <para>ispasswordset</para></summary>
	public const string IsPasswordSet = "ispasswordset";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>entityimage_url</para>
	/// <para>entityimage_url</para></summary>
	public const string EntityImage_URL = "entityimage_url";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>Allow to Use Credentials for Email Processing</para>
	/// <para>allowemailconnectortousecredentials</para></summary>
	public const string AllowToUseCredentialsForEmailProcessing = "allowemailconnectortousecredentials";
	/// <summary><para>Appointments, Contacts, and Tasks</para>
	/// <para>actdeliverymethod</para></summary>
	public const string Appointments_Contacts_AndTasks = "actdeliverymethod";
	/// <summary><para>Appointments, Contacts, and Tasks Status</para>
	/// <para>actstatus</para></summary>
	public const string Appointments_Contacts_AndTasksStatus = "actstatus";
	/// <summary><para>Count of the number of times a mailbox gets forced unlocked</para>
	/// <para>forcedunlockcount</para></summary>
	public const string CountOfTheNumberOfTimesAMailboxGetsForcedUnlocked = "forcedunlockcount";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Crm Org Marked as Primary Org for Exchange Mailbox</para>
	/// <para>orgmarkedasprimaryforexchangesync</para></summary>
	public const string CrmOrgMarkedAsPrimaryOrgForExchangeMailbox = "orgmarkedasprimaryforexchangesync";
	/// <summary><para>Date Processing Last Attempted</para>
	/// <para>processinglastattemptedon</para></summary>
	public const string DateProcessingLastAttempted = "processinglastattemptedon";
	/// <summary><para>Delete Emails after Processing</para>
	/// <para>processanddeleteemails</para></summary>
	public const string DeleteEmailsAfterProcessing = "processanddeleteemails";
	/// <summary><para>Email Address</para>
	/// <para>emailaddress</para></summary>
	public const string EmailAddress = "emailaddress";
	/// <summary><para>Email Address O365 Admin Approval Status</para>
	/// <para>isemailaddressapprovedbyo365admin</para></summary>
	public const string EmailAddressO365AdminApprovalStatus = "isemailaddressapprovedbyo365admin";
	/// <summary><para>Email Address Status</para>
	/// <para>emailrouteraccessapproval</para></summary>
	public const string EmailAddressStatus = "emailrouteraccessapproval";
	/// <summary><para>Enabled For Appointments, Contacts, And Tasks</para>
	/// <para>enabledforact</para></summary>
	public const string EnabledForAppointments_Contacts_AndTasks = "enabledforact";
	/// <summary><para>Enabled For Incoming Email</para>
	/// <para>enabledforincomingemail</para></summary>
	public const string EnabledForIncomingEmail = "enabledforincomingemail";
	/// <summary><para>Enabled For Outgoing Email</para>
	/// <para>enabledforoutgoingemail</para></summary>
	public const string EnabledForOutgoingEmail = "enabledforoutgoingemail";
	/// <summary><para>Entity Image Id</para>
	/// <para>entityimageid</para></summary>
	public const string EntityImageId = "entityimageid";
	/// <summary><para>Exchange Sync State</para>
	/// <para>exchangesyncstatexml</para></summary>
	public const string ExchangeSyncState = "exchangesyncstatexml";
	/// <summary><para>Exchange Web Services URL</para>
	/// <para>ewsurl</para></summary>
	public const string ExchangeWebServicesURL = "ewsurl";
	/// <summary><para>Folder Hierarchy</para>
	/// <para>folderhierarchy</para></summary>
	public const string FolderHierarchy = "folderhierarchy";
	/// <summary><para>Host</para>
	/// <para>hostid</para></summary>
	public const string Host = "hostid";
	/// <summary><para>Incoming Email</para>
	/// <para>incomingemaildeliverymethod</para></summary>
	public const string IncomingEmail = "incomingemaildeliverymethod";
	/// <summary><para>Incoming Email Status</para>
	/// <para>incomingemailstatus</para></summary>
	public const string IncomingEmailStatus = "incomingemailstatus";
	/// <summary><para>Is Forward Mailbox</para>
	/// <para>isforwardmailbox</para></summary>
	public const string IsForwardMailbox = "isforwardmailbox";
	/// <summary><para>Is Service Account</para>
	/// <para>isserviceaccount</para></summary>
	public const string IsServiceAccount = "isserviceaccount";
	/// <summary><para>Items Failed For Last Sync</para>
	/// <para>itemsfailedforlastsync</para></summary>
	public const string ItemsFailedForLastSync = "itemsfailedforlastsync";
	/// <summary><para>Items Processed For Last Sync</para>
	/// <para>itemsprocessedforlastsync</para></summary>
	public const string ItemsProcessedForLastSync = "itemsprocessedforlastsync";
	/// <summary><para>Last Active On</para>
	/// <para>lastactiveon</para></summary>
	public const string LastActiveOn = "lastactiveon";
	/// <summary><para>Last Auto Discovered On</para>
	/// <para>lastautodiscoveredon</para></summary>
	public const string LastAutoDiscoveredOn = "lastautodiscoveredon";
	/// <summary><para>Last Date Time when a mailbox got forced unlocked</para>
	/// <para>lastmailboxforcedunlockoccurredon</para></summary>
	public const string LastDateTimeWhenAMailboxGotForcedUnlocked = "lastmailboxforcedunlockoccurredon";
	/// <summary><para>Last Message ID</para>
	/// <para>lastmessageid</para></summary>
	public const string LastMessageID = "lastmessageid";
	/// <summary><para>Last Successful Sync Time</para>
	/// <para>lastsuccessfulsynccompletedon</para></summary>
	public const string LastSuccessfulSyncTime = "lastsuccessfulsynccompletedon";
	/// <summary><para>Last Sync Error Code</para>
	/// <para>lastsyncerrorcode</para></summary>
	public const string LastSyncErrorCode = "lastsyncerrorcode";
	/// <summary><para>Last Sync Error Continuous Count</para>
	/// <para>lastsyncerrorcount</para></summary>
	public const string LastSyncErrorContinuousCount = "lastsyncerrorcount";
	/// <summary><para>Last Sync Error Machine Name</para>
	/// <para>lastsyncerrormachinename</para></summary>
	public const string LastSyncErrorMachineName = "lastsyncerrormachinename";
	/// <summary><para>Last Sync Error Stack</para>
	/// <para>lastsyncerror</para></summary>
	public const string LastSyncErrorStack = "lastsyncerror";
	/// <summary><para>Last Sync Error Time</para>
	/// <para>lastsyncerroroccurredon</para></summary>
	public const string LastSyncErrorTime = "lastsyncerroroccurredon";
	/// <summary><para>Last Sync Start Time</para>
	/// <para>lastsyncstartedon</para></summary>
	public const string LastSyncStartTime = "lastsyncstartedon";
	/// <summary><para>Mailbox</para>
	/// <para>mailboxid</para></summary>
	public const string MailboxId = "mailboxid";
	/// <summary><para>Mailbox Processing State</para>
	/// <para>processingstatecode</para></summary>
	public const string MailboxProcessingState = "processingstatecode";
	/// <summary><para>Mailbox Status</para>
	/// <para>mailboxstatus</para></summary>
	public const string MailboxStatus = "mailboxstatus";
	/// <summary><para>Mailbox Test Completed On</para>
	/// <para>testmailboxaccesscompletedon</para></summary>
	public const string MailboxTestCompletedOn = "testmailboxaccesscompletedon";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Monitor last duration Performance</para>
	/// <para>lastduration</para></summary>
	public const string MonitorLastDurationPerformance = "lastduration";
	/// <summary><para>Monitor Performance</para>
	/// <para>processedtimes</para></summary>
	public const string MonitorPerformance = "processedtimes";
	/// <summary><para>Monitor Total Performance</para>
	/// <para>averagetotalduration</para></summary>
	public const string MonitorTotalPerformance = "averagetotalduration";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Office Apps Deployment Completed On</para>
	/// <para>officeappsdeploymentcompleteon</para></summary>
	public const string OfficeAppsDeploymentCompletedOn = "officeappsdeploymentcompleteon";
	/// <summary><para>Office Apps Deployment Error</para>
	/// <para>officeappsdeploymenterror</para></summary>
	public const string OfficeAppsDeploymentError = "officeappsdeploymenterror";
	/// <summary><para>Office Apps Deployment Scheduled</para>
	/// <para>officeappsdeploymentscheduled</para></summary>
	public const string OfficeAppsDeploymentScheduled = "officeappsdeploymentscheduled";
	/// <summary><para>Office Apps Deployment Type</para>
	/// <para>officeappsdeploymentstatus</para></summary>
	public const string OfficeAppsDeploymentType = "officeappsdeploymentstatus";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Outgoing Email</para>
	/// <para>outgoingemaildeliverymethod</para></summary>
	public const string OutgoingEmail = "outgoingemaildeliverymethod";
	/// <summary><para>Outgoing Email Status</para>
	/// <para>outgoingemailstatus</para></summary>
	public const string OutgoingEmailStatus = "outgoingemailstatus";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Password</para>
	/// <para>password</para></summary>
	public const string Password = "password";
	/// <summary><para>Postpone Mailbox Processing Until</para>
	/// <para>postponemailboxprocessinguntil</para></summary>
	public const string PostponeMailboxProcessingUntil = "postponemailboxprocessinguntil";
	/// <summary><para>Postpone Outlook Mail App Install Until</para>
	/// <para>postponeofficeappsdeploymentuntil</para></summary>
	public const string PostponeOutlookMailAppInstallUntil = "postponeofficeappsdeploymentuntil";
	/// <summary><para>Postpone processing Appointments, Contacts, and Tasks for the mailbox until the specified data and time.</para>
	/// <para>receivingpostponeduntilforact</para></summary>
	public const string PostponeProcessingAppointments_Contacts_AndTasksForTheMailboxUntilTheSpecifiedDataAndTime = "receivingpostponeduntilforact";
	/// <summary><para>Postpone receiving emails for the mailbox until the specified data and time.</para>
	/// <para>receivingpostponeduntil</para></summary>
	public const string PostponeReceivingEmailsForTheMailboxUntilTheSpecifiedDataAndTime = "receivingpostponeduntil";
	/// <summary><para>Postpone Sending Until</para>
	/// <para>postponesendinguntil</para></summary>
	public const string PostponeSendingUntil = "postponesendinguntil";
	/// <summary><para>Postpone Test Email Configuration Until</para>
	/// <para>postponetestemailconfigurationuntil</para></summary>
	public const string PostponeTestEmailConfigurationUntil = "postponetestemailconfigurationuntil";
	/// <summary><para>Process Email Received After</para>
	/// <para>processemailreceivedafter</para></summary>
	public const string ProcessEmailReceivedAfter = "processemailreceivedafter";
	/// <summary><para>Processing Context of the Mailbox</para>
	/// <para>mailboxprocessingcontext</para></summary>
	public const string ProcessingContextOfTheMailbox = "mailboxprocessingcontext";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Regarding Name</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingName = "regardingobjectidname";
	/// <summary><para>Regarding Object Type Code</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>Server Profile</para>
	/// <para>emailserverprofile</para></summary>
	public const string ServerProfile = "emailserverprofile";
	/// <summary><para>Set Current Organization as Synchronization Organization</para>
	/// <para>isactsyncorgflagset</para></summary>
	public const string SetCurrentOrganizationAsSynchronizationOrganization = "isactsyncorgflagset";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Test Email Configuration Retry Count</para>
	/// <para>testemailconfigurationretrycount</para></summary>
	public const string TestEmailConfigurationRetryCount = "testemailconfigurationretrycount";
	/// <summary><para>Test Email Configuration Scheduled</para>
	/// <para>testemailconfigurationscheduled</para></summary>
	public const string TestEmailConfigurationScheduled = "testemailconfigurationscheduled";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Transient Failure Count</para>
	/// <para>transientfailurecount</para></summary>
	public const string TransientFailureCount = "transientfailurecount";
	/// <summary><para>Undeliverable Folder</para>
	/// <para>undeliverablefolder</para></summary>
	public const string UndeliverableFolder = "undeliverablefolder";
	/// <summary><para>User Name</para>
	/// <para>username</para></summary>
	public const string UserName = "username";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Verbose Logging</para>
	/// <para>verboseloggingenabled</para></summary>
	public const string VerboseLogging = "verboseloggingenabled";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Zero appointment, contact, task count for mailbox</para>
	/// <para>noactcount</para></summary>
	public const string ZeroAppointment_Contact_TaskCountForMailbox = "noactcount";
	/// <summary><para>Zero email count for mailbox</para>
	/// <para>noemailcount</para></summary>
	public const string ZeroEmailCountForMailbox = "noemailcount";
}

    }
}
