// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("pluginassembly")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Plug_inAssembly : BaseProxyClass
    {
        public new const string LogicalName = "pluginassembly";
        public const int ObjectTypeCode = 4605;
        public const string PrimaryIdAttribute = "pluginassemblyid";
        public const string PrimaryNameAttribute = "name";
        
        static Plug_inAssembly()
        {
            BaseProxyClass.RegisterProxyType(typeof(Plug_inAssembly), "pluginassembly");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Plug_inAssembly() : base(new Entity("pluginassembly")) { }
        public Plug_inAssembly(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Plug_inAssembly>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: content</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("content")]
public string Content
{
	get { return this.GetPropertyValue<string>("content"); }
	set { this.SetPropertyValue("content", value, 1073741823, "Content"); }
}
///<summary>
///<para>Logical Name: major</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 65534</para>
///</summary>
[AttributeLogicalNameAttribute("major")]
public int? Major
{
	get { return this.GetPropertyValue<int?>("major"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference OrganizationId
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: customizationlevel</para>
///<para>Minimum Value: -255</para>
///<para>Maximum Value: 255</para>
///</summary>
[AttributeLogicalNameAttribute("customizationlevel")]
public int? CustomizationLevel
{
	get { return this.GetPropertyValue<int?>("customizationlevel"); }
}
///<summary>
///<para>Logical Name: minor</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 65534</para>
///</summary>
[AttributeLogicalNameAttribute("minor")]
public int? Minor
{
	get { return this.GetPropertyValue<int?>("minor"); }
}
///<summary>
///<para>Logical Name: pluginassemblyidunique</para>
///</summary>
[AttributeLogicalNameAttribute("pluginassemblyidunique")]
public Guid PluginAssemblyIdUnique
{
	get { return this.GetPropertyValue<Guid>("pluginassemblyidunique"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: pluginassemblyid</para>
///</summary>
[AttributeLogicalNameAttribute("pluginassemblyid")]
public Guid PluginAssemblyId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: sourcehash</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("sourcehash")]
public string SourceHash
{
	get { return this.GetPropertyValue<string>("sourcehash"); }
	set { this.SetPropertyValue("sourcehash", value, 256, "SourceHash"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: culture</para>
///<para>Max Length: 32 characters</para>
///</summary>
[AttributeLogicalNameAttribute("culture")]
public string Culture
{
	get { return this.GetPropertyValue<string>("culture"); }
	set { this.SetPropertyValue("culture", value, 32, "Culture"); }
}
///<summary>
///<para>Logical Name: iscustomizable</para>
///</summary>
[AttributeLogicalNameAttribute("iscustomizable")]
public BooleanManagedProperty Customizable
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("iscustomizable"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("iscustomizable", value, "Customizable"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 256, "Description"); }
}
///<summary>
///<para>Logical Name: ishidden</para>
///</summary>
[AttributeLogicalNameAttribute("ishidden")]
public BooleanManagedProperty Hidden
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("ishidden"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("ishidden", value, "Hidden"); }
}
///<summary>
///<para>Logical Name: introducedversion</para>
///<para>Max Length: 48 characters</para>
///</summary>
[AttributeLogicalNameAttribute("introducedversion")]
public string IntroducedVersion
{
	get { return this.GetPropertyValue<string>("introducedversion"); }
	set { this.SetPropertyValue("introducedversion", value, 48, "IntroducedVersion"); }
}
/// <summary>
///Logical Name: isolationmode
/// </summary>
[AttributeLogicalNameAttribute("isolationmode")]
public eIsolationMode? IsolationMode
{
	get
	{
		if (IsolationMode_OptionSetValue != null) { return (eIsolationMode)IsolationMode_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.IsolationMode_OptionSetValue = new OptionSetValue((int)value); }
		else this.IsolationMode_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: isolationmode</para>
///</summary>
[AttributeLogicalNameAttribute("isolationmode")]
public OptionSetValue IsolationMode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("isolationmode"); }
	set { this.SetPropertyValue<OptionSetValue>("isolationmode", value, "IsolationMode_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IsolationMode_Text(IOrganizationService Service)
{
	return this.IsolationMode_OptionSetValue.GetOptionSetText(Service, this, "isolationmode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IsolationMode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IsolationMode_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 256, "Name"); }
}
///<summary>
///<para>Logical Name: path</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("path")]
public string Path
{
	get { return this.GetPropertyValue<string>("path"); }
	set { this.SetPropertyValue("path", value, 256, "Path"); }
}
///<summary>
///<para>Logical Name: publickeytoken</para>
///<para>Max Length: 32 characters</para>
///</summary>
[AttributeLogicalNameAttribute("publickeytoken")]
public string PublicKeyToken
{
	get { return this.GetPropertyValue<string>("publickeytoken"); }
	set { this.SetPropertyValue("publickeytoken", value, 32, "PublicKeyToken"); }
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? RecordOverwriteTime
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
/// <summary>
///Logical Name: sourcetype
/// </summary>
[AttributeLogicalNameAttribute("sourcetype")]
public eSourceType? SourceType
{
	get
	{
		if (SourceType_OptionSetValue != null) { return (eSourceType)SourceType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.SourceType_OptionSetValue = new OptionSetValue((int)value); }
		else this.SourceType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: sourcetype</para>
///</summary>
[AttributeLogicalNameAttribute("sourcetype")]
public OptionSetValue SourceType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("sourcetype"); }
	set { this.SetPropertyValue<OptionSetValue>("sourcetype", value, "SourceType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string SourceType_Text(IOrganizationService Service)
{
	return this.SourceType_OptionSetValue.GetOptionSetText(Service, this, "sourcetype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string SourceType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.SourceType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? State
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: version</para>
///<para>Max Length: 48 characters</para>
///</summary>
[AttributeLogicalNameAttribute("version")]
public string Version
{
	get { return this.GetPropertyValue<string>("version"); }
	set { this.SetPropertyValue("version", value, 48, "Version"); }
}


        /// <summary>
/// <para><b>Plug_inType (Plugin Assembly)</b></para>
/// <para>Schema Name: pluginassembly_plugintype</para>
/// </summary>
public List<Plug_inType> GetPlug_inTypes_PluginAssembly (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Plug_inType>(Service, this.Id, "plugintype", "pluginassemblyid", Columns); }
/// <summary>
/// <para><b>Plug_inType (Plugin Assembly)</b></para>
/// <para>Schema Name: pluginassembly_plugintype</para>
/// </summary>
public List<Plug_inType> GetPlug_inTypes_PluginAssembly (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Plug_inType>(Service, this.Id, "plugintype", "pluginassemblyid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_pluginassembly</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_pluginassembly</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eIsolationMode
{
	///<summary><para>None</para>
	///<para>Value = 1</para></summary>
	[Description("None")]
	None = 1, 
	///<summary><para>Sandbox</para>
	///<para>Value = 2</para></summary>
	[Description("Sandbox")]
	Sandbox = 2
}
public enum eSourceType
{
	///<summary><para>Database</para>
	///<para>Value = 0</para></summary>
	[Description("Database")]
	Database = 0, 
	///<summary><para>Disk</para>
	///<para>Value = 1</para></summary>
	[Description("Disk")]
	Disk = 1, 
	///<summary><para>Normal</para>
	///<para>Value = 2</para></summary>
	[Description("Normal")]
	Normal = 2
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>content</para>
	/// <para>content</para></summary>
	public const string Content = "content";
	/// <summary><para>major</para>
	/// <para>major</para></summary>
	public const string Major = "major";
	/// <summary><para>organizationid</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>customizationlevel</para>
	/// <para>customizationlevel</para></summary>
	public const string CustomizationLevel = "customizationlevel";
	/// <summary><para>minor</para>
	/// <para>minor</para></summary>
	public const string Minor = "minor";
	/// <summary><para>pluginassemblyidunique</para>
	/// <para>pluginassemblyidunique</para></summary>
	public const string PluginAssemblyIdUnique = "pluginassemblyidunique";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>pluginassemblyid</para>
	/// <para>pluginassemblyid</para></summary>
	public const string PluginAssemblyId = "pluginassemblyid";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>sourcehash</para>
	/// <para>sourcehash</para></summary>
	public const string SourceHash = "sourcehash";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Culture</para>
	/// <para>culture</para></summary>
	public const string Culture = "culture";
	/// <summary><para>Customizable</para>
	/// <para>iscustomizable</para></summary>
	public const string Customizable = "iscustomizable";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Hidden</para>
	/// <para>ishidden</para></summary>
	public const string Hidden = "ishidden";
	/// <summary><para>Introduced Version</para>
	/// <para>introducedversion</para></summary>
	public const string IntroducedVersion = "introducedversion";
	/// <summary><para>Isolation Mode</para>
	/// <para>isolationmode</para></summary>
	public const string IsolationMode = "isolationmode";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Path</para>
	/// <para>path</para></summary>
	public const string Path = "path";
	/// <summary><para>Public Key Token</para>
	/// <para>publickeytoken</para></summary>
	public const string PublicKeyToken = "publickeytoken";
	/// <summary><para>Record Overwrite Time</para>
	/// <para>overwritetime</para></summary>
	public const string RecordOverwriteTime = "overwritetime";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
	/// <summary><para>Source Type</para>
	/// <para>sourcetype</para></summary>
	public const string SourceType = "sourcetype";
	/// <summary><para>State</para>
	/// <para>ismanaged</para></summary>
	public const string State = "ismanaged";
	/// <summary><para>Version</para>
	/// <para>version</para></summary>
	public const string Version = "version";
}

    }
}
