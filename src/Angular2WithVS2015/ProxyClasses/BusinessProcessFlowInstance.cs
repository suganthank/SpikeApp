// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("businessprocessflowinstance")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class BusinessProcessFlowInstance : BaseProxyClass
    {
        public new const string LogicalName = "businessprocessflowinstance";
        public const int ObjectTypeCode = 4725;
        public const string PrimaryIdAttribute = "businessprocessflowinstanceid";
        public const string PrimaryNameAttribute = "";
        
        static BusinessProcessFlowInstance()
        {
            BaseProxyClass.RegisterProxyType(typeof(BusinessProcessFlowInstance), "businessprocessflowinstance");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public BusinessProcessFlowInstance() : base(new Entity("businessprocessflowinstance")) { }
        public BusinessProcessFlowInstance(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<BusinessProcessFlowInstance>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string ActivePath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "ActivePath"); }
}
///<summary>
///<para>Logical Name: processstageid</para>
///</summary>
[AttributeLogicalNameAttribute("processstageid")]
public Guid ActiveStageID
{
	get { return this.GetPropertyValue<Guid>("processstageid"); }
	set { this.SetPropertyValue<Guid>("processstageid", value, "ActiveStageID"); }
}
///<summary>
///<para>Logical Name: activestagestartedon</para>
///</summary>
[AttributeLogicalNameAttribute("activestagestartedon")]
public DateTime? ActiveStageStartedOn
{
	get { return this.GetPropertyValue<DateTime?>("activestagestartedon"); }
}
///<summary>
///<para>Logical Name: completedon</para>
///</summary>
[AttributeLogicalNameAttribute("completedon")]
public DateTime? CompletedOn
{
	get { return this.GetPropertyValue<DateTime?>("completedon"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: entity1id</para>
///</summary>
[AttributeLogicalNameAttribute("entity1id")]
public Guid Entity1ID
{
	get { return this.GetPropertyValue<Guid>("entity1id"); }
	set { this.SetPropertyValue<Guid>("entity1id", value, "Entity1ID"); }
}
///<summary>
///<para>Logical Name: entity2id</para>
///</summary>
[AttributeLogicalNameAttribute("entity2id")]
public Guid Entity2ID
{
	get { return this.GetPropertyValue<Guid>("entity2id"); }
	set { this.SetPropertyValue<Guid>("entity2id", value, "Entity2ID"); }
}
///<summary>
///<para>Logical Name: entity3id</para>
///</summary>
[AttributeLogicalNameAttribute("entity3id")]
public Guid Entity3ID
{
	get { return this.GetPropertyValue<Guid>("entity3id"); }
	set { this.SetPropertyValue<Guid>("entity3id", value, "Entity3ID"); }
}
///<summary>
///<para>Logical Name: entity4id</para>
///</summary>
[AttributeLogicalNameAttribute("entity4id")]
public Guid Entity4Id
{
	get { return this.GetPropertyValue<Guid>("entity4id"); }
	set { this.SetPropertyValue<Guid>("entity4id", value, "Entity4Id"); }
}
///<summary>
///<para>Logical Name: entity5id</para>
///</summary>
[AttributeLogicalNameAttribute("entity5id")]
public Guid Entity5ID
{
	get { return this.GetPropertyValue<Guid>("entity5id"); }
	set { this.SetPropertyValue<Guid>("entity5id", value, "Entity5ID"); }
}
///<summary>
///<para>Logical Name: entity1objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("entity1objecttypecode")]
public string Entity1ObjectTypeCode
{
	get { return this.GetPropertyValue<string>("entity1objecttypecode"); }
	set { this.SetPropertyValue<string>("entity1objecttypecode", value, "Entity1ObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: entity2objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("entity2objecttypecode")]
public string Entity2ObjectTypeCode
{
	get { return this.GetPropertyValue<string>("entity2objecttypecode"); }
	set { this.SetPropertyValue<string>("entity2objecttypecode", value, "Entity2ObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: entity3objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("entity3objecttypecode")]
public string Entity3ObjectTypeCode
{
	get { return this.GetPropertyValue<string>("entity3objecttypecode"); }
	set { this.SetPropertyValue<string>("entity3objecttypecode", value, "Entity3ObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: entity4objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("entity4objecttypecode")]
public string Entity4ObjectTypeCode
{
	get { return this.GetPropertyValue<string>("entity4objecttypecode"); }
	set { this.SetPropertyValue<string>("entity4objecttypecode", value, "Entity4ObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: entity5objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("entity5objecttypecode")]
public string Entity5ObjectTypeCode
{
	get { return this.GetPropertyValue<string>("entity5objecttypecode"); }
	set { this.SetPropertyValue<string>("entity5objecttypecode", value, "Entity5ObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string InstanceName
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 200, "InstanceName"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public EntityReference Process
{
	get { return this.GetPropertyValue<EntityReference>("processid"); }
	set { this.SetPropertyValue<EntityReference>("processid", value, "Process"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: businessprocessflowinstanceid</para>
///</summary>
[AttributeLogicalNameAttribute("businessprocessflowinstanceid")]
public Guid ProcessInstanceIDId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eState? State
{
	get
	{
		if (State_OptionSetValue != null) { return (eState)State_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.State_OptionSetValue = new OptionSetValue((int)value); }
		else this.State_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue State_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "State_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string State_Text(IOrganizationService Service)
{
	return this.State_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string State_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.State_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        

        

        

        public enum eState
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Finished</para>
	///<para>Value = 2</para></summary>
	[Description("Finished")]
	Finished_Inactive = 2, 
	///<summary><para>Aborted</para>
	///<para>Value = 3</para></summary>
	[Description("Aborted")]
	Aborted_Inactive = 3
}
public void SetState(IOrganizationService Service, eState State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eState State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>Active Path</para>
	/// <para>traversedpath</para></summary>
	public const string ActivePath = "traversedpath";
	/// <summary><para>Active Stage ID</para>
	/// <para>processstageid</para></summary>
	public const string ActiveStageID = "processstageid";
	/// <summary><para>Active Stage Started On</para>
	/// <para>activestagestartedon</para></summary>
	public const string ActiveStageStartedOn = "activestagestartedon";
	/// <summary><para>Completed On</para>
	/// <para>completedon</para></summary>
	public const string CompletedOn = "completedon";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Entity 1 ID</para>
	/// <para>entity1id</para></summary>
	public const string Entity1ID = "entity1id";
	/// <summary><para>Entity 2 ID</para>
	/// <para>entity2id</para></summary>
	public const string Entity2ID = "entity2id";
	/// <summary><para>Entity 3 ID</para>
	/// <para>entity3id</para></summary>
	public const string Entity3ID = "entity3id";
	/// <summary><para>Entity 4 Id</para>
	/// <para>entity4id</para></summary>
	public const string Entity4Id = "entity4id";
	/// <summary><para>Entity 5 ID</para>
	/// <para>entity5id</para></summary>
	public const string Entity5ID = "entity5id";
	/// <summary><para>Entity1ObjectTypeCode</para>
	/// <para>entity1objecttypecode</para></summary>
	public const string Entity1ObjectTypeCode = "entity1objecttypecode";
	/// <summary><para>Entity2ObjectTypeCode</para>
	/// <para>entity2objecttypecode</para></summary>
	public const string Entity2ObjectTypeCode = "entity2objecttypecode";
	/// <summary><para>Entity3ObjectTypeCode</para>
	/// <para>entity3objecttypecode</para></summary>
	public const string Entity3ObjectTypeCode = "entity3objecttypecode";
	/// <summary><para>Entity4ObjectTypeCode</para>
	/// <para>entity4objecttypecode</para></summary>
	public const string Entity4ObjectTypeCode = "entity4objecttypecode";
	/// <summary><para>Entity5ObjectTypeCode</para>
	/// <para>entity5objecttypecode</para></summary>
	public const string Entity5ObjectTypeCode = "entity5objecttypecode";
	/// <summary><para>Instance Name</para>
	/// <para>name</para></summary>
	public const string InstanceName = "name";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Process</para>
	/// <para>processid</para></summary>
	public const string Process = "processid";
	/// <summary><para>Process Instance ID</para>
	/// <para>businessprocessflowinstanceid</para></summary>
	public const string ProcessInstanceIDId = "businessprocessflowinstanceid";
	/// <summary><para>State</para>
	/// <para>statecode</para></summary>
	public const string State = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
