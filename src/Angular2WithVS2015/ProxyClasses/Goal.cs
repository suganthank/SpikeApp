// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("goal")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Goal : BaseProxyClass
    {
        public new const string LogicalName = "goal";
        public const int ObjectTypeCode = 9600;
        public const string PrimaryIdAttribute = "goalid";
        public const string PrimaryNameAttribute = "title";
        
        static Goal()
        {
            BaseProxyClass.RegisterProxyType(typeof(Goal), "goal");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Goal() : base(new Entity("goal")) { }
        public Goal(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Goal>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: entityimage_timestamp</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_timestamp")]
public int? EntityImage_Timestamp
{
	get { return this.GetPropertyValue<int?>("entityimage_timestamp"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: rollupqueryinprogressmoneyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryinprogressmoneyidname")]
public string RollUpQueryInprogressMoneyIdName
{
	get { return this.GetPropertyValue<string>("rollupqueryinprogressmoneyidname"); }
}
///<summary>
///<para>Logical Name: parentgoalidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("parentgoalidname")]
public string ParentGoalIdName
{
	get { return this.GetPropertyValue<string>("parentgoalidname"); }
}
///<summary>
///<para>Logical Name: rollupqueryinprogressdecimalidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryinprogressdecimalidname")]
public string RollUpQueryInprogressDecimalIdName
{
	get { return this.GetPropertyValue<string>("rollupqueryinprogressdecimalidname"); }
}
///<summary>
///<para>Logical Name: rollupqueryactualintegeridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryactualintegeridname")]
public string RollupQueryActualIntegerIdName
{
	get { return this.GetPropertyValue<string>("rollupqueryactualintegeridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: goalwitherroridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("goalwitherroridname")]
public string GoalWithErrorIdName
{
	get { return this.GetPropertyValue<string>("goalwitherroridname"); }
}
///<summary>
///<para>Logical Name: goalowneridname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("goalowneridname")]
public string GoalOwnerIdName
{
	get { return this.GetPropertyValue<string>("goalowneridname"); }
}
///<summary>
///<para>Logical Name: goalowneridyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("goalowneridyominame")]
public string GoalOwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("goalowneridyominame"); }
}
///<summary>
///<para>Logical Name: rollupquerycustomdecimalidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupquerycustomdecimalidname")]
public string RollUpQueryCustomDecimalIdName
{
	get { return this.GetPropertyValue<string>("rollupquerycustomdecimalidname"); }
}
///<summary>
///<para>Logical Name: rollupqueryinprogressintegeridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryinprogressintegeridname")]
public string RollUpQueryInprogressIntegerIdName
{
	get { return this.GetPropertyValue<string>("rollupqueryinprogressintegeridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: rollupqueryactualdecimalidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryactualdecimalidname")]
public string RollUpQueryActualDecimalIdName
{
	get { return this.GetPropertyValue<string>("rollupqueryactualdecimalidname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: rollupqueryactualmoneyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryactualmoneyidname")]
public string RollUpQueryActualMoneyIdName
{
	get { return this.GetPropertyValue<string>("rollupqueryactualmoneyidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: rollupquerycustomintegeridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupquerycustomintegeridname")]
public string RollUpQueryCustomIntegerIdName
{
	get { return this.GetPropertyValue<string>("rollupquerycustomintegeridname"); }
}
///<summary>
///<para>Logical Name: rollupquerycustommoneyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rollupquerycustommoneyidname")]
public string RollUpQueryCustomMoneyIdName
{
	get { return this.GetPropertyValue<string>("rollupquerycustommoneyidname"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: metricidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("metricidname")]
public string MetricIdName
{
	get { return this.GetPropertyValue<string>("metricidname"); }
}
///<summary>
///<para>Logical Name: entityimage_url</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_url")]
public string EntityImage_URL
{
	get { return this.GetPropertyValue<string>("entityimage_url"); }
}
///<summary>
///<para>Logical Name: actualstring</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("actualstring")]
public string Actual
{
	get { return this.GetPropertyValue<string>("actualstring"); }
}
///<summary>
///<para>Logical Name: actualdecimal</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("actualdecimal")]
public decimal? Actual_Decimal
{
	get { return this.GetPropertyValue<decimal?>("actualdecimal"); }
	set { this.SetPropertyValue("actualdecimal", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "Actual_Decimal"); }
}
///<summary>
///<para>Logical Name: actualinteger</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("actualinteger")]
public int? Actual_Integer
{
	get { return this.GetPropertyValue<int?>("actualinteger"); }
	set { this.SetPropertyValue("actualinteger", (int?)value, (int)-2147483648, (int)2147483647, "Actual_Integer"); }
}
///<summary>
///<para>Logical Name: actualmoney</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Actual_Money
{
	get
	{
		if (Actual_MoneyMoney != null) { return Actual_MoneyMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Actual_MoneyMoney = new Money(value.Value); }
		else this.Actual_MoneyMoney = null;
	}
}
///<summary>
///<para>Logical Name: actualmoney</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("actualmoney")]
public Money Actual_MoneyMoney
{
	get { return this.GetPropertyValue<Money>("actualmoney"); }
	set { this.SetPropertyValue("actualmoney", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "Actual_MoneyMoney"); }
}
///<summary>
///<para>Logical Name: actualmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Actual_Money_Base
{
	get
	{
		if (Actual_Money_BaseMoney != null) { return Actual_Money_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: actualmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("actualmoney_base")]
public Money Actual_Money_BaseMoney
{
	get { return this.GetPropertyValue<Money>("actualmoney_base"); }
}
/// <summary>
///Logical Name: amountdatatype
/// </summary>
[AttributeLogicalNameAttribute("amountdatatype")]
public eGoalType? AmountDataType
{
	get
	{
		if (AmountDataType_OptionSetValue != null) { return (eGoalType)AmountDataType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AmountDataType_OptionSetValue = new OptionSetValue((int)value); }
		else this.AmountDataType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: amountdatatype</para>
///</summary>
[AttributeLogicalNameAttribute("amountdatatype")]
public OptionSetValue AmountDataType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("amountdatatype"); }
	set { this.SetPropertyValue<OptionSetValue>("amountdatatype", value, "AmountDataType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AmountDataType_Text(IOrganizationService Service)
{
	return this.AmountDataType_OptionSetValue.GetOptionSetText(Service, this, "amountdatatype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AmountDataType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AmountDataType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
}
///<summary>
///<para>Logical Name: customrollupfieldstring</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("customrollupfieldstring")]
public string CustomRollupField
{
	get { return this.GetPropertyValue<string>("customrollupfieldstring"); }
}
///<summary>
///<para>Logical Name: customrollupfielddecimal</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("customrollupfielddecimal")]
public decimal? CustomRollupField_Decimal
{
	get { return this.GetPropertyValue<decimal?>("customrollupfielddecimal"); }
	set { this.SetPropertyValue("customrollupfielddecimal", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "CustomRollupField_Decimal"); }
}
///<summary>
///<para>Logical Name: customrollupfieldinteger</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("customrollupfieldinteger")]
public int? CustomRollupField_Integer
{
	get { return this.GetPropertyValue<int?>("customrollupfieldinteger"); }
	set { this.SetPropertyValue("customrollupfieldinteger", (int?)value, (int)-2147483648, (int)2147483647, "CustomRollupField_Integer"); }
}
///<summary>
///<para>Logical Name: customrollupfieldmoney</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? CustomRollupField_Money
{
	get
	{
		if (CustomRollupField_MoneyMoney != null) { return CustomRollupField_MoneyMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CustomRollupField_MoneyMoney = new Money(value.Value); }
		else this.CustomRollupField_MoneyMoney = null;
	}
}
///<summary>
///<para>Logical Name: customrollupfieldmoney</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("customrollupfieldmoney")]
public Money CustomRollupField_MoneyMoney
{
	get { return this.GetPropertyValue<Money>("customrollupfieldmoney"); }
	set { this.SetPropertyValue("customrollupfieldmoney", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "CustomRollupField_MoneyMoney"); }
}
///<summary>
///<para>Logical Name: customrollupfieldmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? CustomRollupField_Money_Base
{
	get
	{
		if (CustomRollupField_Money_BaseMoney != null) { return CustomRollupField_Money_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: customrollupfieldmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("customrollupfieldmoney_base")]
public Money CustomRollupField_Money_BaseMoney
{
	get { return this.GetPropertyValue<Money>("customrollupfieldmoney_base"); }
}
///<summary>
///<para>Logical Name: depth</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("depth")]
public int? Depth
{
	get { return this.GetPropertyValue<int?>("depth"); }
}
///<summary>
///<para>Logical Name: entityimageid</para>
///</summary>
[AttributeLogicalNameAttribute("entityimageid")]
public Guid EntityImageId
{
	get { return this.GetPropertyValue<Guid>("entityimageid"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
/// <summary>
///Logical Name: fiscalperiod
/// </summary>
[AttributeLogicalNameAttribute("fiscalperiod")]
public eFiscalPeriod? FiscalPeriod
{
	get
	{
		if (FiscalPeriod_OptionSetValue != null) { return (eFiscalPeriod)FiscalPeriod_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FiscalPeriod_OptionSetValue = new OptionSetValue((int)value); }
		else this.FiscalPeriod_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: fiscalperiod</para>
///</summary>
[AttributeLogicalNameAttribute("fiscalperiod")]
public OptionSetValue FiscalPeriod_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("fiscalperiod"); }
	set { this.SetPropertyValue<OptionSetValue>("fiscalperiod", value, "FiscalPeriod_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FiscalPeriod_Text(IOrganizationService Service)
{
	return this.FiscalPeriod_OptionSetValue.GetOptionSetText(Service, this, "fiscalperiod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FiscalPeriod_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FiscalPeriod_OptionSetValue.Value);
}
/// <summary>
///Logical Name: fiscalyear
/// </summary>
[AttributeLogicalNameAttribute("fiscalyear")]
public eFiscalYear? FiscalYear
{
	get
	{
		if (FiscalYear_OptionSetValue != null) { return (eFiscalYear)FiscalYear_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FiscalYear_OptionSetValue = new OptionSetValue((int)value); }
		else this.FiscalYear_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: fiscalyear</para>
///</summary>
[AttributeLogicalNameAttribute("fiscalyear")]
public OptionSetValue FiscalYear_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("fiscalyear"); }
	set { this.SetPropertyValue<OptionSetValue>("fiscalyear", value, "FiscalYear_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FiscalYear_Text(IOrganizationService Service)
{
	return this.FiscalYear_OptionSetValue.GetOptionSetText(Service, this, "fiscalyear");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FiscalYear_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FiscalYear_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: goalstartdate</para>
///</summary>
[AttributeLogicalNameAttribute("goalstartdate")]
public DateTime? @From
{
	get { return this.GetPropertyValue<DateTime?>("goalstartdate"); }
	set { this.SetPropertyValue<DateTime?>("goalstartdate", value, "@From"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: goalid</para>
///</summary>
[AttributeLogicalNameAttribute("goalid")]
public Guid GoalId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: metricid</para>
///</summary>
[AttributeLogicalNameAttribute("metricid")]
public EntityReference GoalMetric
{
	get { return this.GetPropertyValue<EntityReference>("metricid"); }
	set { this.SetPropertyValue<EntityReference>("metricid", value, "GoalMetric"); }
}
///<summary>
///<para>Logical Name: goalownerid</para>
///</summary>
[AttributeLogicalNameAttribute("goalownerid")]
public EntityReference GoalOwner
{
	get { return this.GetPropertyValue<EntityReference>("goalownerid"); }
	set { this.SetPropertyValue<EntityReference>("goalownerid", value, "GoalOwner"); }
}
///<summary>
///<para>Logical Name: goalowneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("goalowneridtype")]
public string GoalOwnerType
{
	get { return this.GetPropertyValue<string>("goalowneridtype"); }
	set { this.SetPropertyValue<string>("goalowneridtype", value, "GoalOwnerType"); }
}
///<summary>
///<para>Logical Name: isfiscalperiodgoal</para>
///<para>True = Fiscal Period</para>
///<para>False = Custom Period</para>
///</summary>
[AttributeLogicalNameAttribute("isfiscalperiodgoal")]
public bool? GoalPeriodType
{
	get { return this.GetPropertyValue<bool?>("isfiscalperiodgoal"); }
	set { this.SetPropertyValue<bool?>("isfiscalperiodgoal", value, "GoalPeriodType"); }
}
///<summary>
///<para>Logical Name: goalwitherrorid</para>
///</summary>
[AttributeLogicalNameAttribute("goalwitherrorid")]
public EntityReference GoalWithError
{
	get { return this.GetPropertyValue<EntityReference>("goalwitherrorid"); }
	set { this.SetPropertyValue<EntityReference>("goalwitherrorid", value, "GoalWithError"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: inprogressstring</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("inprogressstring")]
public string In_Progress
{
	get { return this.GetPropertyValue<string>("inprogressstring"); }
}
///<summary>
///<para>Logical Name: inprogressdecimal</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("inprogressdecimal")]
public decimal? In_progress_Decimal
{
	get { return this.GetPropertyValue<decimal?>("inprogressdecimal"); }
	set { this.SetPropertyValue("inprogressdecimal", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "In_progress_Decimal"); }
}
///<summary>
///<para>Logical Name: inprogressinteger</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("inprogressinteger")]
public int? In_progress_Integer
{
	get { return this.GetPropertyValue<int?>("inprogressinteger"); }
	set { this.SetPropertyValue("inprogressinteger", (int?)value, (int)-2147483648, (int)2147483647, "In_progress_Integer"); }
}
///<summary>
///<para>Logical Name: inprogressmoney</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? In_progress_Money
{
	get
	{
		if (In_progress_MoneyMoney != null) { return In_progress_MoneyMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.In_progress_MoneyMoney = new Money(value.Value); }
		else this.In_progress_MoneyMoney = null;
	}
}
///<summary>
///<para>Logical Name: inprogressmoney</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("inprogressmoney")]
public Money In_progress_MoneyMoney
{
	get { return this.GetPropertyValue<Money>("inprogressmoney"); }
	set { this.SetPropertyValue("inprogressmoney", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "In_progress_MoneyMoney"); }
}
///<summary>
///<para>Logical Name: inprogressmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? In_progress_Money_Base
{
	get
	{
		if (In_progress_Money_BaseMoney != null) { return In_progress_Money_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: inprogressmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("inprogressmoney_base")]
public Money In_progress_Money_BaseMoney
{
	get { return this.GetPropertyValue<Money>("inprogressmoney_base"); }
}
///<summary>
///<para>Logical Name: lastrolledupdate</para>
///</summary>
[AttributeLogicalNameAttribute("lastrolledupdate")]
public DateTime? LastRolledUpDate
{
	get { return this.GetPropertyValue<DateTime?>("lastrolledupdate"); }
	set { this.SetPropertyValue<DateTime?>("lastrolledupdate", value, "LastRolledUpDate"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Manager
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Manager"); }
}
///<summary>
///<para>Logical Name: isamount</para>
///<para>True = Amount</para>
///<para>False = Count</para>
///</summary>
[AttributeLogicalNameAttribute("isamount")]
public bool? MetricType
{
	get { return this.GetPropertyValue<bool?>("isamount"); }
	set { this.SetPropertyValue<bool?>("isamount", value, "MetricType"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string Name
{
	get { return this.GetPropertyValue<string>("title"); }
	set { this.SetPropertyValue("title", value, 100, "Name"); }
}
///<summary>
///<para>Logical Name: isoverridden</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isoverridden")]
public bool? Overridden
{
	get { return this.GetPropertyValue<bool?>("isoverridden"); }
	set { this.SetPropertyValue<bool?>("isoverridden", value, "Overridden"); }
}
///<summary>
///<para>Logical Name: isoverride</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isoverride")]
public bool? @Override
{
	get { return this.GetPropertyValue<bool?>("isoverride"); }
	set { this.SetPropertyValue<bool?>("isoverride", value, "@Override"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: parentgoalid</para>
///</summary>
[AttributeLogicalNameAttribute("parentgoalid")]
public EntityReference ParentGoal
{
	get { return this.GetPropertyValue<EntityReference>("parentgoalid"); }
	set { this.SetPropertyValue<EntityReference>("parentgoalid", value, "ParentGoal"); }
}
///<summary>
///<para>Logical Name: percentage</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 0</para>
///</summary>
[AttributeLogicalNameAttribute("percentage")]
public decimal? PercentageAchieved
{
	get { return this.GetPropertyValue<decimal?>("percentage"); }
	set { this.SetPropertyValue("percentage", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "PercentageAchieved"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: consideronlygoalownersrecords</para>
///<para>True = Owned by goal owner</para>
///<para>False = All</para>
///</summary>
[AttributeLogicalNameAttribute("consideronlygoalownersrecords")]
public bool? RecordSetForRollup
{
	get { return this.GetPropertyValue<bool?>("consideronlygoalownersrecords"); }
	set { this.SetPropertyValue<bool?>("consideronlygoalownersrecords", value, "RecordSetForRollup"); }
}
///<summary>
///<para>Logical Name: rolluponlyfromchildgoals</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("rolluponlyfromchildgoals")]
public bool? RollUpOnlyFromChildGoals
{
	get { return this.GetPropertyValue<bool?>("rolluponlyfromchildgoals"); }
	set { this.SetPropertyValue<bool?>("rolluponlyfromchildgoals", value, "RollUpOnlyFromChildGoals"); }
}
///<summary>
///<para>Logical Name: rolluperrorcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("rolluperrorcode")]
public int? RollupErrorCode
{
	get { return this.GetPropertyValue<int?>("rolluperrorcode"); }
	set { this.SetPropertyValue("rolluperrorcode", (int?)value, (int)-2147483648, (int)2147483647, "RollupErrorCode"); }
}
///<summary>
///<para>Logical Name: rollupqueryactualdecimalid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryactualdecimalid")]
public EntityReference RollupQuery_Actual_Decimal
{
	get { return this.GetPropertyValue<EntityReference>("rollupqueryactualdecimalid"); }
	set { this.SetPropertyValue<EntityReference>("rollupqueryactualdecimalid", value, "RollupQuery_Actual_Decimal"); }
}
///<summary>
///<para>Logical Name: rollupqueryactualintegerid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryactualintegerid")]
public EntityReference RollupQuery_Actual_Integer
{
	get { return this.GetPropertyValue<EntityReference>("rollupqueryactualintegerid"); }
	set { this.SetPropertyValue<EntityReference>("rollupqueryactualintegerid", value, "RollupQuery_Actual_Integer"); }
}
///<summary>
///<para>Logical Name: rollupqueryactualmoneyid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryactualmoneyid")]
public EntityReference RollupQuery_Actual_Money
{
	get { return this.GetPropertyValue<EntityReference>("rollupqueryactualmoneyid"); }
	set { this.SetPropertyValue<EntityReference>("rollupqueryactualmoneyid", value, "RollupQuery_Actual_Money"); }
}
///<summary>
///<para>Logical Name: rollupquerycustomdecimalid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupquerycustomdecimalid")]
public EntityReference RollupQuery_CustomRollupField_Decimal
{
	get { return this.GetPropertyValue<EntityReference>("rollupquerycustomdecimalid"); }
	set { this.SetPropertyValue<EntityReference>("rollupquerycustomdecimalid", value, "RollupQuery_CustomRollupField_Decimal"); }
}
///<summary>
///<para>Logical Name: rollupquerycustomintegerid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupquerycustomintegerid")]
public EntityReference RollupQuery_CustomRollupField_Integer
{
	get { return this.GetPropertyValue<EntityReference>("rollupquerycustomintegerid"); }
	set { this.SetPropertyValue<EntityReference>("rollupquerycustomintegerid", value, "RollupQuery_CustomRollupField_Integer"); }
}
///<summary>
///<para>Logical Name: rollupquerycustommoneyid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupquerycustommoneyid")]
public EntityReference RollupQuery_CustomRollupField_Money
{
	get { return this.GetPropertyValue<EntityReference>("rollupquerycustommoneyid"); }
	set { this.SetPropertyValue<EntityReference>("rollupquerycustommoneyid", value, "RollupQuery_CustomRollupField_Money"); }
}
///<summary>
///<para>Logical Name: rollupqueryinprogressdecimalid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryinprogressdecimalid")]
public EntityReference RollupQuery_In_progress_Decimal
{
	get { return this.GetPropertyValue<EntityReference>("rollupqueryinprogressdecimalid"); }
	set { this.SetPropertyValue<EntityReference>("rollupqueryinprogressdecimalid", value, "RollupQuery_In_progress_Decimal"); }
}
///<summary>
///<para>Logical Name: rollupqueryinprogressintegerid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryinprogressintegerid")]
public EntityReference RollupQuery_In_progress_Integer
{
	get { return this.GetPropertyValue<EntityReference>("rollupqueryinprogressintegerid"); }
	set { this.SetPropertyValue<EntityReference>("rollupqueryinprogressintegerid", value, "RollupQuery_In_progress_Integer"); }
}
///<summary>
///<para>Logical Name: rollupqueryinprogressmoneyid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupqueryinprogressmoneyid")]
public EntityReference RollupQuery_In_progress_Money
{
	get { return this.GetPropertyValue<EntityReference>("rollupqueryinprogressmoneyid"); }
	set { this.SetPropertyValue<EntityReference>("rollupqueryinprogressmoneyid", value, "RollupQuery_In_progress_Money"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: stretchtargetdecimal</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("stretchtargetdecimal")]
public decimal? StretchTarget_Decimal
{
	get { return this.GetPropertyValue<decimal?>("stretchtargetdecimal"); }
	set { this.SetPropertyValue("stretchtargetdecimal", (decimal?)value, (decimal)0, (decimal)100000000000, "StretchTarget_Decimal"); }
}
///<summary>
///<para>Logical Name: stretchtargetinteger</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("stretchtargetinteger")]
public int? StretchTarget_Integer
{
	get { return this.GetPropertyValue<int?>("stretchtargetinteger"); }
	set { this.SetPropertyValue("stretchtargetinteger", (int?)value, (int)0, (int)2147483647, "StretchTarget_Integer"); }
}
///<summary>
///<para>Logical Name: stretchtargetmoney</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? StretchTarget_Money
{
	get
	{
		if (StretchTarget_MoneyMoney != null) { return StretchTarget_MoneyMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StretchTarget_MoneyMoney = new Money(value.Value); }
		else this.StretchTarget_MoneyMoney = null;
	}
}
///<summary>
///<para>Logical Name: stretchtargetmoney</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("stretchtargetmoney")]
public Money StretchTarget_MoneyMoney
{
	get { return this.GetPropertyValue<Money>("stretchtargetmoney"); }
	set { this.SetPropertyValue("stretchtargetmoney", (Money)value, (decimal)0, (decimal)922337203685477, "StretchTarget_MoneyMoney"); }
}
///<summary>
///<para>Logical Name: stretchtargetmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? StretchTarget_Money_Base
{
	get
	{
		if (StretchTarget_Money_BaseMoney != null) { return StretchTarget_Money_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: stretchtargetmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("stretchtargetmoney_base")]
public Money StretchTarget_Money_BaseMoney
{
	get { return this.GetPropertyValue<Money>("stretchtargetmoney_base"); }
}
///<summary>
///<para>Logical Name: stretchtargetstring</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("stretchtargetstring")]
public string StretchedTarget
{
	get { return this.GetPropertyValue<string>("stretchtargetstring"); }
}
///<summary>
///<para>Logical Name: targetstring</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("targetstring")]
public string Target
{
	get { return this.GetPropertyValue<string>("targetstring"); }
}
///<summary>
///<para>Logical Name: targetdecimal</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("targetdecimal")]
public decimal? Target_Decimal
{
	get { return this.GetPropertyValue<decimal?>("targetdecimal"); }
	set { this.SetPropertyValue("targetdecimal", (decimal?)value, (decimal)0, (decimal)100000000000, "Target_Decimal"); }
}
///<summary>
///<para>Logical Name: targetinteger</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("targetinteger")]
public int? Target_Integer
{
	get { return this.GetPropertyValue<int?>("targetinteger"); }
	set { this.SetPropertyValue("targetinteger", (int?)value, (int)0, (int)2147483647, "Target_Integer"); }
}
///<summary>
///<para>Logical Name: targetmoney</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Target_Money
{
	get
	{
		if (Target_MoneyMoney != null) { return Target_MoneyMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Target_MoneyMoney = new Money(value.Value); }
		else this.Target_MoneyMoney = null;
	}
}
///<summary>
///<para>Logical Name: targetmoney</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("targetmoney")]
public Money Target_MoneyMoney
{
	get { return this.GetPropertyValue<Money>("targetmoney"); }
	set { this.SetPropertyValue("targetmoney", (Money)value, (decimal)0, (decimal)922337203685477, "Target_MoneyMoney"); }
}
///<summary>
///<para>Logical Name: targetmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Target_Money_Base
{
	get
	{
		if (Target_Money_BaseMoney != null) { return Target_Money_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: targetmoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("targetmoney_base")]
public Money Target_Money_BaseMoney
{
	get { return this.GetPropertyValue<Money>("targetmoney_base"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: goalenddate</para>
///</summary>
[AttributeLogicalNameAttribute("goalenddate")]
public DateTime? To
{
	get { return this.GetPropertyValue<DateTime?>("goalenddate"); }
	set { this.SetPropertyValue<DateTime?>("goalenddate", value, "To"); }
}
///<summary>
///<para>Logical Name: computedtargetasoftodaydecimal</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("computedtargetasoftodaydecimal")]
public decimal? TodaysTarget_Decimal
{
	get { return this.GetPropertyValue<decimal?>("computedtargetasoftodaydecimal"); }
}
///<summary>
///<para>Logical Name: computedtargetasoftodayinteger</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("computedtargetasoftodayinteger")]
public int? TodaysTarget_Integer
{
	get { return this.GetPropertyValue<int?>("computedtargetasoftodayinteger"); }
}
///<summary>
///<para>Logical Name: computedtargetasoftodaymoney</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? TodaysTarget_Money
{
	get
	{
		if (TodaysTarget_MoneyMoney != null) { return TodaysTarget_MoneyMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: computedtargetasoftodaymoney</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("computedtargetasoftodaymoney")]
public Money TodaysTarget_MoneyMoney
{
	get { return this.GetPropertyValue<Money>("computedtargetasoftodaymoney"); }
}
///<summary>
///<para>Logical Name: computedtargetasoftodaymoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? TodaysTarget_Money_Base
{
	get
	{
		if (TodaysTarget_Money_BaseMoney != null) { return TodaysTarget_Money_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: computedtargetasoftodaymoney_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("computedtargetasoftodaymoney_base")]
public Money TodaysTarget_Money_BaseMoney
{
	get { return this.GetPropertyValue<Money>("computedtargetasoftodaymoney_base"); }
}
///<summary>
///<para>Logical Name: computedtargetasoftodaypercentageachieved</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 0</para>
///</summary>
[AttributeLogicalNameAttribute("computedtargetasoftodaypercentageachieved")]
public decimal? TodaysTarget_PercentageAchieved
{
	get { return this.GetPropertyValue<decimal?>("computedtargetasoftodaypercentageachieved"); }
}
///<summary>
///<para>Logical Name: treeid</para>
///</summary>
[AttributeLogicalNameAttribute("treeid")]
public Guid TreeID
{
	get { return this.GetPropertyValue<Guid>("treeid"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Goal_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Goal_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Goal_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Goal_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: goal_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: goal_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: goal_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: goal_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Goal_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Goal_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Goal_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Goal_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Goal (Parent Goal)</b></para>
/// <para>Schema Name: goal_parent_goal</para>
/// </summary>
public List<Goal> GetGoals_ParentGoal (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Goal>(Service, this.Id, "goal", "parentgoalid", Columns); }
/// <summary>
/// <para><b>Goal (Parent Goal)</b></para>
/// <para>Schema Name: goal_parent_goal</para>
/// </summary>
public List<Goal> GetGoals_ParentGoal (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Goal>(Service, this.Id, "goal", "parentgoalid", Columns); }
/// <summary>
/// <para><b>Goal (Goal With Error)</b></para>
/// <para>Schema Name: Goal_RollupError_Goal</para>
/// </summary>
public List<Goal> GetGoals_GoalWithError (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Goal>(Service, this.Id, "goal", "goalwitherrorid", Columns); }
/// <summary>
/// <para><b>Goal (Goal With Error)</b></para>
/// <para>Schema Name: Goal_RollupError_Goal</para>
/// </summary>
public List<Goal> GetGoals_GoalWithError (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Goal>(Service, this.Id, "goal", "goalwitherrorid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: goal_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: goal_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Goal_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Goal_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Goal_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Goal_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_goal</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_goal</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eGoalType
{
	///<summary><para>Money</para>
	///<para>Value = 0</para></summary>
	[Description("Money")]
	Money = 0, 
	///<summary><para>Decimal</para>
	///<para>Value = 1</para></summary>
	[Description("Decimal")]
	@Decimal = 1, 
	///<summary><para>Integer</para>
	///<para>Value = 2</para></summary>
	[Description("Integer")]
	Integer = 2
}
public enum eFiscalPeriod
{
	///<summary><para>Quarter 1</para>
	///<para>Value = 1</para></summary>
	[Description("Quarter 1")]
	Quarter1 = 1, 
	///<summary><para>Quarter 2</para>
	///<para>Value = 2</para></summary>
	[Description("Quarter 2")]
	Quarter2 = 2, 
	///<summary><para>Quarter 3</para>
	///<para>Value = 3</para></summary>
	[Description("Quarter 3")]
	Quarter3 = 3, 
	///<summary><para>Quarter 4</para>
	///<para>Value = 4</para></summary>
	[Description("Quarter 4")]
	Quarter4 = 4, 
	///<summary><para>January</para>
	///<para>Value = 101</para></summary>
	[Description("January")]
	January = 101, 
	///<summary><para>February</para>
	///<para>Value = 102</para></summary>
	[Description("February")]
	February = 102, 
	///<summary><para>March</para>
	///<para>Value = 103</para></summary>
	[Description("March")]
	March = 103, 
	///<summary><para>April</para>
	///<para>Value = 104</para></summary>
	[Description("April")]
	April = 104, 
	///<summary><para>May</para>
	///<para>Value = 105</para></summary>
	[Description("May")]
	May = 105, 
	///<summary><para>June</para>
	///<para>Value = 106</para></summary>
	[Description("June")]
	June = 106, 
	///<summary><para>July</para>
	///<para>Value = 107</para></summary>
	[Description("July")]
	July = 107, 
	///<summary><para>August</para>
	///<para>Value = 108</para></summary>
	[Description("August")]
	August = 108, 
	///<summary><para>September</para>
	///<para>Value = 109</para></summary>
	[Description("September")]
	September = 109, 
	///<summary><para>October</para>
	///<para>Value = 110</para></summary>
	[Description("October")]
	October = 110, 
	///<summary><para>November</para>
	///<para>Value = 111</para></summary>
	[Description("November")]
	November = 111, 
	///<summary><para>December</para>
	///<para>Value = 112</para></summary>
	[Description("December")]
	December = 112, 
	///<summary><para>Semester 1</para>
	///<para>Value = 201</para></summary>
	[Description("Semester 1")]
	Semester1 = 201, 
	///<summary><para>Semester 2</para>
	///<para>Value = 202</para></summary>
	[Description("Semester 2")]
	Semester2 = 202, 
	///<summary><para>Annual</para>
	///<para>Value = 301</para></summary>
	[Description("Annual")]
	Annual = 301, 
	///<summary><para>P1</para>
	///<para>Value = 401</para></summary>
	[Description("P1")]
	P1 = 401, 
	///<summary><para>P2</para>
	///<para>Value = 402</para></summary>
	[Description("P2")]
	P2 = 402, 
	///<summary><para>P3</para>
	///<para>Value = 403</para></summary>
	[Description("P3")]
	P3 = 403, 
	///<summary><para>P4</para>
	///<para>Value = 404</para></summary>
	[Description("P4")]
	P4 = 404, 
	///<summary><para>P5</para>
	///<para>Value = 405</para></summary>
	[Description("P5")]
	P5 = 405, 
	///<summary><para>P6</para>
	///<para>Value = 406</para></summary>
	[Description("P6")]
	P6 = 406, 
	///<summary><para>P7</para>
	///<para>Value = 407</para></summary>
	[Description("P7")]
	P7 = 407, 
	///<summary><para>P8</para>
	///<para>Value = 408</para></summary>
	[Description("P8")]
	P8 = 408, 
	///<summary><para>P9</para>
	///<para>Value = 409</para></summary>
	[Description("P9")]
	P9 = 409, 
	///<summary><para>P10</para>
	///<para>Value = 410</para></summary>
	[Description("P10")]
	P10 = 410, 
	///<summary><para>P11</para>
	///<para>Value = 411</para></summary>
	[Description("P11")]
	P11 = 411, 
	///<summary><para>P12</para>
	///<para>Value = 412</para></summary>
	[Description("P12")]
	P12 = 412, 
	///<summary><para>P13</para>
	///<para>Value = 413</para></summary>
	[Description("P13")]
	P13 = 413
}
public enum eFiscalYear
{
	///<summary><para>FY2038</para>
	///<para>Value = 2038</para></summary>
	[Description("FY2038")]
	FY2038 = 2038, 
	///<summary><para>FY2037</para>
	///<para>Value = 2037</para></summary>
	[Description("FY2037")]
	FY2037 = 2037, 
	///<summary><para>FY2036</para>
	///<para>Value = 2036</para></summary>
	[Description("FY2036")]
	FY2036 = 2036, 
	///<summary><para>FY2035</para>
	///<para>Value = 2035</para></summary>
	[Description("FY2035")]
	FY2035 = 2035, 
	///<summary><para>FY2034</para>
	///<para>Value = 2034</para></summary>
	[Description("FY2034")]
	FY2034 = 2034, 
	///<summary><para>FY2033</para>
	///<para>Value = 2033</para></summary>
	[Description("FY2033")]
	FY2033 = 2033, 
	///<summary><para>FY2032</para>
	///<para>Value = 2032</para></summary>
	[Description("FY2032")]
	FY2032 = 2032, 
	///<summary><para>FY2031</para>
	///<para>Value = 2031</para></summary>
	[Description("FY2031")]
	FY2031 = 2031, 
	///<summary><para>FY2030</para>
	///<para>Value = 2030</para></summary>
	[Description("FY2030")]
	FY2030 = 2030, 
	///<summary><para>FY2029</para>
	///<para>Value = 2029</para></summary>
	[Description("FY2029")]
	FY2029 = 2029, 
	///<summary><para>FY2028</para>
	///<para>Value = 2028</para></summary>
	[Description("FY2028")]
	FY2028 = 2028, 
	///<summary><para>FY2027</para>
	///<para>Value = 2027</para></summary>
	[Description("FY2027")]
	FY2027 = 2027, 
	///<summary><para>FY2026</para>
	///<para>Value = 2026</para></summary>
	[Description("FY2026")]
	FY2026 = 2026, 
	///<summary><para>FY2025</para>
	///<para>Value = 2025</para></summary>
	[Description("FY2025")]
	FY2025 = 2025, 
	///<summary><para>FY2024</para>
	///<para>Value = 2024</para></summary>
	[Description("FY2024")]
	FY2024 = 2024, 
	///<summary><para>FY2023</para>
	///<para>Value = 2023</para></summary>
	[Description("FY2023")]
	FY2023 = 2023, 
	///<summary><para>FY2022</para>
	///<para>Value = 2022</para></summary>
	[Description("FY2022")]
	FY2022 = 2022, 
	///<summary><para>FY2021</para>
	///<para>Value = 2021</para></summary>
	[Description("FY2021")]
	FY2021 = 2021, 
	///<summary><para>FY2020</para>
	///<para>Value = 2020</para></summary>
	[Description("FY2020")]
	FY2020 = 2020, 
	///<summary><para>FY2019</para>
	///<para>Value = 2019</para></summary>
	[Description("FY2019")]
	FY2019 = 2019, 
	///<summary><para>FY2018</para>
	///<para>Value = 2018</para></summary>
	[Description("FY2018")]
	FY2018 = 2018, 
	///<summary><para>FY2017</para>
	///<para>Value = 2017</para></summary>
	[Description("FY2017")]
	FY2017 = 2017, 
	///<summary><para>FY2016</para>
	///<para>Value = 2016</para></summary>
	[Description("FY2016")]
	FY2016 = 2016, 
	///<summary><para>FY2015</para>
	///<para>Value = 2015</para></summary>
	[Description("FY2015")]
	FY2015 = 2015, 
	///<summary><para>FY2014</para>
	///<para>Value = 2014</para></summary>
	[Description("FY2014")]
	FY2014 = 2014, 
	///<summary><para>FY2013</para>
	///<para>Value = 2013</para></summary>
	[Description("FY2013")]
	FY2013 = 2013, 
	///<summary><para>FY2012</para>
	///<para>Value = 2012</para></summary>
	[Description("FY2012")]
	FY2012 = 2012, 
	///<summary><para>FY2011</para>
	///<para>Value = 2011</para></summary>
	[Description("FY2011")]
	FY2011 = 2011, 
	///<summary><para>FY2010</para>
	///<para>Value = 2010</para></summary>
	[Description("FY2010")]
	FY2010 = 2010, 
	///<summary><para>FY2009</para>
	///<para>Value = 2009</para></summary>
	[Description("FY2009")]
	FY2009 = 2009, 
	///<summary><para>FY2008</para>
	///<para>Value = 2008</para></summary>
	[Description("FY2008")]
	FY2008 = 2008, 
	///<summary><para>FY2007</para>
	///<para>Value = 2007</para></summary>
	[Description("FY2007")]
	FY2007 = 2007, 
	///<summary><para>FY2006</para>
	///<para>Value = 2006</para></summary>
	[Description("FY2006")]
	FY2006 = 2006, 
	///<summary><para>FY2005</para>
	///<para>Value = 2005</para></summary>
	[Description("FY2005")]
	FY2005 = 2005, 
	///<summary><para>FY2004</para>
	///<para>Value = 2004</para></summary>
	[Description("FY2004")]
	FY2004 = 2004, 
	///<summary><para>FY2003</para>
	///<para>Value = 2003</para></summary>
	[Description("FY2003")]
	FY2003 = 2003, 
	///<summary><para>FY2002</para>
	///<para>Value = 2002</para></summary>
	[Description("FY2002")]
	FY2002 = 2002, 
	///<summary><para>FY2001</para>
	///<para>Value = 2001</para></summary>
	[Description("FY2001")]
	FY2001 = 2001, 
	///<summary><para>FY2000</para>
	///<para>Value = 2000</para></summary>
	[Description("FY2000")]
	FY2000 = 2000, 
	///<summary><para>FY1999</para>
	///<para>Value = 1999</para></summary>
	[Description("FY1999")]
	FY1999 = 1999, 
	///<summary><para>FY1998</para>
	///<para>Value = 1998</para></summary>
	[Description("FY1998")]
	FY1998 = 1998, 
	///<summary><para>FY1997</para>
	///<para>Value = 1997</para></summary>
	[Description("FY1997")]
	FY1997 = 1997, 
	///<summary><para>FY1996</para>
	///<para>Value = 1996</para></summary>
	[Description("FY1996")]
	FY1996 = 1996, 
	///<summary><para>FY1995</para>
	///<para>Value = 1995</para></summary>
	[Description("FY1995")]
	FY1995 = 1995, 
	///<summary><para>FY1994</para>
	///<para>Value = 1994</para></summary>
	[Description("FY1994")]
	FY1994 = 1994, 
	///<summary><para>FY1993</para>
	///<para>Value = 1993</para></summary>
	[Description("FY1993")]
	FY1993 = 1993, 
	///<summary><para>FY1992</para>
	///<para>Value = 1992</para></summary>
	[Description("FY1992")]
	FY1992 = 1992, 
	///<summary><para>FY1991</para>
	///<para>Value = 1991</para></summary>
	[Description("FY1991")]
	FY1991 = 1991, 
	///<summary><para>FY1990</para>
	///<para>Value = 1990</para></summary>
	[Description("FY1990")]
	FY1990 = 1990, 
	///<summary><para>FY1989</para>
	///<para>Value = 1989</para></summary>
	[Description("FY1989")]
	FY1989 = 1989, 
	///<summary><para>FY1988</para>
	///<para>Value = 1988</para></summary>
	[Description("FY1988")]
	FY1988 = 1988, 
	///<summary><para>FY1987</para>
	///<para>Value = 1987</para></summary>
	[Description("FY1987")]
	FY1987 = 1987, 
	///<summary><para>FY1986</para>
	///<para>Value = 1986</para></summary>
	[Description("FY1986")]
	FY1986 = 1986, 
	///<summary><para>FY1985</para>
	///<para>Value = 1985</para></summary>
	[Description("FY1985")]
	FY1985 = 1985, 
	///<summary><para>FY1984</para>
	///<para>Value = 1984</para></summary>
	[Description("FY1984")]
	FY1984 = 1984, 
	///<summary><para>FY1983</para>
	///<para>Value = 1983</para></summary>
	[Description("FY1983")]
	FY1983 = 1983, 
	///<summary><para>FY1982</para>
	///<para>Value = 1982</para></summary>
	[Description("FY1982")]
	FY1982 = 1982, 
	///<summary><para>FY1981</para>
	///<para>Value = 1981</para></summary>
	[Description("FY1981")]
	FY1981 = 1981, 
	///<summary><para>FY1980</para>
	///<para>Value = 1980</para></summary>
	[Description("FY1980")]
	FY1980 = 1980, 
	///<summary><para>FY1979</para>
	///<para>Value = 1979</para></summary>
	[Description("FY1979")]
	FY1979 = 1979, 
	///<summary><para>FY1978</para>
	///<para>Value = 1978</para></summary>
	[Description("FY1978")]
	FY1978 = 1978, 
	///<summary><para>FY1977</para>
	///<para>Value = 1977</para></summary>
	[Description("FY1977")]
	FY1977 = 1977, 
	///<summary><para>FY1976</para>
	///<para>Value = 1976</para></summary>
	[Description("FY1976")]
	FY1976 = 1976, 
	///<summary><para>FY1975</para>
	///<para>Value = 1975</para></summary>
	[Description("FY1975")]
	FY1975 = 1975, 
	///<summary><para>FY1974</para>
	///<para>Value = 1974</para></summary>
	[Description("FY1974")]
	FY1974 = 1974, 
	///<summary><para>FY1973</para>
	///<para>Value = 1973</para></summary>
	[Description("FY1973")]
	FY1973 = 1973, 
	///<summary><para>FY1972</para>
	///<para>Value = 1972</para></summary>
	[Description("FY1972")]
	FY1972 = 1972, 
	///<summary><para>FY1971</para>
	///<para>Value = 1971</para></summary>
	[Description("FY1971")]
	FY1971 = 1971, 
	///<summary><para>FY1970</para>
	///<para>Value = 1970</para></summary>
	[Description("FY1970")]
	FY1970 = 1970
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Open</para>
	///<para>Value = 0</para></summary>
	[Description("Open")]
	Open_Active = 0, 
	///<summary><para>Closed</para>
	///<para>Value = 1</para></summary>
	[Description("Closed")]
	Closed_Inactive = 1, 
	///<summary><para>Discarded</para>
	///<para>Value = 2</para></summary>
	[Description("Discarded")]
	Discarded_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>entityimage_timestamp</para>
	/// <para>entityimage_timestamp</para></summary>
	public const string EntityImage_Timestamp = "entityimage_timestamp";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>rollupqueryinprogressmoneyidname</para>
	/// <para>rollupqueryinprogressmoneyidname</para></summary>
	public const string RollUpQueryInprogressMoneyIdName = "rollupqueryinprogressmoneyidname";
	/// <summary><para>parentgoalidname</para>
	/// <para>parentgoalidname</para></summary>
	public const string ParentGoalIdName = "parentgoalidname";
	/// <summary><para>rollupqueryinprogressdecimalidname</para>
	/// <para>rollupqueryinprogressdecimalidname</para></summary>
	public const string RollUpQueryInprogressDecimalIdName = "rollupqueryinprogressdecimalidname";
	/// <summary><para>rollupqueryactualintegeridname</para>
	/// <para>rollupqueryactualintegeridname</para></summary>
	public const string RollupQueryActualIntegerIdName = "rollupqueryactualintegeridname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>goalwitherroridname</para>
	/// <para>goalwitherroridname</para></summary>
	public const string GoalWithErrorIdName = "goalwitherroridname";
	/// <summary><para>goalowneridname</para>
	/// <para>goalowneridname</para></summary>
	public const string GoalOwnerIdName = "goalowneridname";
	/// <summary><para>goalowneridyominame</para>
	/// <para>goalowneridyominame</para></summary>
	public const string GoalOwnerIdYomiName = "goalowneridyominame";
	/// <summary><para>rollupquerycustomdecimalidname</para>
	/// <para>rollupquerycustomdecimalidname</para></summary>
	public const string RollUpQueryCustomDecimalIdName = "rollupquerycustomdecimalidname";
	/// <summary><para>rollupqueryinprogressintegeridname</para>
	/// <para>rollupqueryinprogressintegeridname</para></summary>
	public const string RollUpQueryInprogressIntegerIdName = "rollupqueryinprogressintegeridname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>rollupqueryactualdecimalidname</para>
	/// <para>rollupqueryactualdecimalidname</para></summary>
	public const string RollUpQueryActualDecimalIdName = "rollupqueryactualdecimalidname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>rollupqueryactualmoneyidname</para>
	/// <para>rollupqueryactualmoneyidname</para></summary>
	public const string RollUpQueryActualMoneyIdName = "rollupqueryactualmoneyidname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>rollupquerycustomintegeridname</para>
	/// <para>rollupquerycustomintegeridname</para></summary>
	public const string RollUpQueryCustomIntegerIdName = "rollupquerycustomintegeridname";
	/// <summary><para>rollupquerycustommoneyidname</para>
	/// <para>rollupquerycustommoneyidname</para></summary>
	public const string RollUpQueryCustomMoneyIdName = "rollupquerycustommoneyidname";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>metricidname</para>
	/// <para>metricidname</para></summary>
	public const string MetricIdName = "metricidname";
	/// <summary><para>entityimage_url</para>
	/// <para>entityimage_url</para></summary>
	public const string EntityImage_URL = "entityimage_url";
	/// <summary><para>Actual</para>
	/// <para>actualstring</para></summary>
	public const string Actual = "actualstring";
	/// <summary><para>Actual (Decimal)</para>
	/// <para>actualdecimal</para></summary>
	public const string Actual_Decimal = "actualdecimal";
	/// <summary><para>Actual (Integer)</para>
	/// <para>actualinteger</para></summary>
	public const string Actual_Integer = "actualinteger";
	/// <summary><para>Actual (Money)</para>
	/// <para>actualmoney</para></summary>
	public const string Actual_Money = "actualmoney";
	/// <summary><para>Actual (Money) (Base)</para>
	/// <para>actualmoney_base</para></summary>
	public const string Actual_Money_Base = "actualmoney_base";
	/// <summary><para>Amount Data Type</para>
	/// <para>amountdatatype</para></summary>
	public const string AmountDataType = "amountdatatype";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Custom Rollup Field</para>
	/// <para>customrollupfieldstring</para></summary>
	public const string CustomRollupField = "customrollupfieldstring";
	/// <summary><para>Custom Rollup Field (Decimal)</para>
	/// <para>customrollupfielddecimal</para></summary>
	public const string CustomRollupField_Decimal = "customrollupfielddecimal";
	/// <summary><para>Custom Rollup Field (Integer)</para>
	/// <para>customrollupfieldinteger</para></summary>
	public const string CustomRollupField_Integer = "customrollupfieldinteger";
	/// <summary><para>Custom Rollup Field (Money)</para>
	/// <para>customrollupfieldmoney</para></summary>
	public const string CustomRollupField_Money = "customrollupfieldmoney";
	/// <summary><para>Custom Rollup Field (Money) (Base)</para>
	/// <para>customrollupfieldmoney_base</para></summary>
	public const string CustomRollupField_Money_Base = "customrollupfieldmoney_base";
	/// <summary><para>Depth</para>
	/// <para>depth</para></summary>
	public const string Depth = "depth";
	/// <summary><para>Entity Image Id</para>
	/// <para>entityimageid</para></summary>
	public const string EntityImageId = "entityimageid";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Fiscal Period</para>
	/// <para>fiscalperiod</para></summary>
	public const string FiscalPeriod = "fiscalperiod";
	/// <summary><para>Fiscal Year</para>
	/// <para>fiscalyear</para></summary>
	public const string FiscalYear = "fiscalyear";
	/// <summary><para>From</para>
	/// <para>goalstartdate</para></summary>
	public const string @From = "goalstartdate";
	/// <summary><para>Goal</para>
	/// <para>goalid</para></summary>
	public const string GoalId = "goalid";
	/// <summary><para>Goal Metric</para>
	/// <para>metricid</para></summary>
	public const string GoalMetric = "metricid";
	/// <summary><para>Goal Owner</para>
	/// <para>goalownerid</para></summary>
	public const string GoalOwner = "goalownerid";
	/// <summary><para>Goal Owner Type</para>
	/// <para>goalowneridtype</para></summary>
	public const string GoalOwnerType = "goalowneridtype";
	/// <summary><para>Goal Period Type</para>
	/// <para>isfiscalperiodgoal</para></summary>
	public const string GoalPeriodType = "isfiscalperiodgoal";
	/// <summary><para>Goal With Error</para>
	/// <para>goalwitherrorid</para></summary>
	public const string GoalWithError = "goalwitherrorid";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>In-Progress</para>
	/// <para>inprogressstring</para></summary>
	public const string In_Progress = "inprogressstring";
	/// <summary><para>In-progress (Decimal)</para>
	/// <para>inprogressdecimal</para></summary>
	public const string In_progress_Decimal = "inprogressdecimal";
	/// <summary><para>In-progress (Integer)</para>
	/// <para>inprogressinteger</para></summary>
	public const string In_progress_Integer = "inprogressinteger";
	/// <summary><para>In-progress (Money)</para>
	/// <para>inprogressmoney</para></summary>
	public const string In_progress_Money = "inprogressmoney";
	/// <summary><para>In-progress (Money) (Base)</para>
	/// <para>inprogressmoney_base</para></summary>
	public const string In_progress_Money_Base = "inprogressmoney_base";
	/// <summary><para>Last Rolled Up Date</para>
	/// <para>lastrolledupdate</para></summary>
	public const string LastRolledUpDate = "lastrolledupdate";
	/// <summary><para>Manager</para>
	/// <para>ownerid</para></summary>
	public const string Manager = "ownerid";
	/// <summary><para>Metric Type</para>
	/// <para>isamount</para></summary>
	public const string MetricType = "isamount";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>title</para></summary>
	public const string Name = "title";
	/// <summary><para>Overridden</para>
	/// <para>isoverridden</para></summary>
	public const string Overridden = "isoverridden";
	/// <summary><para>Override</para>
	/// <para>isoverride</para></summary>
	public const string @Override = "isoverride";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Parent Goal</para>
	/// <para>parentgoalid</para></summary>
	public const string ParentGoal = "parentgoalid";
	/// <summary><para>Percentage Achieved</para>
	/// <para>percentage</para></summary>
	public const string PercentageAchieved = "percentage";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Record Set for Rollup</para>
	/// <para>consideronlygoalownersrecords</para></summary>
	public const string RecordSetForRollup = "consideronlygoalownersrecords";
	/// <summary><para>Roll Up Only from Child Goals</para>
	/// <para>rolluponlyfromchildgoals</para></summary>
	public const string RollUpOnlyFromChildGoals = "rolluponlyfromchildgoals";
	/// <summary><para>Rollup Error Code</para>
	/// <para>rolluperrorcode</para></summary>
	public const string RollupErrorCode = "rolluperrorcode";
	/// <summary><para>Rollup Query - Actual(Decimal)</para>
	/// <para>rollupqueryactualdecimalid</para></summary>
	public const string RollupQuery_Actual_Decimal = "rollupqueryactualdecimalid";
	/// <summary><para>Rollup Query - Actual(Integer)</para>
	/// <para>rollupqueryactualintegerid</para></summary>
	public const string RollupQuery_Actual_Integer = "rollupqueryactualintegerid";
	/// <summary><para>Rollup Query - Actual(Money)</para>
	/// <para>rollupqueryactualmoneyid</para></summary>
	public const string RollupQuery_Actual_Money = "rollupqueryactualmoneyid";
	/// <summary><para>Rollup Query - Custom Rollup Field (Decimal)</para>
	/// <para>rollupquerycustomdecimalid</para></summary>
	public const string RollupQuery_CustomRollupField_Decimal = "rollupquerycustomdecimalid";
	/// <summary><para>Rollup Query - Custom Rollup Field (Integer)</para>
	/// <para>rollupquerycustomintegerid</para></summary>
	public const string RollupQuery_CustomRollupField_Integer = "rollupquerycustomintegerid";
	/// <summary><para>Rollup Query - Custom Rollup Field (Money)</para>
	/// <para>rollupquerycustommoneyid</para></summary>
	public const string RollupQuery_CustomRollupField_Money = "rollupquerycustommoneyid";
	/// <summary><para>Rollup Query - In-progress(Decimal)</para>
	/// <para>rollupqueryinprogressdecimalid</para></summary>
	public const string RollupQuery_In_progress_Decimal = "rollupqueryinprogressdecimalid";
	/// <summary><para>Rollup Query - In-progress(Integer)</para>
	/// <para>rollupqueryinprogressintegerid</para></summary>
	public const string RollupQuery_In_progress_Integer = "rollupqueryinprogressintegerid";
	/// <summary><para>Rollup Query - In-progress(Money)</para>
	/// <para>rollupqueryinprogressmoneyid</para></summary>
	public const string RollupQuery_In_progress_Money = "rollupqueryinprogressmoneyid";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Stretch Target (Decimal)</para>
	/// <para>stretchtargetdecimal</para></summary>
	public const string StretchTarget_Decimal = "stretchtargetdecimal";
	/// <summary><para>Stretch Target (Integer)</para>
	/// <para>stretchtargetinteger</para></summary>
	public const string StretchTarget_Integer = "stretchtargetinteger";
	/// <summary><para>Stretch Target (Money)</para>
	/// <para>stretchtargetmoney</para></summary>
	public const string StretchTarget_Money = "stretchtargetmoney";
	/// <summary><para>Stretch Target (Money) (Base)</para>
	/// <para>stretchtargetmoney_base</para></summary>
	public const string StretchTarget_Money_Base = "stretchtargetmoney_base";
	/// <summary><para>Stretched Target</para>
	/// <para>stretchtargetstring</para></summary>
	public const string StretchedTarget = "stretchtargetstring";
	/// <summary><para>Target</para>
	/// <para>targetstring</para></summary>
	public const string Target = "targetstring";
	/// <summary><para>Target (Decimal)</para>
	/// <para>targetdecimal</para></summary>
	public const string Target_Decimal = "targetdecimal";
	/// <summary><para>Target (Integer)</para>
	/// <para>targetinteger</para></summary>
	public const string Target_Integer = "targetinteger";
	/// <summary><para>Target (Money)</para>
	/// <para>targetmoney</para></summary>
	public const string Target_Money = "targetmoney";
	/// <summary><para>Target (Money) (Base)</para>
	/// <para>targetmoney_base</para></summary>
	public const string Target_Money_Base = "targetmoney_base";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>To</para>
	/// <para>goalenddate</para></summary>
	public const string To = "goalenddate";
	/// <summary><para>Today's Target (Decimal)</para>
	/// <para>computedtargetasoftodaydecimal</para></summary>
	public const string TodaysTarget_Decimal = "computedtargetasoftodaydecimal";
	/// <summary><para>Today's Target (Integer)</para>
	/// <para>computedtargetasoftodayinteger</para></summary>
	public const string TodaysTarget_Integer = "computedtargetasoftodayinteger";
	/// <summary><para>Today's Target (Money)</para>
	/// <para>computedtargetasoftodaymoney</para></summary>
	public const string TodaysTarget_Money = "computedtargetasoftodaymoney";
	/// <summary><para>Today's Target (Money) (Base)</para>
	/// <para>computedtargetasoftodaymoney_base</para></summary>
	public const string TodaysTarget_Money_Base = "computedtargetasoftodaymoney_base";
	/// <summary><para>Today's Target (Percentage Achieved)</para>
	/// <para>computedtargetasoftodaypercentageachieved</para></summary>
	public const string TodaysTarget_PercentageAchieved = "computedtargetasoftodaypercentageachieved";
	/// <summary><para>Tree ID</para>
	/// <para>treeid</para></summary>
	public const string TreeID = "treeid";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
