// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("topicmodelconfiguration")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class TopicModelConfiguration : BaseProxyClass
    {
        public new const string LogicalName = "topicmodelconfiguration";
        public const int ObjectTypeCode = 9942;
        public const string PrimaryIdAttribute = "topicmodelconfigurationid";
        public const string PrimaryNameAttribute = "name";
        
        static TopicModelConfiguration()
        {
            BaseProxyClass.RegisterProxyType(typeof(TopicModelConfiguration), "topicmodelconfiguration");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public TopicModelConfiguration() : base(new Entity("topicmodelconfiguration")) { }
        public TopicModelConfiguration(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<TopicModelConfiguration>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: topicmodelidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelidname")]
public string TopicModelIdName
{
	get { return this.GetPropertyValue<string>("topicmodelidname"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Logical Name: datafilter</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("datafilter")]
public string DataFilter
{
	get { return this.GetPropertyValue<string>("datafilter"); }
	set { this.SetPropertyValue("datafilter", value, 1073741823, "DataFilter"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: fetchxmllist</para>
///<para>Max Length: 500000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("fetchxmllist")]
public string FetchXml
{
	get { return this.GetPropertyValue<string>("fetchxmllist"); }
	set { this.SetPropertyValue("fetchxmllist", value, 500000, "FetchXml"); }
}
///<summary>
///<para>Logical Name: ngramsize</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 3</para>
///</summary>
[AttributeLogicalNameAttribute("ngramsize")]
public int? MaximumKeyPhraseWords
{
	get { return this.GetPropertyValue<int?>("ngramsize"); }
	set { this.SetPropertyValue("ngramsize", (int?)value, (int)1, (int)3, "MaximumKeyPhraseWords"); }
}
///<summary>
///<para>Logical Name: minrelevancescore</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("minrelevancescore")]
public decimal? MinimumRelevanceScore
{
	get { return this.GetPropertyValue<decimal?>("minrelevancescore"); }
	set { this.SetPropertyValue("minrelevancescore", (decimal?)value, (decimal)0, (decimal)1, "MinimumRelevanceScore"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 100, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
///<summary>
///<para>Logical Name: sourceentity</para>
///</summary>
[AttributeLogicalNameAttribute("sourceentity")]
public string SourceEntity
{
	get { return this.GetPropertyValue<string>("sourceentity"); }
	set { this.SetPropertyValue<string>("sourceentity", value, "SourceEntity"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? State
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: stopwords</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("stopwords")]
public string StopWords
{
	get { return this.GetPropertyValue<string>("stopwords"); }
	set { this.SetPropertyValue("stopwords", value, 500, "StopWords"); }
}
///<summary>
///<para>Logical Name: timefilterduration</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timefilterduration")]
public int? TimeFilterDuration
{
	get { return this.GetPropertyValue<int?>("timefilterduration"); }
	set { this.SetPropertyValue("timefilterduration", (int?)value, (int)-2147483648, (int)2147483647, "TimeFilterDuration"); }
}
/// <summary>
///Logical Name: timefilter
/// </summary>
[AttributeLogicalNameAttribute("timefilter")]
public eTimeWindowFilter? TimeWindowFilter
{
	get
	{
		if (TimeWindowFilter_OptionSetValue != null) { return (eTimeWindowFilter)TimeWindowFilter_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.TimeWindowFilter_OptionSetValue = new OptionSetValue((int)value); }
		else this.TimeWindowFilter_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: timefilter</para>
///</summary>
[AttributeLogicalNameAttribute("timefilter")]
public OptionSetValue TimeWindowFilter_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("timefilter"); }
	set { this.SetPropertyValue<OptionSetValue>("timefilter", value, "TimeWindowFilter_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string TimeWindowFilter_Text(IOrganizationService Service)
{
	return this.TimeWindowFilter_OptionSetValue.GetOptionSetText(Service, this, "timefilter");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string TimeWindowFilter_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.TimeWindowFilter_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: topicmodelconfigurationidunique</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelconfigurationidunique")]
public Guid TopicModelConfigurationUniqueId
{
	get { return this.GetPropertyValue<Guid>("topicmodelconfigurationidunique"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: topicmodelconfigurationid</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelconfigurationid")]
public Guid TopicModelConfigurationId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: topicmodelid</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelid")]
public EntityReference TopicModelId
{
	get { return this.GetPropertyValue<EntityReference>("topicmodelid"); }
	set { this.SetPropertyValue<EntityReference>("topicmodelid", value, "TopicModelId"); }
}


        /// <summary>
/// <para><b>TextAnalyticsEntityMapping (Topic Model Configuration Id)</b></para>
/// <para>Schema Name: topicmodelconfiguration_textanalyticsentitymapping</para>
/// </summary>
public List<TextAnalyticsEntityMapping> GetTextAnalyticsEntityMappings_TopicModelConfigurationId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TextAnalyticsEntityMapping>(Service, this.Id, "textanalyticsentitymapping", "topicmodelconfigurationid", Columns); }
/// <summary>
/// <para><b>TextAnalyticsEntityMapping (Topic Model Configuration Id)</b></para>
/// <para>Schema Name: topicmodelconfiguration_textanalyticsentitymapping</para>
/// </summary>
public List<TextAnalyticsEntityMapping> GetTextAnalyticsEntityMappings_TopicModelConfigurationId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TextAnalyticsEntityMapping>(Service, this.Id, "textanalyticsentitymapping", "topicmodelconfigurationid", Columns); }
/// <summary>
/// <para><b>TopicModel (Configuration)</b></para>
/// <para>Schema Name: topicmodelconfiguration_topicmodel</para>
/// </summary>
public List<TopicModel> GetTopicModel_Configuration (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModel>(Service, this.Id, "topicmodel", "configurationused", Columns); }
/// <summary>
/// <para><b>TopicModel (Configuration)</b></para>
/// <para>Schema Name: topicmodelconfiguration_topicmodel</para>
/// </summary>
public List<TopicModel> GetTopicModel_Configuration (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModel>(Service, this.Id, "topicmodel", "configurationused", Columns); }
/// <summary>
/// <para><b>TopicModelExecutionHistory (Topic Model Configuration)</b></para>
/// <para>Schema Name: topicmodelconfiguration_topicmodelexecutionhistory</para>
/// </summary>
public List<TopicModelExecutionHistory> GetTopicModelExecutionHistories_TopicModelConfiguration (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModelExecutionHistory>(Service, this.Id, "topicmodelexecutionhistory", "topicmodelconfigurationid", Columns); }
/// <summary>
/// <para><b>TopicModelExecutionHistory (Topic Model Configuration)</b></para>
/// <para>Schema Name: topicmodelconfiguration_topicmodelexecutionhistory</para>
/// </summary>
public List<TopicModelExecutionHistory> GetTopicModelExecutionHistories_TopicModelConfiguration (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModelExecutionHistory>(Service, this.Id, "topicmodelexecutionhistory", "topicmodelconfigurationid", Columns); }


        

        

        public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eTimeWindowFilter
{
	///<summary><para>Last N Days</para>
	///<para>Value = 1</para></summary>
	[Description("Last N Days")]
	LastNDays = 1, 
	///<summary><para>Last N Weeks</para>
	///<para>Value = 2</para></summary>
	[Description("Last N Weeks")]
	LastNWeeks = 2
}


        public static class Properties
{
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>topicmodelidname</para>
	/// <para>topicmodelidname</para></summary>
	public const string TopicModelIdName = "topicmodelidname";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Created On</para>
	/// <para>overwritetime</para></summary>
	public const string CreatedOn = "overwritetime";
	/// <summary><para>Data Filter</para>
	/// <para>datafilter</para></summary>
	public const string DataFilter = "datafilter";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Fetch Xml</para>
	/// <para>fetchxmllist</para></summary>
	public const string FetchXml = "fetchxmllist";
	/// <summary><para>Maximum Key Phrase Words</para>
	/// <para>ngramsize</para></summary>
	public const string MaximumKeyPhraseWords = "ngramsize";
	/// <summary><para>Minimum Relevance Score</para>
	/// <para>minrelevancescore</para></summary>
	public const string MinimumRelevanceScore = "minrelevancescore";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
	/// <summary><para>Source Entity</para>
	/// <para>sourceentity</para></summary>
	public const string SourceEntity = "sourceentity";
	/// <summary><para>State</para>
	/// <para>ismanaged</para></summary>
	public const string State = "ismanaged";
	/// <summary><para>Stop Words</para>
	/// <para>stopwords</para></summary>
	public const string StopWords = "stopwords";
	/// <summary><para>Time Filter Duration</para>
	/// <para>timefilterduration</para></summary>
	public const string TimeFilterDuration = "timefilterduration";
	/// <summary><para>Time Window Filter</para>
	/// <para>timefilter</para></summary>
	public const string TimeWindowFilter = "timefilter";
	/// <summary><para>Topic Model Configuration Unique Id</para>
	/// <para>topicmodelconfigurationidunique</para></summary>
	public const string TopicModelConfigurationUniqueId = "topicmodelconfigurationidunique";
	/// <summary><para>TopicModelConfiguration</para>
	/// <para>topicmodelconfigurationid</para></summary>
	public const string TopicModelConfigurationId = "topicmodelconfigurationid";
	/// <summary><para>TopicModelId</para>
	/// <para>topicmodelid</para></summary>
	public const string TopicModelId = "topicmodelid";
}

    }
}
