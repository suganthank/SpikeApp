// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("dynamicproperty")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Property : BaseProxyClass
    {
        public new const string LogicalName = "dynamicproperty";
        public const int ObjectTypeCode = 1048;
        public const string PrimaryIdAttribute = "dynamicpropertyid";
        public const string PrimaryNameAttribute = "name";
        
        static Property()
        {
            BaseProxyClass.RegisterProxyType(typeof(Property), "dynamicproperty");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Property() : base(new Entity("dynamicproperty")) { }
        public Property(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Property>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
	set { this.SetPropertyValue("regardingobjectidname", value, 100, "RegardingObjectIdName"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: defaultvalueoptionsetname</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("defaultvalueoptionsetname")]
public string DefaultValueOptionSetName
{
	get { return this.GetPropertyValue<string>("defaultvalueoptionsetname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: basedynamicpropertyidname</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("basedynamicpropertyidname")]
public string BaseDynamicPropertyIdName
{
	get { return this.GetPropertyValue<string>("basedynamicpropertyidname"); }
	set { this.SetPropertyValue("basedynamicpropertyidname", value, 200, "BaseDynamicPropertyIdName"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? AttributeCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "AttributeCreatedOn"); }
}
///<summary>
///<para>Logical Name: basedynamicpropertyid</para>
///</summary>
[AttributeLogicalNameAttribute("basedynamicpropertyid")]
public EntityReference BaseProperty
{
	get { return this.GetPropertyValue<EntityReference>("basedynamicpropertyid"); }
	set { this.SetPropertyValue<EntityReference>("basedynamicpropertyid", value, "BaseProperty"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
/// <summary>
///Logical Name: datatype
/// </summary>
[AttributeLogicalNameAttribute("datatype")]
public ePropertyDataType? DataType
{
	get
	{
		if (DataType_OptionSetValue != null) { return (ePropertyDataType)DataType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DataType_OptionSetValue = new OptionSetValue((int)value); }
		else this.DataType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: datatype</para>
///</summary>
[AttributeLogicalNameAttribute("datatype")]
public OptionSetValue DataType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("datatype"); }
	set { this.SetPropertyValue<OptionSetValue>("datatype", value, "DataType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DataType_Text(IOrganizationService Service)
{
	return this.DataType_OptionSetValue.GetOptionSetText(Service, this, "datatype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DataType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DataType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: defaultvaluedecimal</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("defaultvaluedecimal")]
public decimal? DefaultDecimalValue
{
	get { return this.GetPropertyValue<decimal?>("defaultvaluedecimal"); }
	set { this.SetPropertyValue("defaultvaluedecimal", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "DefaultDecimalValue"); }
}
///<summary>
///<para>Logical Name: defaultvaluedouble</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("defaultvaluedouble")]
public double? DefaultDoubleValue
{
	get { return this.GetPropertyValue<double?>("defaultvaluedouble"); }
	set { this.SetPropertyValue("defaultvaluedouble", (double?)value, (double)-100000000000, (double)100000000000, "DefaultDoubleValue"); }
}
///<summary>
///<para>Logical Name: defaultvalueoptionset</para>
///</summary>
[AttributeLogicalNameAttribute("defaultvalueoptionset")]
public EntityReference DefaultOptionSetValue
{
	get { return this.GetPropertyValue<EntityReference>("defaultvalueoptionset"); }
	set { this.SetPropertyValue<EntityReference>("defaultvalueoptionset", value, "DefaultOptionSetValue"); }
}
///<summary>
///<para>Logical Name: defaultvaluestring</para>
///<para>Max Length: 1024 characters</para>
///</summary>
[AttributeLogicalNameAttribute("defaultvaluestring")]
public string DefaultStringValue
{
	get { return this.GetPropertyValue<string>("defaultvaluestring"); }
	set { this.SetPropertyValue("defaultvaluestring", value, 1024, "DefaultStringValue"); }
}
///<summary>
///<para>Logical Name: defaultvalueinteger</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("defaultvalueinteger")]
public int? DefaultWholeNumberValue
{
	get { return this.GetPropertyValue<int?>("defaultvalueinteger"); }
	set { this.SetPropertyValue("defaultvalueinteger", (int?)value, (int)-2147483648, (int)2147483647, "DefaultWholeNumberValue"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: ishidden</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("ishidden")]
public bool? Hidden
{
	get { return this.GetPropertyValue<bool?>("ishidden"); }
	set { this.SetPropertyValue<bool?>("ishidden", value, "Hidden"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: dmtimportstate</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("dmtimportstate")]
public int? InternalUseOnly
{
	get { return this.GetPropertyValue<int?>("dmtimportstate"); }
	set { this.SetPropertyValue("dmtimportstate", (int?)value, (int)-2147483648, (int)2147483647, "InternalUseOnly"); }
}
///<summary>
///<para>Logical Name: maxvaluedecimal</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("maxvaluedecimal")]
public decimal? MaximumDecimalValue
{
	get { return this.GetPropertyValue<decimal?>("maxvaluedecimal"); }
	set { this.SetPropertyValue("maxvaluedecimal", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "MaximumDecimalValue"); }
}
///<summary>
///<para>Logical Name: maxvaluedouble</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("maxvaluedouble")]
public double? MaximumDoubleValue
{
	get { return this.GetPropertyValue<double?>("maxvaluedouble"); }
	set { this.SetPropertyValue("maxvaluedouble", (double?)value, (double)-100000000000, (double)100000000000, "MaximumDoubleValue"); }
}
///<summary>
///<para>Logical Name: maxlengthstring</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1024</para>
///</summary>
[AttributeLogicalNameAttribute("maxlengthstring")]
public int? MaximumStringLength
{
	get { return this.GetPropertyValue<int?>("maxlengthstring"); }
	set { this.SetPropertyValue("maxlengthstring", (int?)value, (int)0, (int)1024, "MaximumStringLength"); }
}
///<summary>
///<para>Logical Name: maxvalueinteger</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("maxvalueinteger")]
public int? MaximumWholeNumberValue
{
	get { return this.GetPropertyValue<int?>("maxvalueinteger"); }
	set { this.SetPropertyValue("maxvalueinteger", (int?)value, (int)-2147483648, (int)2147483647, "MaximumWholeNumberValue"); }
}
///<summary>
///<para>Logical Name: minvaluedecimal</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("minvaluedecimal")]
public decimal? MinimumDecimalValue
{
	get { return this.GetPropertyValue<decimal?>("minvaluedecimal"); }
	set { this.SetPropertyValue("minvaluedecimal", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "MinimumDecimalValue"); }
}
///<summary>
///<para>Logical Name: minvaluedouble</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("minvaluedouble")]
public double? MinimumDoubleValue
{
	get { return this.GetPropertyValue<double?>("minvaluedouble"); }
	set { this.SetPropertyValue("minvaluedouble", (double?)value, (double)-100000000000, (double)100000000000, "MinimumDoubleValue"); }
}
///<summary>
///<para>Logical Name: minvalueinteger</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("minvalueinteger")]
public int? MinimumWholeNumberValue
{
	get { return this.GetPropertyValue<int?>("minvalueinteger"); }
	set { this.SetPropertyValue("minvalueinteger", (int?)value, (int)-2147483648, (int)2147483647, "MinimumWholeNumberValue"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 100, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: overwrittendynamicpropertyid</para>
///</summary>
[AttributeLogicalNameAttribute("overwrittendynamicpropertyid")]
public Guid OverwrittenProperty
{
	get { return this.GetPropertyValue<Guid>("overwrittendynamicpropertyid"); }
	set { this.SetPropertyValue<Guid>("overwrittendynamicpropertyid", value, "OverwrittenProperty"); }
}
///<summary>
///<para>Logical Name: precision</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 5</para>
///</summary>
[AttributeLogicalNameAttribute("precision")]
public int? Precision
{
	get { return this.GetPropertyValue<int?>("precision"); }
	set { this.SetPropertyValue("precision", (int?)value, (int)0, (int)5, "Precision"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: dynamicpropertyid</para>
///</summary>
[AttributeLogicalNameAttribute("dynamicpropertyid")]
public Guid PropertyIDId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: isreadonly</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isreadonly")]
public bool? Read_Only
{
	get { return this.GetPropertyValue<bool?>("isreadonly"); }
	set { this.SetPropertyValue<bool?>("isreadonly", value, "Read_Only"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: isrequired</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isrequired")]
public bool? Required
{
	get { return this.GetPropertyValue<bool?>("isrequired"); }
	set { this.SetPropertyValue<bool?>("isrequired", value, "Required"); }
}
///<summary>
///<para>Logical Name: rootdynamicpropertyid</para>
///</summary>
[AttributeLogicalNameAttribute("rootdynamicpropertyid")]
public Guid RootProperty
{
	get { return this.GetPropertyValue<Guid>("rootdynamicpropertyid"); }
	set { this.SetPropertyValue<Guid>("rootdynamicpropertyid", value, "RootProperty"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusCode? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusCode)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Property (Base Property)</b></para>
/// <para>Schema Name: dynamicproperty_base_dynamicproperty</para>
/// </summary>
public List<Property> GetProperties_BaseProperty (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Property>(Service, this.Id, "dynamicproperty", "basedynamicpropertyid", Columns); }
/// <summary>
/// <para><b>Property (Base Property)</b></para>
/// <para>Schema Name: dynamicproperty_base_dynamicproperty</para>
/// </summary>
public List<Property> GetProperties_BaseProperty (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Property>(Service, this.Id, "dynamicproperty", "basedynamicpropertyid", Columns); }
/// <summary>
/// <para><b>PropertyAssociation (Property ID)</b></para>
/// <para>Schema Name: Dynamicproperty_DynamicPropertyAssociation</para>
/// </summary>
public List<PropertyAssociation> GetPropertyAssociations_PropertyID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyAssociation>(Service, this.Id, "dynamicpropertyassociation", "dynamicpropertyid", Columns); }
/// <summary>
/// <para><b>PropertyAssociation (Property ID)</b></para>
/// <para>Schema Name: Dynamicproperty_DynamicPropertyAssociation</para>
/// </summary>
public List<PropertyAssociation> GetPropertyAssociations_PropertyID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyAssociation>(Service, this.Id, "dynamicpropertyassociation", "dynamicpropertyid", Columns); }
/// <summary>
/// <para><b>PropertyInstance (Property ID)</b></para>
/// <para>Schema Name: DynamicProperty_DynamicPropertyInstance</para>
/// </summary>
public List<PropertyInstance> GetPropertyInstances_PropertyID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyInstance>(Service, this.Id, "dynamicpropertyinstance", "dynamicpropertyid", Columns); }
/// <summary>
/// <para><b>PropertyInstance (Property ID)</b></para>
/// <para>Schema Name: DynamicProperty_DynamicPropertyInstance</para>
/// </summary>
public List<PropertyInstance> GetPropertyInstances_PropertyID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyInstance>(Service, this.Id, "dynamicpropertyinstance", "dynamicpropertyid", Columns); }
/// <summary>
/// <para><b>PropertyOptionSetItem (Property ID)</b></para>
/// <para>Schema Name: DynamicProperty_DynamicPropertyOptionSetItem</para>
/// </summary>
public List<PropertyOptionSetItem> GetPropertyOptionSetItems_PropertyID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyOptionSetItem>(Service, this.Id, "dynamicpropertyoptionsetitem", "dynamicpropertyid", Columns); }
/// <summary>
/// <para><b>PropertyOptionSetItem (Property ID)</b></para>
/// <para>Schema Name: DynamicProperty_DynamicPropertyOptionSetItem</para>
/// </summary>
public List<PropertyOptionSetItem> GetPropertyOptionSetItems_PropertyID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyOptionSetItem>(Service, this.Id, "dynamicpropertyoptionsetitem", "dynamicpropertyid", Columns); }
/// <summary>
/// <para><b>FieldComputation (Factor)</b></para>
/// <para>Schema Name: msdyn_dynamicproperty_msdyn_fieldcomputation_PropertyId</para>
/// </summary>
public List<FieldComputation> GetFieldComputations_Factor (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldComputation>(Service, this.Id, "msdyn_fieldcomputation", "msdyn_propertyid", Columns); }
/// <summary>
/// <para><b>FieldComputation (Factor)</b></para>
/// <para>Schema Name: msdyn_dynamicproperty_msdyn_fieldcomputation_PropertyId</para>
/// </summary>
public List<FieldComputation> GetFieldComputations_Factor (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldComputation>(Service, this.Id, "msdyn_fieldcomputation", "msdyn_propertyid", Columns); }


        

        

        public enum ePropertyDataType
{
	///<summary><para>Option Set</para>
	///<para>Value = 0</para></summary>
	[Description("Option Set")]
	OptionSet = 0, 
	///<summary><para>Decimal</para>
	///<para>Value = 1</para></summary>
	[Description("Decimal")]
	@Decimal = 1, 
	///<summary><para>Floating Point Number</para>
	///<para>Value = 2</para></summary>
	[Description("Floating Point Number")]
	FloatingPointNumber = 2, 
	///<summary><para>Single Line Of Text</para>
	///<para>Value = 3</para></summary>
	[Description("Single Line Of Text")]
	SingleLineOfText = 3, 
	///<summary><para>Whole Number</para>
	///<para>Value = 4</para></summary>
	[Description("Whole Number")]
	WholeNumber = 4
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Draft</para>
	///<para>Value = 1</para></summary>
	[Description("Draft")]
	Draft = 1, 
	///<summary><para>Retired</para>
	///<para>Value = 2</para></summary>
	[Description("Retired")]
	Retired = 2
}
public enum eStatusCode
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Draft</para>
	///<para>Value = 0</para></summary>
	[Description("Draft")]
	Draft_Draft = 0, 
	///<summary><para>Retired</para>
	///<para>Value = 2</para></summary>
	[Description("Retired")]
	Retired_Retired = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusCode Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusCode Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>defaultvalueoptionsetname</para>
	/// <para>defaultvalueoptionsetname</para></summary>
	public const string DefaultValueOptionSetName = "defaultvalueoptionsetname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>basedynamicpropertyidname</para>
	/// <para>basedynamicpropertyidname</para></summary>
	public const string BaseDynamicPropertyIdName = "basedynamicpropertyidname";
	/// <summary><para>Attribute Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string AttributeCreatedOn = "overriddencreatedon";
	/// <summary><para>Base Property</para>
	/// <para>basedynamicpropertyid</para></summary>
	public const string BaseProperty = "basedynamicpropertyid";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Data Type</para>
	/// <para>datatype</para></summary>
	public const string DataType = "datatype";
	/// <summary><para>Default Decimal Value</para>
	/// <para>defaultvaluedecimal</para></summary>
	public const string DefaultDecimalValue = "defaultvaluedecimal";
	/// <summary><para>Default Double Value</para>
	/// <para>defaultvaluedouble</para></summary>
	public const string DefaultDoubleValue = "defaultvaluedouble";
	/// <summary><para>Default OptionSet Value</para>
	/// <para>defaultvalueoptionset</para></summary>
	public const string DefaultOptionSetValue = "defaultvalueoptionset";
	/// <summary><para>Default String Value</para>
	/// <para>defaultvaluestring</para></summary>
	public const string DefaultStringValue = "defaultvaluestring";
	/// <summary><para>Default Whole Number Value</para>
	/// <para>defaultvalueinteger</para></summary>
	public const string DefaultWholeNumberValue = "defaultvalueinteger";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Hidden</para>
	/// <para>ishidden</para></summary>
	public const string Hidden = "ishidden";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Internal Use Only</para>
	/// <para>dmtimportstate</para></summary>
	public const string InternalUseOnly = "dmtimportstate";
	/// <summary><para>Maximum Decimal Value</para>
	/// <para>maxvaluedecimal</para></summary>
	public const string MaximumDecimalValue = "maxvaluedecimal";
	/// <summary><para>Maximum Double Value</para>
	/// <para>maxvaluedouble</para></summary>
	public const string MaximumDoubleValue = "maxvaluedouble";
	/// <summary><para>Maximum String Length</para>
	/// <para>maxlengthstring</para></summary>
	public const string MaximumStringLength = "maxlengthstring";
	/// <summary><para>Maximum Whole Number Value</para>
	/// <para>maxvalueinteger</para></summary>
	public const string MaximumWholeNumberValue = "maxvalueinteger";
	/// <summary><para>Minimum Decimal Value</para>
	/// <para>minvaluedecimal</para></summary>
	public const string MinimumDecimalValue = "minvaluedecimal";
	/// <summary><para>Minimum Double Value</para>
	/// <para>minvaluedouble</para></summary>
	public const string MinimumDoubleValue = "minvaluedouble";
	/// <summary><para>Minimum Whole Number Value</para>
	/// <para>minvalueinteger</para></summary>
	public const string MinimumWholeNumberValue = "minvalueinteger";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Overwritten Property</para>
	/// <para>overwrittendynamicpropertyid</para></summary>
	public const string OverwrittenProperty = "overwrittendynamicpropertyid";
	/// <summary><para>Precision</para>
	/// <para>precision</para></summary>
	public const string Precision = "precision";
	/// <summary><para>Property ID</para>
	/// <para>dynamicpropertyid</para></summary>
	public const string PropertyIDId = "dynamicpropertyid";
	/// <summary><para>Read-Only</para>
	/// <para>isreadonly</para></summary>
	public const string Read_Only = "isreadonly";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Required</para>
	/// <para>isrequired</para></summary>
	public const string Required = "isrequired";
	/// <summary><para>Root Property</para>
	/// <para>rootdynamicpropertyid</para></summary>
	public const string RootProperty = "rootdynamicpropertyid";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
