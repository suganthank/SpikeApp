// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("principalsyncattributemap")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class PrincipalSyncAttributeMap : BaseProxyClass
    {
        public new const string LogicalName = "principalsyncattributemap";
        public const int ObjectTypeCode = 1404;
        public const string PrimaryIdAttribute = "principalsyncattributemapid";
        public const string PrimaryNameAttribute = "";
        
        static PrincipalSyncAttributeMap()
        {
            BaseProxyClass.RegisterProxyType(typeof(PrincipalSyncAttributeMap), "principalsyncattributemap");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public PrincipalSyncAttributeMap() : base(new Entity("principalsyncattributemap")) { }
        public PrincipalSyncAttributeMap(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<PrincipalSyncAttributeMap>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: principalsyncattributemapid</para>
///</summary>
[AttributeLogicalNameAttribute("principalsyncattributemapid")]
public Guid PrincipalSyncAttributeMapId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: principalid</para>
///</summary>
[AttributeLogicalNameAttribute("principalid")]
public Guid PrincipalId
{
	get { return this.GetPropertyValue<Guid>("principalid"); }
	set { this.SetPropertyValue<Guid>("principalid", value, "PrincipalId"); }
}
///<summary>
///<para>Logical Name: allowedsyncdirection</para>
///</summary>
[AttributeLogicalNameAttribute("allowedsyncdirection")]
public int? AllowedSyncDirections
{
	get { return this.GetPropertyValue<int?>("allowedsyncdirection"); }
	set { this.SetPropertyValue<int?>("allowedsyncdirection", value, "AllowedSyncDirections"); }
}
///<summary>
///<para>Logical Name: computedproperties</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("computedproperties")]
public string ComputedPropertiesForOneAttribute
{
	get { return this.GetPropertyValue<string>("computedproperties"); }
	set { this.SetPropertyValue("computedproperties", value, 500, "ComputedPropertiesForOneAttribute"); }
}
///<summary>
///<para>Logical Name: attributecrmname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("attributecrmname")]
public string CRMNameOfTheAttributeForWhichThisMappingIsDefined
{
	get { return this.GetPropertyValue<string>("attributecrmname"); }
	set { this.SetPropertyValue("attributecrmname", value, 100, "CRMNameOfTheAttributeForWhichThisMappingIsDefined"); }
}
///<summary>
///<para>Logical Name: attributeexchangename</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("attributeexchangename")]
public string ExchangeNameOfTheAttributeForWhichThisMappingIsDefined
{
	get { return this.GetPropertyValue<string>("attributeexchangename"); }
	set { this.SetPropertyValue("attributeexchangename", value, 100, "ExchangeNameOfTheAttributeForWhichThisMappingIsDefined"); }
}
///<summary>
///<para>Logical Name: iscomputed</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("iscomputed")]
public bool? IsComputed
{
	get { return this.GetPropertyValue<bool?>("iscomputed"); }
}
///<summary>
///<para>Logical Name: entitytypecode</para>
///</summary>
[AttributeLogicalNameAttribute("entitytypecode")]
public string NameOfTheEntityForWhichThisAttributeMappingIsDefined
{
	get { return this.GetPropertyValue<string>("entitytypecode"); }
	set { this.SetPropertyValue<string>("entitytypecode", value, "NameOfTheEntityForWhichThisAttributeMappingIsDefined"); }
}
///<summary>
///<para>Logical Name: mappingname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("mappingname")]
public string NameOfTheMapping
{
	get { return this.GetPropertyValue<string>("mappingname"); }
	set { this.SetPropertyValue("mappingname", value, 100, "NameOfTheMapping"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: parentprincipalsyncattributemappingid</para>
///</summary>
[AttributeLogicalNameAttribute("parentprincipalsyncattributemappingid")]
public EntityReference ParentSync_AttributeMapping
{
	get { return this.GetPropertyValue<EntityReference>("parentprincipalsyncattributemappingid"); }
	set { this.SetPropertyValue<EntityReference>("parentprincipalsyncattributemappingid", value, "ParentSync_AttributeMapping"); }
}
/// <summary>
///Logical Name: defaultsyncdirection
/// </summary>
[AttributeLogicalNameAttribute("defaultsyncdirection")]
public eSyncDirection? SyncDirection
{
	get
	{
		if (SyncDirection_OptionSetValue != null) { return (eSyncDirection)SyncDirection_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.SyncDirection_OptionSetValue = new OptionSetValue((int)value); }
		else this.SyncDirection_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: defaultsyncdirection</para>
///</summary>
[AttributeLogicalNameAttribute("defaultsyncdirection")]
public OptionSetValue SyncDirection_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("defaultsyncdirection"); }
	set { this.SetPropertyValue<OptionSetValue>("defaultsyncdirection", value, "SyncDirection_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string SyncDirection_Text(IOrganizationService Service)
{
	return this.SyncDirection_OptionSetValue.GetOptionSetText(Service, this, "defaultsyncdirection");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string SyncDirection_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.SyncDirection_OptionSetValue.Value);
}
/// <summary>
///Logical Name: syncdirection
/// </summary>
[AttributeLogicalNameAttribute("syncdirection")]
public eSyncDirection? SyncDirection2
{
	get
	{
		if (SyncDirection2_OptionSetValue != null) { return (eSyncDirection)SyncDirection2_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.SyncDirection2_OptionSetValue = new OptionSetValue((int)value); }
		else this.SyncDirection2_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: syncdirection</para>
///</summary>
[AttributeLogicalNameAttribute("syncdirection")]
public OptionSetValue SyncDirection2_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("syncdirection"); }
	set { this.SetPropertyValue<OptionSetValue>("syncdirection", value, "SyncDirection2_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string SyncDirection2_Text(IOrganizationService Service)
{
	return this.SyncDirection2_OptionSetValue.GetOptionSetText(Service, this, "syncdirection");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string SyncDirection2_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.SyncDirection2_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: attributecrmdisplayname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("attributecrmdisplayname")]
public string TheDisplayNameOfTheAttributeCRMNameAttribute_WhichIsEnabledForDataLocalization
{
	get { return this.GetPropertyValue<string>("attributecrmdisplayname"); }
	set { this.SetPropertyValue("attributecrmdisplayname", value, 100, "TheDisplayNameOfTheAttributeCRMNameAttribute_WhichIsEnabledForDataLocalization"); }
}
///<summary>
///<para>Logical Name: attributeexchangedisplayname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("attributeexchangedisplayname")]
public string TheDisplayNameOfTheAttributeExchangeNameAttribute_WhichIsEnabledForDataLocalization
{
	get { return this.GetPropertyValue<string>("attributeexchangedisplayname"); }
	set { this.SetPropertyValue("attributeexchangedisplayname", value, 100, "TheDisplayNameOfTheAttributeExchangeNameAttribute_WhichIsEnabledForDataLocalization"); }
}


        

        

        

        public enum eSyncDirection
{
	///<summary><para>None</para>
	///<para>Value = 0</para></summary>
	[Description("None")]
	None = 0, 
	///<summary><para>ToExchange</para>
	///<para>Value = 1</para></summary>
	[Description("ToExchange")]
	ToExchange = 1, 
	///<summary><para>ToCRM</para>
	///<para>Value = 2</para></summary>
	[Description("ToCRM")]
	ToCRM = 2, 
	///<summary><para>Bidirectional</para>
	///<para>Value = 3</para></summary>
	[Description("Bidirectional")]
	Bidirectional = 3
}


        public static class Properties
{
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>principalsyncattributemapid</para>
	/// <para>principalsyncattributemapid</para></summary>
	public const string PrincipalSyncAttributeMapId = "principalsyncattributemapid";
	/// <summary><para>principalid</para>
	/// <para>principalid</para></summary>
	public const string PrincipalId = "principalid";
	/// <summary><para>Allowed Sync Directions</para>
	/// <para>allowedsyncdirection</para></summary>
	public const string AllowedSyncDirections = "allowedsyncdirection";
	/// <summary><para>Computed Properties for one attribute</para>
	/// <para>computedproperties</para></summary>
	public const string ComputedPropertiesForOneAttribute = "computedproperties";
	/// <summary><para>CRM Name of the attribute for which this mapping is defined</para>
	/// <para>attributecrmname</para></summary>
	public const string CRMNameOfTheAttributeForWhichThisMappingIsDefined = "attributecrmname";
	/// <summary><para>Exchange Name of the attribute for which this mapping is defined</para>
	/// <para>attributeexchangename</para></summary>
	public const string ExchangeNameOfTheAttributeForWhichThisMappingIsDefined = "attributeexchangename";
	/// <summary><para>Is Computed</para>
	/// <para>iscomputed</para></summary>
	public const string IsComputed = "iscomputed";
	/// <summary><para>Name of the Entity for which this attribute mapping is defined</para>
	/// <para>entitytypecode</para></summary>
	public const string NameOfTheEntityForWhichThisAttributeMappingIsDefined = "entitytypecode";
	/// <summary><para>Name of the mapping</para>
	/// <para>mappingname</para></summary>
	public const string NameOfTheMapping = "mappingname";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Parent Sync-Attribute Mapping</para>
	/// <para>parentprincipalsyncattributemappingid</para></summary>
	public const string ParentSync_AttributeMapping = "parentprincipalsyncattributemappingid";
	/// <summary><para>Sync Direction</para>
	/// <para>defaultsyncdirection</para></summary>
	public const string SyncDirection = "defaultsyncdirection";
	/// <summary><para>Sync Direction</para>
	/// <para>syncdirection</para></summary>
	public const string SyncDirection2 = "syncdirection";
	/// <summary><para>The display name of the AttributeCRMName attribute, which is enabled for data localization.</para>
	/// <para>attributecrmdisplayname</para></summary>
	public const string TheDisplayNameOfTheAttributeCRMNameAttribute_WhichIsEnabledForDataLocalization = "attributecrmdisplayname";
	/// <summary><para>The display name of the AttributeExchangeName attribute, which is enabled for data localization.</para>
	/// <para>attributeexchangedisplayname</para></summary>
	public const string TheDisplayNameOfTheAttributeExchangeNameAttribute_WhichIsEnabledForDataLocalization = "attributeexchangedisplayname";
}

    }
}
