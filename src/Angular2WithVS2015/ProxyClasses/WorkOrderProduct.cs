// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("msdyn_workorderproduct")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class WorkOrderProduct : BaseProxyClass
    {
        public new const string LogicalName = "msdyn_workorderproduct";
        public const int ObjectTypeCode = 10177;
        public const string PrimaryIdAttribute = "msdyn_workorderproductid";
        public const string PrimaryNameAttribute = "msdyn_name";
        
        static WorkOrderProduct()
        {
            BaseProxyClass.RegisterProxyType(typeof(WorkOrderProduct), "msdyn_workorderproduct");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public WorkOrderProduct() : base(new Entity("msdyn_workorderproduct")) { }
        public WorkOrderProduct(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<WorkOrderProduct>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: msdyn_workorderincidentname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_workorderincidentname")]
public string Msdyn_WorkOrderIncidentName
{
	get { return this.GetPropertyValue<string>("msdyn_workorderincidentname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: msdyn_purchaseorderreceiptproductname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_purchaseorderreceiptproductname")]
public string Msdyn_PurchaseOrderReceiptProductName
{
	get { return this.GetPropertyValue<string>("msdyn_purchaseorderreceiptproductname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: msdyn_warehousename</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_warehousename")]
public string Msdyn_WarehouseName
{
	get { return this.GetPropertyValue<string>("msdyn_warehousename"); }
}
///<summary>
///<para>Logical Name: msdyn_pricelistname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_pricelistname")]
public string Msdyn_PriceListName
{
	get { return this.GetPropertyValue<string>("msdyn_pricelistname"); }
}
///<summary>
///<para>Logical Name: msdyn_customerassetname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_customerassetname")]
public string Msdyn_CustomerAssetName
{
	get { return this.GetPropertyValue<string>("msdyn_customerassetname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: msdyn_unitname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unitname")]
public string Msdyn_UnitName
{
	get { return this.GetPropertyValue<string>("msdyn_unitname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_productname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_productname")]
public string Msdyn_ProductName
{
	get { return this.GetPropertyValue<string>("msdyn_productname"); }
}
///<summary>
///<para>Logical Name: msdyn_workordername</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_workordername")]
public string Msdyn_WorkOrderName
{
	get { return this.GetPropertyValue<string>("msdyn_workordername"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: msdyn_bookingname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_bookingname")]
public string Msdyn_BookingName
{
	get { return this.GetPropertyValue<string>("msdyn_bookingname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_agreementbookingproductname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_agreementbookingproductname")]
public string Msdyn_AgreementBookingProductName
{
	get { return this.GetPropertyValue<string>("msdyn_agreementbookingproductname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_additionalcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? AdditionalCost
{
	get
	{
		if (AdditionalCostMoney != null) { return AdditionalCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AdditionalCostMoney = new Money(value.Value); }
		else this.AdditionalCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_additionalcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_additionalcost")]
public Money AdditionalCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_additionalcost"); }
	set { this.SetPropertyValue("msdyn_additionalcost", (Money)value, (decimal)0, (decimal)1000000000, "AdditionalCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_additionalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? AdditionalCost_Base
{
	get
	{
		if (AdditionalCost_BaseMoney != null) { return AdditionalCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_additionalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_additionalcost_base")]
public Money AdditionalCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_additionalcost_base"); }
}
///<summary>
///<para>Logical Name: msdyn_agreementbookingproduct</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_agreementbookingproduct")]
public EntityReference AgreementBookingProduct
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_agreementbookingproduct"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_agreementbookingproduct", value, "AgreementBookingProduct"); }
}
///<summary>
///<para>Logical Name: msdyn_allocated</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_allocated")]
public bool? Allocated
{
	get { return this.GetPropertyValue<bool?>("msdyn_allocated"); }
	set { this.SetPropertyValue<bool?>("msdyn_allocated", value, "Allocated"); }
}
///<summary>
///<para>Logical Name: msdyn_booking</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_booking")]
public EntityReference Booking
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_booking"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_booking", value, "Booking"); }
}
///<summary>
///<para>Logical Name: msdyn_commissioncosts</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CommissionCosts
{
	get
	{
		if (CommissionCostsMoney != null) { return CommissionCostsMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CommissionCostsMoney = new Money(value.Value); }
		else this.CommissionCostsMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_commissioncosts</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_commissioncosts")]
public Money CommissionCostsMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_commissioncosts"); }
	set { this.SetPropertyValue("msdyn_commissioncosts", (Money)value, (decimal)0, (decimal)1000000000, "CommissionCostsMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_commissioncosts_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CommissionCosts_Base
{
	get
	{
		if (CommissionCosts_BaseMoney != null) { return CommissionCosts_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_commissioncosts_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_commissioncosts_base")]
public Money CommissionCosts_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_commissioncosts_base"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: msdyn_customerasset</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_customerasset")]
public EntityReference CustomerAsset
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_customerasset"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_customerasset", value, "CustomerAsset"); }
}
///<summary>
///<para>Logical Name: msdyn_description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_description")]
public string Description
{
	get { return this.GetPropertyValue<string>("msdyn_description"); }
	set { this.SetPropertyValue("msdyn_description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: msdyn_discountpercent</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_discountpercent")]
public double? Discount
{
	get { return this.GetPropertyValue<double?>("msdyn_discountpercent"); }
	set { this.SetPropertyValue("msdyn_discountpercent", (double?)value, (double)0, (double)100, "Discount"); }
}
///<summary>
///<para>Logical Name: msdyn_discountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? DiscountAmount
{
	get
	{
		if (DiscountAmountMoney != null) { return DiscountAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DiscountAmountMoney = new Money(value.Value); }
		else this.DiscountAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_discountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_discountamount")]
public Money DiscountAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_discountamount"); }
	set { this.SetPropertyValue("msdyn_discountamount", (Money)value, (decimal)0, (decimal)1000000000, "DiscountAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_discountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? DiscountAmount_Base
{
	get
	{
		if (DiscountAmount_BaseMoney != null) { return DiscountAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_discountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_discountamount_base")]
public Money DiscountAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_discountamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatediscountpercent</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatediscountpercent")]
public double? EstimateDiscount
{
	get { return this.GetPropertyValue<double?>("msdyn_estimatediscountpercent"); }
	set { this.SetPropertyValue("msdyn_estimatediscountpercent", (double?)value, (double)0, (double)100, "EstimateDiscount"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatediscountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateDiscountAmount
{
	get
	{
		if (EstimateDiscountAmountMoney != null) { return EstimateDiscountAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimateDiscountAmountMoney = new Money(value.Value); }
		else this.EstimateDiscountAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatediscountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatediscountamount")]
public Money EstimateDiscountAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatediscountamount"); }
	set { this.SetPropertyValue("msdyn_estimatediscountamount", (Money)value, (decimal)0, (decimal)1000000000, "EstimateDiscountAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatediscountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateDiscountAmount_Base
{
	get
	{
		if (EstimateDiscountAmount_BaseMoney != null) { return EstimateDiscountAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatediscountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatediscountamount_base")]
public Money EstimateDiscountAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatediscountamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatequantity</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatequantity")]
public double? EstimateQuantity
{
	get { return this.GetPropertyValue<double?>("msdyn_estimatequantity"); }
	set { this.SetPropertyValue("msdyn_estimatequantity", (double?)value, (double)0, (double)1000000000, "EstimateQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatesubtotal</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateSubtotal
{
	get
	{
		if (EstimateSubtotalMoney != null) { return EstimateSubtotalMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimateSubtotalMoney = new Money(value.Value); }
		else this.EstimateSubtotalMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatesubtotal</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatesubtotal")]
public Money EstimateSubtotalMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatesubtotal"); }
	set { this.SetPropertyValue("msdyn_estimatesubtotal", (Money)value, (decimal)0, (decimal)1000000000, "EstimateSubtotalMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatesubtotal_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateSubtotal_Base
{
	get
	{
		if (EstimateSubtotal_BaseMoney != null) { return EstimateSubtotal_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatesubtotal_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatesubtotal_base")]
public Money EstimateSubtotal_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatesubtotal_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateTotalAmount
{
	get
	{
		if (EstimateTotalAmountMoney != null) { return EstimateTotalAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimateTotalAmountMoney = new Money(value.Value); }
		else this.EstimateTotalAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatetotalamount")]
public Money EstimateTotalAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatetotalamount"); }
	set { this.SetPropertyValue("msdyn_estimatetotalamount", (Money)value, (decimal)0, (decimal)1000000000, "EstimateTotalAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateTotalAmount_Base
{
	get
	{
		if (EstimateTotalAmount_BaseMoney != null) { return EstimateTotalAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatetotalamount_base")]
public Money EstimateTotalAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatetotalamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateTotalCost
{
	get
	{
		if (EstimateTotalCostMoney != null) { return EstimateTotalCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimateTotalCostMoney = new Money(value.Value); }
		else this.EstimateTotalCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatetotalcost")]
public Money EstimateTotalCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatetotalcost"); }
	set { this.SetPropertyValue("msdyn_estimatetotalcost", (Money)value, (decimal)0, (decimal)1000000000, "EstimateTotalCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateTotalCost_Base
{
	get
	{
		if (EstimateTotalCost_BaseMoney != null) { return EstimateTotalCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimatetotalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatetotalcost_base")]
public Money EstimateTotalCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimatetotalcost_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estimateunitamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateUnitAmount
{
	get
	{
		if (EstimateUnitAmountMoney != null) { return EstimateUnitAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimateUnitAmountMoney = new Money(value.Value); }
		else this.EstimateUnitAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimateunitamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimateunitamount")]
public Money EstimateUnitAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimateunitamount"); }
	set { this.SetPropertyValue("msdyn_estimateunitamount", (Money)value, (decimal)0, (decimal)1000000000, "EstimateUnitAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estimateunitamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateUnitAmount_Base
{
	get
	{
		if (EstimateUnitAmount_BaseMoney != null) { return EstimateUnitAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimateunitamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimateunitamount_base")]
public Money EstimateUnitAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimateunitamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estimateunitcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateUnitCost
{
	get
	{
		if (EstimateUnitCostMoney != null) { return EstimateUnitCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimateUnitCostMoney = new Money(value.Value); }
		else this.EstimateUnitCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimateunitcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimateunitcost")]
public Money EstimateUnitCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimateunitcost"); }
	set { this.SetPropertyValue("msdyn_estimateunitcost", (Money)value, (decimal)0, (decimal)1000000000, "EstimateUnitCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estimateunitcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimateUnitCost_Base
{
	get
	{
		if (EstimateUnitCost_BaseMoney != null) { return EstimateUnitCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estimateunitcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimateunitcost_base")]
public Money EstimateUnitCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estimateunitcost_base"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_internaldescription</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_internaldescription")]
public string InternalDescription
{
	get { return this.GetPropertyValue<string>("msdyn_internaldescription"); }
	set { this.SetPropertyValue("msdyn_internaldescription", value, 2000, "InternalDescription"); }
}
///<summary>
///<para>Logical Name: msdyn_internalflags</para>
///<para>Max Length: 1048576 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_internalflags")]
public string InternalFlags
{
	get { return this.GetPropertyValue<string>("msdyn_internalflags"); }
	set { this.SetPropertyValue("msdyn_internalflags", value, 1048576, "InternalFlags"); }
}
///<summary>
///<para>Logical Name: msdyn_lineorder</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_lineorder")]
public int? LineOrder
{
	get { return this.GetPropertyValue<int?>("msdyn_lineorder"); }
	set { this.SetPropertyValue("msdyn_lineorder", (int?)value, (int)-2147483648, (int)2147483647, "LineOrder"); }
}
/// <summary>
///Logical Name: msdyn_linestatus
/// </summary>
[AttributeLogicalNameAttribute("msdyn_linestatus")]
public eProduct_ServiceStatus? LineStatus
{
	get
	{
		if (LineStatus_OptionSetValue != null) { return (eProduct_ServiceStatus)LineStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.LineStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.LineStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_linestatus</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_linestatus")]
public OptionSetValue LineStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_linestatus"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_linestatus", value, "LineStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string LineStatus_Text(IOrganizationService Service)
{
	return this.LineStatus_OptionSetValue.GetOptionSetText(Service, this, "msdyn_linestatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string LineStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.LineStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: msdyn_name</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_name")]
public string Name
{
	get { return this.GetPropertyValue<string>("msdyn_name"); }
	set { this.SetPropertyValue("msdyn_name", value, 200, "Name"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: msdyn_pricelist</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_pricelist")]
public EntityReference PriceList
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_pricelist"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_pricelist", value, "PriceList"); }
}
///<summary>
///<para>Logical Name: msdyn_product</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_product")]
public EntityReference Product
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_product"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_product", value, "Product"); }
}
///<summary>
///<para>Logical Name: msdyn_purchaseorderreceiptproduct</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_purchaseorderreceiptproduct")]
public EntityReference PurchaseOrderReceiptProduct
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_purchaseorderreceiptproduct"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_purchaseorderreceiptproduct", value, "PurchaseOrderReceiptProduct"); }
}
///<summary>
///<para>Logical Name: msdyn_quantity</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_quantity")]
public double? Quantity
{
	get { return this.GetPropertyValue<double?>("msdyn_quantity"); }
	set { this.SetPropertyValue("msdyn_quantity", (double?)value, (double)0, (double)1000000000, "Quantity"); }
}
///<summary>
///<para>Logical Name: msdyn_qtytobill</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_qtytobill")]
public double? QuantityToBill
{
	get { return this.GetPropertyValue<double?>("msdyn_qtytobill"); }
	set { this.SetPropertyValue("msdyn_qtytobill", (double?)value, (double)0, (double)1000000000, "QuantityToBill"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_subtotal</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Subtotal
{
	get
	{
		if (SubtotalMoney != null) { return SubtotalMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.SubtotalMoney = new Money(value.Value); }
		else this.SubtotalMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_subtotal</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_subtotal")]
public Money SubtotalMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_subtotal"); }
	set { this.SetPropertyValue("msdyn_subtotal", (Money)value, (decimal)0, (decimal)1000000000, "SubtotalMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_subtotal_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Subtotal_Base
{
	get
	{
		if (Subtotal_BaseMoney != null) { return Subtotal_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_subtotal_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_subtotal_base")]
public Money Subtotal_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_subtotal_base"); }
}
///<summary>
///<para>Logical Name: msdyn_taxable</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_taxable")]
public bool? Taxable
{
	get { return this.GetPropertyValue<bool?>("msdyn_taxable"); }
	set { this.SetPropertyValue<bool?>("msdyn_taxable", value, "Taxable"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_totalamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalAmount
{
	get
	{
		if (TotalAmountMoney != null) { return TotalAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.TotalAmountMoney = new Money(value.Value); }
		else this.TotalAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_totalamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_totalamount")]
public Money TotalAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_totalamount"); }
	set { this.SetPropertyValue("msdyn_totalamount", (Money)value, (decimal)0, (decimal)1000000000, "TotalAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_totalamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalAmount_Base
{
	get
	{
		if (TotalAmount_BaseMoney != null) { return TotalAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_totalamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_totalamount_base")]
public Money TotalAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_totalamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_totalcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalCost
{
	get
	{
		if (TotalCostMoney != null) { return TotalCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.TotalCostMoney = new Money(value.Value); }
		else this.TotalCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_totalcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_totalcost")]
public Money TotalCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_totalcost"); }
	set { this.SetPropertyValue("msdyn_totalcost", (Money)value, (decimal)0, (decimal)1000000000, "TotalCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_totalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalCost_Base
{
	get
	{
		if (TotalCost_BaseMoney != null) { return TotalCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_totalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_totalcost_base")]
public Money TotalCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_totalcost_base"); }
}
///<summary>
///<para>Logical Name: msdyn_unit</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unit")]
public EntityReference Unit
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_unit"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_unit", value, "Unit"); }
}
///<summary>
///<para>Logical Name: msdyn_unitamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? UnitAmount
{
	get
	{
		if (UnitAmountMoney != null) { return UnitAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.UnitAmountMoney = new Money(value.Value); }
		else this.UnitAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_unitamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unitamount")]
public Money UnitAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_unitamount"); }
	set { this.SetPropertyValue("msdyn_unitamount", (Money)value, (decimal)0, (decimal)1000000000, "UnitAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_unitamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? UnitAmount_Base
{
	get
	{
		if (UnitAmount_BaseMoney != null) { return UnitAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_unitamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unitamount_base")]
public Money UnitAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_unitamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_unitcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? UnitCost
{
	get
	{
		if (UnitCostMoney != null) { return UnitCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.UnitCostMoney = new Money(value.Value); }
		else this.UnitCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_unitcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unitcost")]
public Money UnitCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_unitcost"); }
	set { this.SetPropertyValue("msdyn_unitcost", (Money)value, (decimal)0, (decimal)1000000000, "UnitCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_unitcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? UnitCost_Base
{
	get
	{
		if (UnitCost_BaseMoney != null) { return UnitCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_unitcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unitcost_base")]
public Money UnitCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_unitcost_base"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: msdyn_warehouse</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_warehouse")]
public EntityReference Warehouse
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_warehouse"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_warehouse", value, "Warehouse"); }
}
///<summary>
///<para>Logical Name: msdyn_workorder</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_workorder")]
public EntityReference WorkOrder
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_workorder"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_workorder", value, "WorkOrder"); }
}
///<summary>
///<para>Logical Name: msdyn_workorderincident</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_workorderincident")]
public EntityReference WorkOrderIncident
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_workorderincident"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_workorderincident", value, "WorkOrderIncident"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: msdyn_workorderproductid</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_workorderproductid")]
public Guid WorkOrderProductId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}


        /// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Annotations</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Annotations</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>InvoiceLine (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_invoicedetail</para>
/// </summary>
public List<InvoiceLine> GetInvoiceLines_WorkOrderProduct (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<InvoiceLine>(Service, this.Id, "invoicedetail", "msdyn_workorderproductid", Columns); }
/// <summary>
/// <para><b>InvoiceLine (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_invoicedetail</para>
/// </summary>
public List<InvoiceLine> GetInvoiceLines_WorkOrderProduct (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<InvoiceLine>(Service, this.Id, "invoicedetail", "msdyn_workorderproductid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>CustomerAsset (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_customerasset_WorkOrderProduct</para>
/// </summary>
public List<CustomerAsset> GetCustomerAssets_WorkOrderProduct (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CustomerAsset>(Service, this.Id, "msdyn_customerasset", "msdyn_workorderproduct", Columns); }
/// <summary>
/// <para><b>CustomerAsset (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_customerasset_WorkOrderProduct</para>
/// </summary>
public List<CustomerAsset> GetCustomerAssets_WorkOrderProduct (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CustomerAsset>(Service, this.Id, "msdyn_customerasset", "msdyn_workorderproduct", Columns); }
/// <summary>
/// <para><b>InventoryJournal (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_inventoryjournal_WorkOrderProduct</para>
/// </summary>
public List<InventoryJournal> GetInventoryJournals_WorkOrderProduct (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<InventoryJournal>(Service, this.Id, "msdyn_inventoryjournal", "msdyn_workorderproduct", Columns); }
/// <summary>
/// <para><b>InventoryJournal (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_inventoryjournal_WorkOrderProduct</para>
/// </summary>
public List<InventoryJournal> GetInventoryJournals_WorkOrderProduct (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<InventoryJournal>(Service, this.Id, "msdyn_inventoryjournal", "msdyn_workorderproduct", Columns); }
/// <summary>
/// <para><b>RMAProduct (WO Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_rmaproduct_WOProduct</para>
/// </summary>
public List<RMAProduct> GetRMAProducts_WOProduct (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RMAProduct>(Service, this.Id, "msdyn_rmaproduct", "msdyn_woproduct", Columns); }
/// <summary>
/// <para><b>RMAProduct (WO Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_rmaproduct_WOProduct</para>
/// </summary>
public List<RMAProduct> GetRMAProducts_WOProduct (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RMAProduct>(Service, this.Id, "msdyn_rmaproduct", "msdyn_woproduct", Columns); }
/// <summary>
/// <para><b>RTVProduct (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_rtvproduct_WorkOrderProduct</para>
/// </summary>
public List<RTVProduct> GetRTVProducts_WorkOrderProduct (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RTVProduct>(Service, this.Id, "msdyn_rtvproduct", "msdyn_workorderproduct", Columns); }
/// <summary>
/// <para><b>RTVProduct (Work Order Product)</b></para>
/// <para>Schema Name: msdyn_msdyn_workorderproduct_msdyn_rtvproduct_WorkOrderProduct</para>
/// </summary>
public List<RTVProduct> GetRTVProducts_WorkOrderProduct (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RTVProduct>(Service, this.Id, "msdyn_rtvproduct", "msdyn_workorderproduct", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_PhoneCalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_PhoneCalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_ServiceAppointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_ServiceAppointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>DocumentLocation (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_SharePointDocumentLocations</para>
/// </summary>
public List<DocumentLocation> GetDocumentLocations_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DocumentLocation>(Service, this.Id, "sharepointdocumentlocation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>DocumentLocation (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_SharePointDocumentLocations</para>
/// </summary>
public List<DocumentLocation> GetDocumentLocations_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DocumentLocation>(Service, this.Id, "sharepointdocumentlocation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SocialActivity (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_SocialActivities</para>
/// </summary>
public List<SocialActivity> GetSocialActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialActivity>(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SocialActivity (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_SocialActivities</para>
/// </summary>
public List<SocialActivity> GetSocialActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialActivity>(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_workorderproduct_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eProduct_ServiceStatus
{
	///<summary><para>Estimated</para>
	///<para>Value = 690970000</para></summary>
	[Description("Estimated")]
	Estimated = 690970000, 
	///<summary><para>Used</para>
	///<para>Value = 690970001</para></summary>
	[Description("Used")]
	Used = 690970001
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>msdyn_workorderincidentname</para>
	/// <para>msdyn_workorderincidentname</para></summary>
	public const string Msdyn_WorkOrderIncidentName = "msdyn_workorderincidentname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>msdyn_purchaseorderreceiptproductname</para>
	/// <para>msdyn_purchaseorderreceiptproductname</para></summary>
	public const string Msdyn_PurchaseOrderReceiptProductName = "msdyn_purchaseorderreceiptproductname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>msdyn_warehousename</para>
	/// <para>msdyn_warehousename</para></summary>
	public const string Msdyn_WarehouseName = "msdyn_warehousename";
	/// <summary><para>msdyn_pricelistname</para>
	/// <para>msdyn_pricelistname</para></summary>
	public const string Msdyn_PriceListName = "msdyn_pricelistname";
	/// <summary><para>msdyn_customerassetname</para>
	/// <para>msdyn_customerassetname</para></summary>
	public const string Msdyn_CustomerAssetName = "msdyn_customerassetname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>msdyn_unitname</para>
	/// <para>msdyn_unitname</para></summary>
	public const string Msdyn_UnitName = "msdyn_unitname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>msdyn_productname</para>
	/// <para>msdyn_productname</para></summary>
	public const string Msdyn_ProductName = "msdyn_productname";
	/// <summary><para>msdyn_workordername</para>
	/// <para>msdyn_workordername</para></summary>
	public const string Msdyn_WorkOrderName = "msdyn_workordername";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>msdyn_bookingname</para>
	/// <para>msdyn_bookingname</para></summary>
	public const string Msdyn_BookingName = "msdyn_bookingname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>msdyn_agreementbookingproductname</para>
	/// <para>msdyn_agreementbookingproductname</para></summary>
	public const string Msdyn_AgreementBookingProductName = "msdyn_agreementbookingproductname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>Additional Cost</para>
	/// <para>msdyn_additionalcost</para></summary>
	public const string AdditionalCost = "msdyn_additionalcost";
	/// <summary><para>Additional Cost (Base)</para>
	/// <para>msdyn_additionalcost_base</para></summary>
	public const string AdditionalCost_Base = "msdyn_additionalcost_base";
	/// <summary><para>Agreement Booking Product</para>
	/// <para>msdyn_agreementbookingproduct</para></summary>
	public const string AgreementBookingProduct = "msdyn_agreementbookingproduct";
	/// <summary><para>Allocated</para>
	/// <para>msdyn_allocated</para></summary>
	public const string Allocated = "msdyn_allocated";
	/// <summary><para>Booking</para>
	/// <para>msdyn_booking</para></summary>
	public const string Booking = "msdyn_booking";
	/// <summary><para>Commission Costs</para>
	/// <para>msdyn_commissioncosts</para></summary>
	public const string CommissionCosts = "msdyn_commissioncosts";
	/// <summary><para>Commission Costs (Base)</para>
	/// <para>msdyn_commissioncosts_base</para></summary>
	public const string CommissionCosts_Base = "msdyn_commissioncosts_base";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Customer Asset</para>
	/// <para>msdyn_customerasset</para></summary>
	public const string CustomerAsset = "msdyn_customerasset";
	/// <summary><para>Description</para>
	/// <para>msdyn_description</para></summary>
	public const string Description = "msdyn_description";
	/// <summary><para>Discount %</para>
	/// <para>msdyn_discountpercent</para></summary>
	public const string Discount = "msdyn_discountpercent";
	/// <summary><para>Discount Amount</para>
	/// <para>msdyn_discountamount</para></summary>
	public const string DiscountAmount = "msdyn_discountamount";
	/// <summary><para>Discount Amount (Base)</para>
	/// <para>msdyn_discountamount_base</para></summary>
	public const string DiscountAmount_Base = "msdyn_discountamount_base";
	/// <summary><para>Estimate Discount %</para>
	/// <para>msdyn_estimatediscountpercent</para></summary>
	public const string EstimateDiscount = "msdyn_estimatediscountpercent";
	/// <summary><para>Estimate Discount Amount</para>
	/// <para>msdyn_estimatediscountamount</para></summary>
	public const string EstimateDiscountAmount = "msdyn_estimatediscountamount";
	/// <summary><para>Estimate Discount Amount (Base)</para>
	/// <para>msdyn_estimatediscountamount_base</para></summary>
	public const string EstimateDiscountAmount_Base = "msdyn_estimatediscountamount_base";
	/// <summary><para>Estimate Quantity</para>
	/// <para>msdyn_estimatequantity</para></summary>
	public const string EstimateQuantity = "msdyn_estimatequantity";
	/// <summary><para>Estimate Subtotal</para>
	/// <para>msdyn_estimatesubtotal</para></summary>
	public const string EstimateSubtotal = "msdyn_estimatesubtotal";
	/// <summary><para>Estimate Subtotal (Base)</para>
	/// <para>msdyn_estimatesubtotal_base</para></summary>
	public const string EstimateSubtotal_Base = "msdyn_estimatesubtotal_base";
	/// <summary><para>Estimate Total Amount</para>
	/// <para>msdyn_estimatetotalamount</para></summary>
	public const string EstimateTotalAmount = "msdyn_estimatetotalamount";
	/// <summary><para>Estimate Total Amount (Base)</para>
	/// <para>msdyn_estimatetotalamount_base</para></summary>
	public const string EstimateTotalAmount_Base = "msdyn_estimatetotalamount_base";
	/// <summary><para>Estimate Total Cost</para>
	/// <para>msdyn_estimatetotalcost</para></summary>
	public const string EstimateTotalCost = "msdyn_estimatetotalcost";
	/// <summary><para>Estimate Total Cost (Base)</para>
	/// <para>msdyn_estimatetotalcost_base</para></summary>
	public const string EstimateTotalCost_Base = "msdyn_estimatetotalcost_base";
	/// <summary><para>Estimate Unit Amount</para>
	/// <para>msdyn_estimateunitamount</para></summary>
	public const string EstimateUnitAmount = "msdyn_estimateunitamount";
	/// <summary><para>Estimate Unit Amount (Base)</para>
	/// <para>msdyn_estimateunitamount_base</para></summary>
	public const string EstimateUnitAmount_Base = "msdyn_estimateunitamount_base";
	/// <summary><para>Estimate Unit Cost</para>
	/// <para>msdyn_estimateunitcost</para></summary>
	public const string EstimateUnitCost = "msdyn_estimateunitcost";
	/// <summary><para>Estimate Unit Cost (Base)</para>
	/// <para>msdyn_estimateunitcost_base</para></summary>
	public const string EstimateUnitCost_Base = "msdyn_estimateunitcost_base";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Internal Description</para>
	/// <para>msdyn_internaldescription</para></summary>
	public const string InternalDescription = "msdyn_internaldescription";
	/// <summary><para>Internal Flags</para>
	/// <para>msdyn_internalflags</para></summary>
	public const string InternalFlags = "msdyn_internalflags";
	/// <summary><para>Line Order</para>
	/// <para>msdyn_lineorder</para></summary>
	public const string LineOrder = "msdyn_lineorder";
	/// <summary><para>Line Status</para>
	/// <para>msdyn_linestatus</para></summary>
	public const string LineStatus = "msdyn_linestatus";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>msdyn_name</para></summary>
	public const string Name = "msdyn_name";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Price List</para>
	/// <para>msdyn_pricelist</para></summary>
	public const string PriceList = "msdyn_pricelist";
	/// <summary><para>Product</para>
	/// <para>msdyn_product</para></summary>
	public const string Product = "msdyn_product";
	/// <summary><para>Purchase Order Receipt Product</para>
	/// <para>msdyn_purchaseorderreceiptproduct</para></summary>
	public const string PurchaseOrderReceiptProduct = "msdyn_purchaseorderreceiptproduct";
	/// <summary><para>Quantity</para>
	/// <para>msdyn_quantity</para></summary>
	public const string Quantity = "msdyn_quantity";
	/// <summary><para>Quantity To Bill</para>
	/// <para>msdyn_qtytobill</para></summary>
	public const string QuantityToBill = "msdyn_qtytobill";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Subtotal</para>
	/// <para>msdyn_subtotal</para></summary>
	public const string Subtotal = "msdyn_subtotal";
	/// <summary><para>Subtotal (Base)</para>
	/// <para>msdyn_subtotal_base</para></summary>
	public const string Subtotal_Base = "msdyn_subtotal_base";
	/// <summary><para>Taxable</para>
	/// <para>msdyn_taxable</para></summary>
	public const string Taxable = "msdyn_taxable";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Total Amount</para>
	/// <para>msdyn_totalamount</para></summary>
	public const string TotalAmount = "msdyn_totalamount";
	/// <summary><para>Total Amount (Base)</para>
	/// <para>msdyn_totalamount_base</para></summary>
	public const string TotalAmount_Base = "msdyn_totalamount_base";
	/// <summary><para>Total Cost</para>
	/// <para>msdyn_totalcost</para></summary>
	public const string TotalCost = "msdyn_totalcost";
	/// <summary><para>Total Cost (Base)</para>
	/// <para>msdyn_totalcost_base</para></summary>
	public const string TotalCost_Base = "msdyn_totalcost_base";
	/// <summary><para>Unit</para>
	/// <para>msdyn_unit</para></summary>
	public const string Unit = "msdyn_unit";
	/// <summary><para>Unit Amount</para>
	/// <para>msdyn_unitamount</para></summary>
	public const string UnitAmount = "msdyn_unitamount";
	/// <summary><para>Unit Amount (Base)</para>
	/// <para>msdyn_unitamount_base</para></summary>
	public const string UnitAmount_Base = "msdyn_unitamount_base";
	/// <summary><para>Unit Cost</para>
	/// <para>msdyn_unitcost</para></summary>
	public const string UnitCost = "msdyn_unitcost";
	/// <summary><para>Unit Cost (Base)</para>
	/// <para>msdyn_unitcost_base</para></summary>
	public const string UnitCost_Base = "msdyn_unitcost_base";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Warehouse</para>
	/// <para>msdyn_warehouse</para></summary>
	public const string Warehouse = "msdyn_warehouse";
	/// <summary><para>Work Order</para>
	/// <para>msdyn_workorder</para></summary>
	public const string WorkOrder = "msdyn_workorder";
	/// <summary><para>Work Order Incident</para>
	/// <para>msdyn_workorderincident</para></summary>
	public const string WorkOrderIncident = "msdyn_workorderincident";
	/// <summary><para>Work Order Product</para>
	/// <para>msdyn_workorderproductid</para></summary>
	public const string WorkOrderProductId = "msdyn_workorderproductid";
}

    }
}
