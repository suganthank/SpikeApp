// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("userfiscalcalendar")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class UserFiscalCalendar : BaseProxyClass
    {
        public new const string LogicalName = "userfiscalcalendar";
        public const int ObjectTypeCode = 1086;
        public const string PrimaryIdAttribute = "userfiscalcalendarid";
        public const string PrimaryNameAttribute = "";
        
        static UserFiscalCalendar()
        {
            BaseProxyClass.RegisterProxyType(typeof(UserFiscalCalendar), "userfiscalcalendar");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public UserFiscalCalendar() : base(new Entity("userfiscalcalendar")) { }
        public UserFiscalCalendar(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<UserFiscalCalendar>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: period5</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period5
{
	get
	{
		if (Period5Money != null) { return Period5Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period5Money = new Money(value.Value); }
		else this.Period5Money = null;
	}
}
///<summary>
///<para>Logical Name: period5</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period5")]
public Money Period5Money
{
	get { return this.GetPropertyValue<Money>("period5"); }
	set { this.SetPropertyValue("period5", (Money)value, (decimal)0, (decimal)100000000000, "Period5Money"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: userfiscalcalendarid</para>
///</summary>
[AttributeLogicalNameAttribute("userfiscalcalendarid")]
public Guid UserFiscalCalendarId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: period12_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period12_Base
{
	get
	{
		if (Period12_BaseMoney != null) { return Period12_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period12_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period12_base")]
public Money Period12_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period12_base"); }
}
///<summary>
///<para>Logical Name: period8</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period8
{
	get
	{
		if (Period8Money != null) { return Period8Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period8Money = new Money(value.Value); }
		else this.Period8Money = null;
	}
}
///<summary>
///<para>Logical Name: period8</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period8")]
public Money Period8Money
{
	get { return this.GetPropertyValue<Money>("period8"); }
	set { this.SetPropertyValue("period8", (Money)value, (decimal)0, (decimal)100000000000, "Period8Money"); }
}
///<summary>
///<para>Logical Name: period5_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period5_Base
{
	get
	{
		if (Period5_BaseMoney != null) { return Period5_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period5_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period5_base")]
public Money Period5_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period5_base"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: period4_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period4_Base
{
	get
	{
		if (Period4_BaseMoney != null) { return Period4_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period4_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period4_base")]
public Money Period4_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period4_base"); }
}
///<summary>
///<para>Logical Name: period12</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period12
{
	get
	{
		if (Period12Money != null) { return Period12Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period12Money = new Money(value.Value); }
		else this.Period12Money = null;
	}
}
///<summary>
///<para>Logical Name: period12</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period12")]
public Money Period12Money
{
	get { return this.GetPropertyValue<Money>("period12"); }
	set { this.SetPropertyValue("period12", (Money)value, (decimal)0, (decimal)100000000000, "Period12Money"); }
}
///<summary>
///<para>Logical Name: period3_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period3_Base
{
	get
	{
		if (Period3_BaseMoney != null) { return Period3_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period3_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period3_base")]
public Money Period3_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period3_base"); }
}
///<summary>
///<para>Logical Name: period11</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period11
{
	get
	{
		if (Period11Money != null) { return Period11Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period11Money = new Money(value.Value); }
		else this.Period11Money = null;
	}
}
///<summary>
///<para>Logical Name: period11</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period11")]
public Money Period11Money
{
	get { return this.GetPropertyValue<Money>("period11"); }
	set { this.SetPropertyValue("period11", (Money)value, (decimal)0, (decimal)100000000000, "Period11Money"); }
}
///<summary>
///<para>Logical Name: fiscalperiodtype</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("fiscalperiodtype")]
public int? FiscalPeriodType
{
	get { return this.GetPropertyValue<int?>("fiscalperiodtype"); }
}
///<summary>
///<para>Logical Name: period2_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period2_Base
{
	get
	{
		if (Period2_BaseMoney != null) { return Period2_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period2_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period2_base")]
public Money Period2_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period2_base"); }
}
///<summary>
///<para>Logical Name: period6_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period6_Base
{
	get
	{
		if (Period6_BaseMoney != null) { return Period6_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period6_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period6_base")]
public Money Period6_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period6_base"); }
}
///<summary>
///<para>Logical Name: period7</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period7
{
	get
	{
		if (Period7Money != null) { return Period7Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period7Money = new Money(value.Value); }
		else this.Period7Money = null;
	}
}
///<summary>
///<para>Logical Name: period7</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period7")]
public Money Period7Money
{
	get { return this.GetPropertyValue<Money>("period7"); }
	set { this.SetPropertyValue("period7", (Money)value, (decimal)0, (decimal)100000000000, "Period7Money"); }
}
///<summary>
///<para>Logical Name: period1_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period1_Base
{
	get
	{
		if (Period1_BaseMoney != null) { return Period1_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period1_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period1_base")]
public Money Period1_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period1_base"); }
}
///<summary>
///<para>Logical Name: period6</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period6
{
	get
	{
		if (Period6Money != null) { return Period6Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period6Money = new Money(value.Value); }
		else this.Period6Money = null;
	}
}
///<summary>
///<para>Logical Name: period6</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period6")]
public Money Period6Money
{
	get { return this.GetPropertyValue<Money>("period6"); }
	set { this.SetPropertyValue("period6", (Money)value, (decimal)0, (decimal)100000000000, "Period6Money"); }
}
///<summary>
///<para>Logical Name: period3</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period3
{
	get
	{
		if (Period3Money != null) { return Period3Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period3Money = new Money(value.Value); }
		else this.Period3Money = null;
	}
}
///<summary>
///<para>Logical Name: period3</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period3")]
public Money Period3Money
{
	get { return this.GetPropertyValue<Money>("period3"); }
	set { this.SetPropertyValue("period3", (Money)value, (decimal)0, (decimal)100000000000, "Period3Money"); }
}
///<summary>
///<para>Logical Name: period1</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period1
{
	get
	{
		if (Period1Money != null) { return Period1Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period1Money = new Money(value.Value); }
		else this.Period1Money = null;
	}
}
///<summary>
///<para>Logical Name: period1</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period1")]
public Money Period1Money
{
	get { return this.GetPropertyValue<Money>("period1"); }
	set { this.SetPropertyValue("period1", (Money)value, (decimal)0, (decimal)100000000000, "Period1Money"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: effectiveon</para>
///</summary>
[AttributeLogicalNameAttribute("effectiveon")]
public DateTime? EffectiveOn
{
	get { return this.GetPropertyValue<DateTime?>("effectiveon"); }
	set { this.SetPropertyValue<DateTime?>("effectiveon", value, "EffectiveOn"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: period8_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period8_Base
{
	get
	{
		if (Period8_BaseMoney != null) { return Period8_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period8_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period8_base")]
public Money Period8_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period8_base"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: period11_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period11_Base
{
	get
	{
		if (Period11_BaseMoney != null) { return Period11_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period11_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period11_base")]
public Money Period11_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period11_base"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: salespersonidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("salespersonidname")]
public string SalesPersonIdName
{
	get { return this.GetPropertyValue<string>("salespersonidname"); }
}
///<summary>
///<para>Logical Name: period10_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period10_Base
{
	get
	{
		if (Period10_BaseMoney != null) { return Period10_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period10_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period10_base")]
public Money Period10_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period10_base"); }
}
///<summary>
///<para>Logical Name: period2</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period2
{
	get
	{
		if (Period2Money != null) { return Period2Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period2Money = new Money(value.Value); }
		else this.Period2Money = null;
	}
}
///<summary>
///<para>Logical Name: period2</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period2")]
public Money Period2Money
{
	get { return this.GetPropertyValue<Money>("period2"); }
	set { this.SetPropertyValue("period2", (Money)value, (decimal)0, (decimal)100000000000, "Period2Money"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: period13</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period13
{
	get
	{
		if (Period13Money != null) { return Period13Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period13Money = new Money(value.Value); }
		else this.Period13Money = null;
	}
}
///<summary>
///<para>Logical Name: period13</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period13")]
public Money Period13Money
{
	get { return this.GetPropertyValue<Money>("period13"); }
	set { this.SetPropertyValue("period13", (Money)value, (decimal)0, (decimal)100000000000, "Period13Money"); }
}
///<summary>
///<para>Logical Name: period9_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period9_Base
{
	get
	{
		if (Period9_BaseMoney != null) { return Period9_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period9_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period9_base")]
public Money Period9_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period9_base"); }
}
///<summary>
///<para>Logical Name: period10</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period10
{
	get
	{
		if (Period10Money != null) { return Period10Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period10Money = new Money(value.Value); }
		else this.Period10Money = null;
	}
}
///<summary>
///<para>Logical Name: period10</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period10")]
public Money Period10Money
{
	get { return this.GetPropertyValue<Money>("period10"); }
	set { this.SetPropertyValue("period10", (Money)value, (decimal)0, (decimal)100000000000, "Period10Money"); }
}
///<summary>
///<para>Logical Name: period13_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period13_Base
{
	get
	{
		if (Period13_BaseMoney != null) { return Period13_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period13_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period13_base")]
public Money Period13_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period13_base"); }
}
///<summary>
///<para>Logical Name: businessunitid</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitid")]
public Guid BusinessUnitId
{
	get { return this.GetPropertyValue<Guid>("businessunitid"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: businessunitidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitidname")]
public string BusinessUnitIdName
{
	get { return this.GetPropertyValue<string>("businessunitidname"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: salespersonidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("salespersonidyominame")]
public string SalesPersonIdYomiName
{
	get { return this.GetPropertyValue<string>("salespersonidyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: period7_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Period7_Base
{
	get
	{
		if (Period7_BaseMoney != null) { return Period7_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: period7_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("period7_base")]
public Money Period7_BaseMoney
{
	get { return this.GetPropertyValue<Money>("period7_base"); }
}
///<summary>
///<para>Logical Name: period9</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period9
{
	get
	{
		if (Period9Money != null) { return Period9Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period9Money = new Money(value.Value); }
		else this.Period9Money = null;
	}
}
///<summary>
///<para>Logical Name: period9</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period9")]
public Money Period9Money
{
	get { return this.GetPropertyValue<Money>("period9"); }
	set { this.SetPropertyValue("period9", (Money)value, (decimal)0, (decimal)100000000000, "Period9Money"); }
}
///<summary>
///<para>Logical Name: salespersonid</para>
///</summary>
[AttributeLogicalNameAttribute("salespersonid")]
public EntityReference SalesPersonId
{
	get { return this.GetPropertyValue<EntityReference>("salespersonid"); }
	set { this.SetPropertyValue<EntityReference>("salespersonid", value, "SalesPersonId"); }
}
///<summary>
///<para>Logical Name: period4</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Period4
{
	get
	{
		if (Period4Money != null) { return Period4Money.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Period4Money = new Money(value.Value); }
		else this.Period4Money = null;
	}
}
///<summary>
///<para>Logical Name: period4</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("period4")]
public Money Period4Money
{
	get { return this.GetPropertyValue<Money>("period4"); }
	set { this.SetPropertyValue("period4", (Money)value, (decimal)0, (decimal)100000000000, "Period4Money"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}


        /// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_userfiscalcalendar</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_userfiscalcalendar</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        

        public static class Properties
{
	/// <summary><para>period5</para>
	/// <para>period5</para></summary>
	public const string Period5 = "period5";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>userfiscalcalendarid</para>
	/// <para>userfiscalcalendarid</para></summary>
	public const string UserFiscalCalendarId = "userfiscalcalendarid";
	/// <summary><para>modifiedon</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>period12_base</para>
	/// <para>period12_base</para></summary>
	public const string Period12_Base = "period12_base";
	/// <summary><para>period8</para>
	/// <para>period8</para></summary>
	public const string Period8 = "period8";
	/// <summary><para>period5_base</para>
	/// <para>period5_base</para></summary>
	public const string Period5_Base = "period5_base";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>period4_base</para>
	/// <para>period4_base</para></summary>
	public const string Period4_Base = "period4_base";
	/// <summary><para>period12</para>
	/// <para>period12</para></summary>
	public const string Period12 = "period12";
	/// <summary><para>period3_base</para>
	/// <para>period3_base</para></summary>
	public const string Period3_Base = "period3_base";
	/// <summary><para>period11</para>
	/// <para>period11</para></summary>
	public const string Period11 = "period11";
	/// <summary><para>fiscalperiodtype</para>
	/// <para>fiscalperiodtype</para></summary>
	public const string FiscalPeriodType = "fiscalperiodtype";
	/// <summary><para>period2_base</para>
	/// <para>period2_base</para></summary>
	public const string Period2_Base = "period2_base";
	/// <summary><para>period6_base</para>
	/// <para>period6_base</para></summary>
	public const string Period6_Base = "period6_base";
	/// <summary><para>period7</para>
	/// <para>period7</para></summary>
	public const string Period7 = "period7";
	/// <summary><para>period1_base</para>
	/// <para>period1_base</para></summary>
	public const string Period1_Base = "period1_base";
	/// <summary><para>period6</para>
	/// <para>period6</para></summary>
	public const string Period6 = "period6";
	/// <summary><para>period3</para>
	/// <para>period3</para></summary>
	public const string Period3 = "period3";
	/// <summary><para>period1</para>
	/// <para>period1</para></summary>
	public const string Period1 = "period1";
	/// <summary><para>timezoneruleversionnumber</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>utcconversiontimezonecode</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>effectiveon</para>
	/// <para>effectiveon</para></summary>
	public const string EffectiveOn = "effectiveon";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>period8_base</para>
	/// <para>period8_base</para></summary>
	public const string Period8_Base = "period8_base";
	/// <summary><para>modifiedby</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>period11_base</para>
	/// <para>period11_base</para></summary>
	public const string Period11_Base = "period11_base";
	/// <summary><para>createdby</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>salespersonidname</para>
	/// <para>salespersonidname</para></summary>
	public const string SalesPersonIdName = "salespersonidname";
	/// <summary><para>period10_base</para>
	/// <para>period10_base</para></summary>
	public const string Period10_Base = "period10_base";
	/// <summary><para>period2</para>
	/// <para>period2</para></summary>
	public const string Period2 = "period2";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>period13</para>
	/// <para>period13</para></summary>
	public const string Period13 = "period13";
	/// <summary><para>period9_base</para>
	/// <para>period9_base</para></summary>
	public const string Period9_Base = "period9_base";
	/// <summary><para>period10</para>
	/// <para>period10</para></summary>
	public const string Period10 = "period10";
	/// <summary><para>period13_base</para>
	/// <para>period13_base</para></summary>
	public const string Period13_Base = "period13_base";
	/// <summary><para>businessunitid</para>
	/// <para>businessunitid</para></summary>
	public const string BusinessUnitId = "businessunitid";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>businessunitidname</para>
	/// <para>businessunitidname</para></summary>
	public const string BusinessUnitIdName = "businessunitidname";
	/// <summary><para>createdon</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>salespersonidyominame</para>
	/// <para>salespersonidyominame</para></summary>
	public const string SalesPersonIdYomiName = "salespersonidyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>period7_base</para>
	/// <para>period7_base</para></summary>
	public const string Period7_Base = "period7_base";
	/// <summary><para>period9</para>
	/// <para>period9</para></summary>
	public const string Period9 = "period9";
	/// <summary><para>salespersonid</para>
	/// <para>salespersonid</para></summary>
	public const string SalesPersonId = "salespersonid";
	/// <summary><para>period4</para>
	/// <para>period4</para></summary>
	public const string Period4 = "period4";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
}

    }
}
