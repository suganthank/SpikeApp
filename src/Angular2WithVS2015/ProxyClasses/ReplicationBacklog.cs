// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("replicationbacklog")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ReplicationBacklog : BaseProxyClass
    {
        public new const string LogicalName = "replicationbacklog";
        public const int ObjectTypeCode = 1140;
        public const string PrimaryIdAttribute = "replicationbacklogid";
        public const string PrimaryNameAttribute = "";
        
        static ReplicationBacklog()
        {
            BaseProxyClass.RegisterProxyType(typeof(ReplicationBacklog), "replicationbacklog");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ReplicationBacklog() : base(new Entity("replicationbacklog")) { }
        public ReplicationBacklog(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ReplicationBacklog>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: replicationbacklogid</para>
///</summary>
[AttributeLogicalNameAttribute("replicationbacklogid")]
public Guid ReplicationBacklogId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: data</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("data")]
public string Data
{
	get { return this.GetPropertyValue<string>("data"); }
}
/// <summary>
///Logical Name: replicationbacklogtype
/// </summary>
[AttributeLogicalNameAttribute("replicationbacklogtype")]
public eReplicationBacklogType? ReplicationBacklogType
{
	get
	{
		if (ReplicationBacklogType_OptionSetValue != null) { return (eReplicationBacklogType)ReplicationBacklogType_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: replicationbacklogtype</para>
///</summary>
[AttributeLogicalNameAttribute("replicationbacklogtype")]
public OptionSetValue ReplicationBacklogType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("replicationbacklogtype"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ReplicationBacklogType_Text(IOrganizationService Service)
{
	return this.ReplicationBacklogType_OptionSetValue.GetOptionSetText(Service, this, "replicationbacklogtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ReplicationBacklogType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ReplicationBacklogType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: targetdatacenterid</para>
///</summary>
[AttributeLogicalNameAttribute("targetdatacenterid")]
public Guid TargetDataCenterId
{
	get { return this.GetPropertyValue<Guid>("targetdatacenterid"); }
}
///<summary>
///<para>Logical Name: targetobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("targetobjectid")]
public EntityReference TargetObjectId
{
	get { return this.GetPropertyValue<EntityReference>("targetobjectid"); }
}
///<summary>
///<para>Logical Name: targetobjectidname</para>
///<para>Max Length: 425 characters</para>
///</summary>
[AttributeLogicalNameAttribute("targetobjectidname")]
public string TargetObjectName
{
	get { return this.GetPropertyValue<string>("targetobjectidname"); }
}
///<summary>
///<para>Logical Name: targetobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("targetobjecttypecode")]
public string TargetObjectTypeCode
{
	get { return this.GetPropertyValue<string>("targetobjecttypecode"); }
}


        

        

        

        public enum eReplicationBacklogType
{
	///<summary><para>Create</para>
	///<para>Value = 0</para></summary>
	[Description("Create")]
	Create = 0, 
	///<summary><para>Update</para>
	///<para>Value = 1</para></summary>
	[Description("Update")]
	Update = 1, 
	///<summary><para>Delete</para>
	///<para>Value = 2</para></summary>
	[Description("Delete")]
	Delete = 2
}


        public static class Properties
{
	/// <summary><para>replicationbacklogid</para>
	/// <para>replicationbacklogid</para></summary>
	public const string ReplicationBacklogId = "replicationbacklogid";
	/// <summary><para>Data</para>
	/// <para>data</para></summary>
	public const string Data = "data";
	/// <summary><para>Replication Backlog Type</para>
	/// <para>replicationbacklogtype</para></summary>
	public const string ReplicationBacklogType = "replicationbacklogtype";
	/// <summary><para>Target Data Center Id</para>
	/// <para>targetdatacenterid</para></summary>
	public const string TargetDataCenterId = "targetdatacenterid";
	/// <summary><para>Target Object Id</para>
	/// <para>targetobjectid</para></summary>
	public const string TargetObjectId = "targetobjectid";
	/// <summary><para>Target Object Name</para>
	/// <para>targetobjectidname</para></summary>
	public const string TargetObjectName = "targetobjectidname";
	/// <summary><para>Target Object Type Code</para>
	/// <para>targetobjecttypecode</para></summary>
	public const string TargetObjectTypeCode = "targetobjecttypecode";
}

    }
}
