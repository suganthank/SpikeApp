// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("contractdetail")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ContractLine : BaseProxyClass
    {
        public new const string LogicalName = "contractdetail";
        public const int ObjectTypeCode = 1011;
        public const string PrimaryIdAttribute = "contractdetailid";
        public const string PrimaryNameAttribute = "title";
        
        static ContractLine()
        {
            BaseProxyClass.RegisterProxyType(typeof(ContractLine), "contractdetail");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ContractLine() : base(new Entity("contractdetail")) { }
        public ContractLine(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ContractLine>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: customeridyominame</para>
///<para>Max Length: 450 characters</para>
///</summary>
[AttributeLogicalNameAttribute("customeridyominame")]
public string CustomerIdYomiName
{
	get { return this.GetPropertyValue<string>("customeridyominame"); }
}
///<summary>
///<para>Logical Name: uomscheduleidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("uomscheduleidname")]
public string UoMScheduleIdName
{
	get { return this.GetPropertyValue<string>("uomscheduleidname"); }
}
///<summary>
///<para>Logical Name: uomidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("uomidname")]
public string UoMIdName
{
	get { return this.GetPropertyValue<string>("uomidname"); }
}
///<summary>
///<para>Logical Name: contractidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contractidname")]
public string ContractIdName
{
	get { return this.GetPropertyValue<string>("contractidname"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: customeridname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("customeridname")]
public string CustomerIdName
{
	get { return this.GetPropertyValue<string>("customeridname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: productidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productidname")]
public string ProductIdName
{
	get { return this.GetPropertyValue<string>("productidname"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: serviceaddressname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("serviceaddressname")]
public string ServiceAddressName
{
	get { return this.GetPropertyValue<string>("serviceaddressname"); }
}
///<summary>
///<para>Logical Name: accountid</para>
///</summary>
[AttributeLogicalNameAttribute("accountid")]
public EntityReference Account
{
	get { return this.GetPropertyValue<EntityReference>("accountid"); }
}
///<summary>
///<para>Logical Name: allotmentsoverage</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("allotmentsoverage")]
public int? AllotmentsOverage
{
	get { return this.GetPropertyValue<int?>("allotmentsoverage"); }
}
///<summary>
///<para>Logical Name: allotmentsremaining</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("allotmentsremaining")]
public int? AllotmentsRemaining
{
	get { return this.GetPropertyValue<int?>("allotmentsremaining"); }
}
///<summary>
///<para>Logical Name: allotmentsused</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("allotmentsused")]
public int? AllotmentsUsed
{
	get { return this.GetPropertyValue<int?>("allotmentsused"); }
}
///<summary>
///<para>Logical Name: contactid</para>
///</summary>
[AttributeLogicalNameAttribute("contactid")]
public EntityReference Contact
{
	get { return this.GetPropertyValue<EntityReference>("contactid"); }
}
///<summary>
///<para>Logical Name: contractid</para>
///</summary>
[AttributeLogicalNameAttribute("contractid")]
public EntityReference Contract
{
	get { return this.GetPropertyValue<EntityReference>("contractid"); }
	set { this.SetPropertyValue<EntityReference>("contractid", value, "Contract"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: contractdetailid</para>
///</summary>
[AttributeLogicalNameAttribute("contractdetailid")]
public Guid ContractLineId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
/// <summary>
///Logical Name: contractstatecode
/// </summary>
[AttributeLogicalNameAttribute("contractstatecode")]
public eContractState? ContractState
{
	get
	{
		if (ContractState_OptionSetValue != null) { return (eContractState)ContractState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: contractstatecode</para>
///</summary>
[AttributeLogicalNameAttribute("contractstatecode")]
public OptionSetValue ContractState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("contractstatecode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ContractState_Text(IOrganizationService Service)
{
	return this.ContractState_OptionSetValue.GetOptionSetText(Service, this, "contractstatecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ContractState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ContractState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
}
///<summary>
///<para>Logical Name: customerid</para>
///</summary>
[AttributeLogicalNameAttribute("customerid")]
public EntityReference Customer
{
	get { return this.GetPropertyValue<EntityReference>("customerid"); }
	set { this.SetPropertyValue<EntityReference>("customerid", value, "Customer"); }
}
///<summary>
///<para>Logical Name: customeridtype</para>
///</summary>
[AttributeLogicalNameAttribute("customeridtype")]
public string CustomerType
{
	get { return this.GetPropertyValue<string>("customeridtype"); }
	set { this.SetPropertyValue<string>("customeridtype", value, "CustomerType"); }
}
///<summary>
///<para>Logical Name: discount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Discount
{
	get
	{
		if (DiscountMoney != null) { return DiscountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DiscountMoney = new Money(value.Value); }
		else this.DiscountMoney = null;
	}
}
///<summary>
///<para>Logical Name: discount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("discount")]
public Money DiscountMoney
{
	get { return this.GetPropertyValue<Money>("discount"); }
	set { this.SetPropertyValue("discount", (Money)value, (decimal)0, (decimal)100000000000000, "DiscountMoney"); }
}
///<summary>
///<para>Logical Name: discountpercentage</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("discountpercentage")]
public decimal? Discount2
{
	get { return this.GetPropertyValue<decimal?>("discountpercentage"); }
	set { this.SetPropertyValue("discountpercentage", (decimal?)value, (decimal)0, (decimal)100, "Discount2"); }
}
///<summary>
///<para>Logical Name: discount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Discount_Base
{
	get
	{
		if (Discount_BaseMoney != null) { return Discount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: discount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("discount_base")]
public Money Discount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("discount_base"); }
}
///<summary>
///<para>Logical Name: expireson</para>
///</summary>
[AttributeLogicalNameAttribute("expireson")]
public DateTime? EndDate
{
	get { return this.GetPropertyValue<DateTime?>("expireson"); }
	set { this.SetPropertyValue<DateTime?>("expireson", value, "EndDate"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: lineitemorder</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("lineitemorder")]
public int? LineItemOrder
{
	get { return this.GetPropertyValue<int?>("lineitemorder"); }
	set { this.SetPropertyValue("lineitemorder", (int?)value, (int)0, (int)1000000000, "LineItemOrder"); }
}
///<summary>
///<para>Logical Name: serviceaddress</para>
///</summary>
[AttributeLogicalNameAttribute("serviceaddress")]
public EntityReference Location
{
	get { return this.GetPropertyValue<EntityReference>("serviceaddress"); }
	set { this.SetPropertyValue<EntityReference>("serviceaddress", value, "Location"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: net</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Net
{
	get
	{
		if (NetMoney != null) { return NetMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: net</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("net")]
public Money NetMoney
{
	get { return this.GetPropertyValue<Money>("net"); }
}
///<summary>
///<para>Logical Name: net_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Net_Base
{
	get
	{
		if (Net_BaseMoney != null) { return Net_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: net_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("net_base")]
public Money Net_BaseMoney
{
	get { return this.GetPropertyValue<Money>("net_base"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public Guid OwningBusinessUnit
{
	get { return this.GetPropertyValue<Guid>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public Guid OwningUser
{
	get { return this.GetPropertyValue<Guid>("owninguser"); }
}
///<summary>
///<para>Logical Name: productid</para>
///</summary>
[AttributeLogicalNameAttribute("productid")]
public EntityReference Product
{
	get { return this.GetPropertyValue<EntityReference>("productid"); }
	set { this.SetPropertyValue<EntityReference>("productid", value, "Product"); }
}
///<summary>
///<para>Logical Name: initialquantity</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("initialquantity")]
public int? Quantity
{
	get { return this.GetPropertyValue<int?>("initialquantity"); }
	set { this.SetPropertyValue("initialquantity", (int?)value, (int)0, (int)1000000000, "Quantity"); }
}
///<summary>
///<para>Logical Name: rate</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Rate
{
	get
	{
		if (RateMoney != null) { return RateMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: rate</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("rate")]
public Money RateMoney
{
	get { return this.GetPropertyValue<Money>("rate"); }
}
///<summary>
///<para>Logical Name: rate_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Rate_Base
{
	get
	{
		if (Rate_BaseMoney != null) { return Rate_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: rate_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("rate_base")]
public Money Rate_BaseMoney
{
	get { return this.GetPropertyValue<Money>("rate_base"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: productserialnumber</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productserialnumber")]
public string SerialNumber
{
	get { return this.GetPropertyValue<string>("productserialnumber"); }
	set { this.SetPropertyValue("productserialnumber", value, 100, "SerialNumber"); }
}
/// <summary>
///Logical Name: servicecontractunitscode
/// </summary>
[AttributeLogicalNameAttribute("servicecontractunitscode")]
public eServiceContractUnits? ServiceContractUnits
{
	get
	{
		if (ServiceContractUnits_OptionSetValue != null) { return (eServiceContractUnits)ServiceContractUnits_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ServiceContractUnits_OptionSetValue = new OptionSetValue((int)value); }
		else this.ServiceContractUnits_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: servicecontractunitscode</para>
///</summary>
[AttributeLogicalNameAttribute("servicecontractunitscode")]
public OptionSetValue ServiceContractUnits_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("servicecontractunitscode"); }
	set { this.SetPropertyValue<OptionSetValue>("servicecontractunitscode", value, "ServiceContractUnits_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ServiceContractUnits_Text(IOrganizationService Service)
{
	return this.ServiceContractUnits_OptionSetValue.GetOptionSetText(Service, this, "servicecontractunitscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ServiceContractUnits_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ServiceContractUnits_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: activeon</para>
///</summary>
[AttributeLogicalNameAttribute("activeon")]
public DateTime? StartDate
{
	get { return this.GetPropertyValue<DateTime?>("activeon"); }
	set { this.SetPropertyValue<DateTime?>("activeon", value, "StartDate"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: effectivitycalendar</para>
///<para>Max Length: 168 characters</para>
///</summary>
[AttributeLogicalNameAttribute("effectivitycalendar")]
public string SupportCalendar
{
	get { return this.GetPropertyValue<string>("effectivitycalendar"); }
	set { this.SetPropertyValue("effectivitycalendar", value, 168, "SupportCalendar"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string Title
{
	get { return this.GetPropertyValue<string>("title"); }
	set { this.SetPropertyValue("title", value, 500, "Title"); }
}
///<summary>
///<para>Logical Name: totalallotments</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("totalallotments")]
public int? TotalAllotments
{
	get { return this.GetPropertyValue<int?>("totalallotments"); }
	set { this.SetPropertyValue("totalallotments", (int?)value, (int)0, (int)1000000000, "TotalAllotments"); }
}
///<summary>
///<para>Logical Name: price</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalPrice
{
	get
	{
		if (TotalPriceMoney != null) { return TotalPriceMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.TotalPriceMoney = new Money(value.Value); }
		else this.TotalPriceMoney = null;
	}
}
///<summary>
///<para>Logical Name: price</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("price")]
public Money TotalPriceMoney
{
	get { return this.GetPropertyValue<Money>("price"); }
	set { this.SetPropertyValue("price", (Money)value, (decimal)0, (decimal)1000000000, "TotalPriceMoney"); }
}
///<summary>
///<para>Logical Name: price_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? TotalPrice_Base
{
	get
	{
		if (TotalPrice_BaseMoney != null) { return TotalPrice_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: price_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("price_base")]
public Money TotalPrice_BaseMoney
{
	get { return this.GetPropertyValue<Money>("price_base"); }
}
///<summary>
///<para>Logical Name: uomid</para>
///</summary>
[AttributeLogicalNameAttribute("uomid")]
public EntityReference Unit
{
	get { return this.GetPropertyValue<EntityReference>("uomid"); }
	set { this.SetPropertyValue<EntityReference>("uomid", value, "Unit"); }
}
///<summary>
///<para>Logical Name: uomscheduleid</para>
///</summary>
[AttributeLogicalNameAttribute("uomscheduleid")]
public EntityReference UnitSchedule
{
	get { return this.GetPropertyValue<EntityReference>("uomscheduleid"); }
	set { this.SetPropertyValue<EntityReference>("uomscheduleid", value, "UnitSchedule"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: ContractDetail_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: ContractDetail_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: ContractDetail_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: ContractDetail_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: ContractDetail_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: ContractDetail_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>@Case (Contract Line)</b></para>
/// <para>Schema Name: contract_detail_cases</para>
/// </summary>
public List<@Case> GetCases_ContractLine (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<@Case>(Service, this.Id, "incident", "contractdetailid", Columns); }
/// <summary>
/// <para><b>@Case (Contract Line)</b></para>
/// <para>Schema Name: contract_detail_cases</para>
/// </summary>
public List<@Case> GetCases_ContractLine (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<@Case>(Service, this.Id, "incident", "contractdetailid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: contractdetail_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: contractdetail_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: ContractDetail_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: ContractDetail_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: ContractDetail_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: ContractDetail_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_contractdetail</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_contractdetail</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eContractState
{
	///<summary><para>Draft</para>
	///<para>Value = 0</para></summary>
	[Description("Draft")]
	Draft = 0, 
	///<summary><para>Invoiced</para>
	///<para>Value = 1</para></summary>
	[Description("Invoiced")]
	Invoiced = 1, 
	///<summary><para>Active</para>
	///<para>Value = 2</para></summary>
	[Description("Active")]
	Active = 2, 
	///<summary><para>On Hold</para>
	///<para>Value = 3</para></summary>
	[Description("On Hold")]
	OnHold = 3, 
	///<summary><para>Canceled</para>
	///<para>Value = 4</para></summary>
	[Description("Canceled")]
	Canceled = 4, 
	///<summary><para>Expired</para>
	///<para>Value = 5</para></summary>
	[Description("Expired")]
	Expired = 5
}
public enum eServiceContractUnits
{
	///<summary><para>Default Value</para>
	///<para>Value = 1</para></summary>
	[Description("Default Value")]
	DefaultValue = 1
}
public enum eStatus
{
	///<summary><para>Existing</para>
	///<para>Value = 0</para></summary>
	[Description("Existing")]
	Existing = 0, 
	///<summary><para>Renewed</para>
	///<para>Value = 1</para></summary>
	[Description("Renewed")]
	Renewed = 1, 
	///<summary><para>Canceled</para>
	///<para>Value = 2</para></summary>
	[Description("Canceled")]
	Canceled = 2, 
	///<summary><para>Expired</para>
	///<para>Value = 3</para></summary>
	[Description("Expired")]
	Expired = 3
}
public enum eStatusReason
{
	///<summary><para>New</para>
	///<para>Value = 1</para></summary>
	[Description("New")]
	_New_Existing = 1, 
	///<summary><para>Renewed</para>
	///<para>Value = 2</para></summary>
	[Description("Renewed")]
	Renewed_Renewed = 2, 
	///<summary><para>Canceled</para>
	///<para>Value = 3</para></summary>
	[Description("Canceled")]
	Canceled_Canceled = 3, 
	///<summary><para>Expired</para>
	///<para>Value = 4</para></summary>
	[Description("Expired")]
	Expired_Expired = 4
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>customeridyominame</para>
	/// <para>customeridyominame</para></summary>
	public const string CustomerIdYomiName = "customeridyominame";
	/// <summary><para>uomscheduleidname</para>
	/// <para>uomscheduleidname</para></summary>
	public const string UoMScheduleIdName = "uomscheduleidname";
	/// <summary><para>uomidname</para>
	/// <para>uomidname</para></summary>
	public const string UoMIdName = "uomidname";
	/// <summary><para>contractidname</para>
	/// <para>contractidname</para></summary>
	public const string ContractIdName = "contractidname";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>customeridname</para>
	/// <para>customeridname</para></summary>
	public const string CustomerIdName = "customeridname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>productidname</para>
	/// <para>productidname</para></summary>
	public const string ProductIdName = "productidname";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>serviceaddressname</para>
	/// <para>serviceaddressname</para></summary>
	public const string ServiceAddressName = "serviceaddressname";
	/// <summary><para>Account</para>
	/// <para>accountid</para></summary>
	public const string Account = "accountid";
	/// <summary><para>Allotments Overage</para>
	/// <para>allotmentsoverage</para></summary>
	public const string AllotmentsOverage = "allotmentsoverage";
	/// <summary><para>Allotments Remaining</para>
	/// <para>allotmentsremaining</para></summary>
	public const string AllotmentsRemaining = "allotmentsremaining";
	/// <summary><para>Allotments Used</para>
	/// <para>allotmentsused</para></summary>
	public const string AllotmentsUsed = "allotmentsused";
	/// <summary><para>Contact</para>
	/// <para>contactid</para></summary>
	public const string Contact = "contactid";
	/// <summary><para>Contract</para>
	/// <para>contractid</para></summary>
	public const string Contract = "contractid";
	/// <summary><para>Contract Line</para>
	/// <para>contractdetailid</para></summary>
	public const string ContractLineId = "contractdetailid";
	/// <summary><para>Contract State</para>
	/// <para>contractstatecode</para></summary>
	public const string ContractState = "contractstatecode";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Customer</para>
	/// <para>customerid</para></summary>
	public const string Customer = "customerid";
	/// <summary><para>Customer Type</para>
	/// <para>customeridtype</para></summary>
	public const string CustomerType = "customeridtype";
	/// <summary><para>Discount</para>
	/// <para>discount</para></summary>
	public const string Discount = "discount";
	/// <summary><para>Discount (%)</para>
	/// <para>discountpercentage</para></summary>
	public const string Discount2 = "discountpercentage";
	/// <summary><para>Discount (Base)</para>
	/// <para>discount_base</para></summary>
	public const string Discount_Base = "discount_base";
	/// <summary><para>End Date</para>
	/// <para>expireson</para></summary>
	public const string EndDate = "expireson";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Line Item Order</para>
	/// <para>lineitemorder</para></summary>
	public const string LineItemOrder = "lineitemorder";
	/// <summary><para>Location</para>
	/// <para>serviceaddress</para></summary>
	public const string Location = "serviceaddress";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Net</para>
	/// <para>net</para></summary>
	public const string Net = "net";
	/// <summary><para>Net (Base)</para>
	/// <para>net_base</para></summary>
	public const string Net_Base = "net_base";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Product</para>
	/// <para>productid</para></summary>
	public const string Product = "productid";
	/// <summary><para>Quantity</para>
	/// <para>initialquantity</para></summary>
	public const string Quantity = "initialquantity";
	/// <summary><para>Rate</para>
	/// <para>rate</para></summary>
	public const string Rate = "rate";
	/// <summary><para>Rate (Base)</para>
	/// <para>rate_base</para></summary>
	public const string Rate_Base = "rate_base";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Serial Number</para>
	/// <para>productserialnumber</para></summary>
	public const string SerialNumber = "productserialnumber";
	/// <summary><para>Service Contract Units</para>
	/// <para>servicecontractunitscode</para></summary>
	public const string ServiceContractUnits = "servicecontractunitscode";
	/// <summary><para>Start Date</para>
	/// <para>activeon</para></summary>
	public const string StartDate = "activeon";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Support Calendar</para>
	/// <para>effectivitycalendar</para></summary>
	public const string SupportCalendar = "effectivitycalendar";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Title</para>
	/// <para>title</para></summary>
	public const string Title = "title";
	/// <summary><para>Total Allotments</para>
	/// <para>totalallotments</para></summary>
	public const string TotalAllotments = "totalallotments";
	/// <summary><para>Total Price</para>
	/// <para>price</para></summary>
	public const string TotalPrice = "price";
	/// <summary><para>Total Price (Base)</para>
	/// <para>price_base</para></summary>
	public const string TotalPrice_Base = "price_base";
	/// <summary><para>Unit</para>
	/// <para>uomid</para></summary>
	public const string Unit = "uomid";
	/// <summary><para>Unit Schedule</para>
	/// <para>uomscheduleid</para></summary>
	public const string UnitSchedule = "uomscheduleid";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
