// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("commitment")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Commitment : BaseProxyClass
    {
        public new const string LogicalName = "commitment";
        public const int ObjectTypeCode = 4215;
        public const string PrimaryIdAttribute = "commitmentid";
        public const string PrimaryNameAttribute = "";
        
        static Commitment()
        {
            BaseProxyClass.RegisterProxyType(typeof(Commitment), "commitment");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Commitment() : base(new Entity("commitment")) { }
        public Commitment(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Commitment>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: scheduledend</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledend")]
public DateTime? ScheduledEnd
{
	get { return this.GetPropertyValue<DateTime?>("scheduledend"); }
}
///<summary>
///<para>Logical Name: resourcespecid</para>
///</summary>
[AttributeLogicalNameAttribute("resourcespecid")]
public Guid ResourceSpecId
{
	get { return this.GetPropertyValue<Guid>("resourcespecid"); }
}
///<summary>
///<para>Logical Name: activityid</para>
///</summary>
[AttributeLogicalNameAttribute("activityid")]
public Guid ActivityId
{
	get { return this.GetPropertyValue<Guid>("activityid"); }
}
///<summary>
///<para>Logical Name: participationtypemask</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("participationtypemask")]
public int? ParticipationTypeMask
{
	get { return this.GetPropertyValue<int?>("participationtypemask"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: commitmentid</para>
///</summary>
[AttributeLogicalNameAttribute("commitmentid")]
public Guid CommitmentId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: partyid</para>
///</summary>
[AttributeLogicalNameAttribute("partyid")]
public Guid PartyId
{
	get { return this.GetPropertyValue<Guid>("partyid"); }
}
///<summary>
///<para>Logical Name: serviceid</para>
///</summary>
[AttributeLogicalNameAttribute("serviceid")]
public EntityReference ServiceId
{
	get { return this.GetPropertyValue<EntityReference>("serviceid"); }
}
///<summary>
///<para>Logical Name: subject</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("subject")]
public string Subject
{
	get { return this.GetPropertyValue<string>("subject"); }
}
///<summary>
///<para>Logical Name: effort</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("effort")]
public double? Effort
{
	get { return this.GetPropertyValue<double?>("effort"); }
}
///<summary>
///<para>Logical Name: partyobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("partyobjecttypecode")]
public string PartyObjectTypeCode
{
	get { return this.GetPropertyValue<string>("partyobjecttypecode"); }
}
///<summary>
///<para>Logical Name: scheduledstart</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledstart")]
public DateTime? ScheduledStart
{
	get { return this.GetPropertyValue<DateTime?>("scheduledstart"); }
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusCode
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
}
///<summary>
///<para>Logical Name: activitytypecode</para>
///</summary>
[AttributeLogicalNameAttribute("activitytypecode")]
public string ActivityTypeCode
{
	get { return this.GetPropertyValue<string>("activitytypecode"); }
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
}


        /// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Commitment_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Commitment_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_commitment</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_commitment</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        

        public static class Properties
{
	/// <summary><para>scheduledend</para>
	/// <para>scheduledend</para></summary>
	public const string ScheduledEnd = "scheduledend";
	/// <summary><para>resourcespecid</para>
	/// <para>resourcespecid</para></summary>
	public const string ResourceSpecId = "resourcespecid";
	/// <summary><para>activityid</para>
	/// <para>activityid</para></summary>
	public const string ActivityId = "activityid";
	/// <summary><para>participationtypemask</para>
	/// <para>participationtypemask</para></summary>
	public const string ParticipationTypeMask = "participationtypemask";
	/// <summary><para>commitmentid</para>
	/// <para>commitmentid</para></summary>
	public const string CommitmentId = "commitmentid";
	/// <summary><para>partyid</para>
	/// <para>partyid</para></summary>
	public const string PartyId = "partyid";
	/// <summary><para>serviceid</para>
	/// <para>serviceid</para></summary>
	public const string ServiceId = "serviceid";
	/// <summary><para>subject</para>
	/// <para>subject</para></summary>
	public const string Subject = "subject";
	/// <summary><para>effort</para>
	/// <para>effort</para></summary>
	public const string Effort = "effort";
	/// <summary><para>partyobjecttypecode</para>
	/// <para>partyobjecttypecode</para></summary>
	public const string PartyObjectTypeCode = "partyobjecttypecode";
	/// <summary><para>scheduledstart</para>
	/// <para>scheduledstart</para></summary>
	public const string ScheduledStart = "scheduledstart";
	/// <summary><para>statuscode</para>
	/// <para>statuscode</para></summary>
	public const string StatusCode = "statuscode";
	/// <summary><para>activitytypecode</para>
	/// <para>activitytypecode</para></summary>
	public const string ActivityTypeCode = "activitytypecode";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
}

    }
}
