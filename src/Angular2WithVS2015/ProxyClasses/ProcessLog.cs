// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("workflowlog")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ProcessLog : BaseProxyClass
    {
        public new const string LogicalName = "workflowlog";
        public const int ObjectTypeCode = 4706;
        public const string PrimaryIdAttribute = "workflowlogid";
        public const string PrimaryNameAttribute = "";
        
        static ProcessLog()
        {
            BaseProxyClass.RegisterProxyType(typeof(ProcessLog), "workflowlog");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ProcessLog() : base(new Entity("workflowlog")) { }
        public ProcessLog(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ProcessLog>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: activityname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("activityname")]
public string ActivityName
{
	get { return this.GetPropertyValue<string>("activityname"); }
	set { this.SetPropertyValue("activityname", value, 160, "ActivityName"); }
}
///<summary>
///<para>Logical Name: childworkflowinstanceidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("childworkflowinstanceidname")]
public string ChildAsyncOperationName
{
	get { return this.GetPropertyValue<string>("childworkflowinstanceidname"); }
}
///<summary>
///<para>Logical Name: childworkflowinstanceid</para>
///</summary>
[AttributeLogicalNameAttribute("childworkflowinstanceid")]
public EntityReference ChildWorkflowSystemJob
{
	get { return this.GetPropertyValue<EntityReference>("childworkflowinstanceid"); }
	set { this.SetPropertyValue<EntityReference>("childworkflowinstanceid", value, "ChildWorkflowSystemJob"); }
}
///<summary>
///<para>Logical Name: completedon</para>
///</summary>
[AttributeLogicalNameAttribute("completedon")]
public DateTime? CompletedOn
{
	get { return this.GetPropertyValue<DateTime?>("completedon"); }
	set { this.SetPropertyValue<DateTime?>("completedon", value, "CompletedOn"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedBy_Delegate_Name
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedBy_Delegate_YomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: duration</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("duration")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("duration"); }
}
///<summary>
///<para>Logical Name: childworkflowinstanceobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("childworkflowinstanceobjecttypecode")]
public string Entity
{
	get { return this.GetPropertyValue<string>("childworkflowinstanceobjecttypecode"); }
	set { this.SetPropertyValue<string>("childworkflowinstanceobjecttypecode", value, "Entity"); }
}
///<summary>
///<para>Logical Name: objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("objecttypecode")]
public string Entity2
{
	get { return this.GetPropertyValue<string>("objecttypecode"); }
	set { this.SetPropertyValue<string>("objecttypecode", value, "Entity2"); }
}
///<summary>
///<para>Logical Name: errorcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("errorcode")]
public int? ErrorMessage
{
	get { return this.GetPropertyValue<int?>("errorcode"); }
	set { this.SetPropertyValue("errorcode", (int?)value, (int)-2147483648, (int)2147483647, "ErrorMessage"); }
}
///<summary>
///<para>Logical Name: interactionactivityresult</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("interactionactivityresult")]
public string InteractionActivityResult
{
	get { return this.GetPropertyValue<string>("interactionactivityresult"); }
	set { this.SetPropertyValue("interactionactivityresult", value, 100000, "InteractionActivityResult"); }
}
///<summary>
///<para>Logical Name: message</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("message")]
public string Message
{
	get { return this.GetPropertyValue<string>("message"); }
	set { this.SetPropertyValue("message", value, 100000, "Message"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: asyncoperationid</para>
///</summary>
[AttributeLogicalNameAttribute("asyncoperationid")]
public EntityReference ParentRecord
{
	get { return this.GetPropertyValue<EntityReference>("asyncoperationid"); }
	set { this.SetPropertyValue<EntityReference>("asyncoperationid", value, "ParentRecord"); }
}
///<summary>
///<para>Logical Name: asyncoperationidname</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("asyncoperationidname")]
public string ParentRecord2
{
	get { return this.GetPropertyValue<string>("asyncoperationidname"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: workflowlogid</para>
///</summary>
[AttributeLogicalNameAttribute("workflowlogid")]
public Guid ProcessLogId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: stagename</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("stagename")]
public string ProcessStage
{
	get { return this.GetPropertyValue<string>("stagename"); }
	set { this.SetPropertyValue("stagename", value, 256, "ProcessStage"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
	set { this.SetPropertyValue("regardingobjectidname", value, 256, "RegardingObjectIdName"); }
}
///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
	set { this.SetPropertyValue("regardingobjectidyominame", value, 160, "RegardingObjectIdYomiName"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: startedon</para>
///</summary>
[AttributeLogicalNameAttribute("startedon")]
public DateTime? StartedOn
{
	get { return this.GetPropertyValue<DateTime?>("startedon"); }
	set { this.SetPropertyValue<DateTime?>("startedon", value, "StartedOn"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? StartedOn2
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
/// <summary>
///Logical Name: status
/// </summary>
[AttributeLogicalNameAttribute("status")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: status</para>
///</summary>
[AttributeLogicalNameAttribute("status")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("status"); }
	set { this.SetPropertyValue<OptionSetValue>("status", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "status");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string StepDescription
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 100000, "StepDescription"); }
}
///<summary>
///<para>Logical Name: stepname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("stepname")]
public string StepName
{
	get { return this.GetPropertyValue<string>("stepname"); }
	set { this.SetPropertyValue("stepname", value, 160, "StepName"); }
}


        /// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_workflowlog</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_workflowlog</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eStatus
{
	///<summary><para>In Progress</para>
	///<para>Value = 1</para></summary>
	[Description("In Progress")]
	InProgress = 1, 
	///<summary><para>Succeeded</para>
	///<para>Value = 2</para></summary>
	[Description("Succeeded")]
	Succeeded = 2, 
	///<summary><para>Failed</para>
	///<para>Value = 3</para></summary>
	[Description("Failed")]
	Failed = 3, 
	///<summary><para>Canceled</para>
	///<para>Value = 4</para></summary>
	[Description("Canceled")]
	Canceled = 4, 
	///<summary><para>Waiting</para>
	///<para>Value = 5</para></summary>
	[Description("Waiting")]
	Waiting = 5
}


        public static class Properties
{
	/// <summary><para>Activity Name</para>
	/// <para>activityname</para></summary>
	public const string ActivityName = "activityname";
	/// <summary><para>Child Async Operation Name</para>
	/// <para>childworkflowinstanceidname</para></summary>
	public const string ChildAsyncOperationName = "childworkflowinstanceidname";
	/// <summary><para>Child Workflow System Job</para>
	/// <para>childworkflowinstanceid</para></summary>
	public const string ChildWorkflowSystemJob = "childworkflowinstanceid";
	/// <summary><para>Completed On</para>
	/// <para>completedon</para></summary>
	public const string CompletedOn = "completedon";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created By Name</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>Created By Yomi Name</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>Created By(Delegate) Name</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedBy_Delegate_Name = "createdonbehalfbyname";
	/// <summary><para>Created By(Delegate) Yomi Name</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedBy_Delegate_YomiName = "createdonbehalfbyyominame";
	/// <summary><para>Duration</para>
	/// <para>duration</para></summary>
	public const string Duration = "duration";
	/// <summary><para>Entity</para>
	/// <para>childworkflowinstanceobjecttypecode</para></summary>
	public const string Entity = "childworkflowinstanceobjecttypecode";
	/// <summary><para>Entity</para>
	/// <para>objecttypecode</para></summary>
	public const string Entity2 = "objecttypecode";
	/// <summary><para>Error Message</para>
	/// <para>errorcode</para></summary>
	public const string ErrorMessage = "errorcode";
	/// <summary><para>Interaction Activity Result</para>
	/// <para>interactionactivityresult</para></summary>
	public const string InteractionActivityResult = "interactionactivityresult";
	/// <summary><para>Message</para>
	/// <para>message</para></summary>
	public const string Message = "message";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified By Name</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>Modified By Yomi Name</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Modified On Behalf By Name</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Modified On Behalf By Yomi Name</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owner Id Type</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Parent record</para>
	/// <para>asyncoperationid</para></summary>
	public const string ParentRecord = "asyncoperationid";
	/// <summary><para>Parent record</para>
	/// <para>asyncoperationidname</para></summary>
	public const string ParentRecord2 = "asyncoperationidname";
	/// <summary><para>Process Log</para>
	/// <para>workflowlogid</para></summary>
	public const string ProcessLogId = "workflowlogid";
	/// <summary><para>Process Stage</para>
	/// <para>stagename</para></summary>
	public const string ProcessStage = "stagename";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Regarding Object Id Name</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>Regarding Object Id Yomi Name</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>Regarding Object Type Code</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>Started On</para>
	/// <para>startedon</para></summary>
	public const string StartedOn = "startedon";
	/// <summary><para>Started On</para>
	/// <para>createdon</para></summary>
	public const string StartedOn2 = "createdon";
	/// <summary><para>Status</para>
	/// <para>status</para></summary>
	public const string Status = "status";
	/// <summary><para>Step Description</para>
	/// <para>description</para></summary>
	public const string StepDescription = "description";
	/// <summary><para>Step Name</para>
	/// <para>stepname</para></summary>
	public const string StepName = "stepname";
}

    }
}
