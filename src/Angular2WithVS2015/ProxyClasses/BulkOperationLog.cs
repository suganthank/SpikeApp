// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("bulkoperationlog")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class BulkOperationLog : BaseProxyClass
    {
        public new const string LogicalName = "bulkoperationlog";
        public const int ObjectTypeCode = 4405;
        public const string PrimaryIdAttribute = "bulkoperationlogid";
        public const string PrimaryNameAttribute = "";
        
        static BulkOperationLog()
        {
            BaseProxyClass.RegisterProxyType(typeof(BulkOperationLog), "bulkoperationlog");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public BulkOperationLog() : base(new Entity("bulkoperationlog")) { }
        public BulkOperationLog(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<BulkOperationLog>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
}
///<summary>
///<para>Logical Name: bulkoperationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("bulkoperationidname")]
public string BulkOperationIdName
{
	get { return this.GetPropertyValue<string>("bulkoperationidname"); }
}
///<summary>
///<para>Logical Name: createdobjectidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdobjectidname")]
public string CreatedObjectIdName
{
	get { return this.GetPropertyValue<string>("createdobjectidname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidtypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidtypecode")]
public string RegardingObjectIdTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjectidtypecode"); }
	set { this.SetPropertyValue<string>("regardingobjectidtypecode", value, "RegardingObjectIdTypeCode"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
}
///<summary>
///<para>Logical Name: createdobjectidtypecode</para>
///</summary>
[AttributeLogicalNameAttribute("createdobjectidtypecode")]
public string CreatedObjectIdTypeCode
{
	get { return this.GetPropertyValue<string>("createdobjectidtypecode"); }
	set { this.SetPropertyValue<string>("createdobjectidtypecode", value, "CreatedObjectIdTypeCode"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: bulkoperationlogid</para>
///</summary>
[AttributeLogicalNameAttribute("bulkoperationlogid")]
public Guid BulkOperationLogNumberId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: bulkoperationid</para>
///</summary>
[AttributeLogicalNameAttribute("bulkoperationid")]
public EntityReference BulkOperationNumber
{
	get { return this.GetPropertyValue<EntityReference>("bulkoperationid"); }
	set { this.SetPropertyValue<EntityReference>("bulkoperationid", value, "BulkOperationNumber"); }
}
///<summary>
///<para>Logical Name: createdobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("createdobjectid")]
public EntityReference CreatedObject
{
	get { return this.GetPropertyValue<EntityReference>("createdobjectid"); }
	set { this.SetPropertyValue<EntityReference>("createdobjectid", value, "CreatedObject"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference CustomersExcluded
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "CustomersExcluded"); }
}
///<summary>
///<para>Logical Name: additionalinfo</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("additionalinfo")]
public string FailedOnLine
{
	get { return this.GetPropertyValue<string>("additionalinfo"); }
	set { this.SetPropertyValue("additionalinfo", value, 100000, "FailedOnLine"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public Guid OwningBusinessUnit
{
	get { return this.GetPropertyValue<Guid>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public Guid OwningUser
{
	get { return this.GetPropertyValue<Guid>("owninguser"); }
}
///<summary>
///<para>Logical Name: errornumber</para>
///<para>Minimum Value: -1000000000</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("errornumber")]
public int? ReasonId
{
	get { return this.GetPropertyValue<int?>("errornumber"); }
}


        /// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: BulkOperationLog_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: BulkOperationLog_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: BulkOperationLog_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: BulkOperationLog_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_bulkoperationlog</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_bulkoperationlog</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        

        public static class Properties
{
	/// <summary><para>regardingobjectidyominame</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>bulkoperationidname</para>
	/// <para>bulkoperationidname</para></summary>
	public const string BulkOperationIdName = "bulkoperationidname";
	/// <summary><para>createdobjectidname</para>
	/// <para>createdobjectidname</para></summary>
	public const string CreatedObjectIdName = "createdobjectidname";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>regardingobjectidtypecode</para>
	/// <para>regardingobjectidtypecode</para></summary>
	public const string RegardingObjectIdTypeCode = "regardingobjectidtypecode";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>createdobjectidtypecode</para>
	/// <para>createdobjectidtypecode</para></summary>
	public const string CreatedObjectIdTypeCode = "createdobjectidtypecode";
	/// <summary><para>Bulk Operation Log Number</para>
	/// <para>bulkoperationlogid</para></summary>
	public const string BulkOperationLogNumberId = "bulkoperationlogid";
	/// <summary><para>Bulk Operation Number</para>
	/// <para>bulkoperationid</para></summary>
	public const string BulkOperationNumber = "bulkoperationid";
	/// <summary><para>Created Object</para>
	/// <para>createdobjectid</para></summary>
	public const string CreatedObject = "createdobjectid";
	/// <summary><para>Customers Excluded</para>
	/// <para>regardingobjectid</para></summary>
	public const string CustomersExcluded = "regardingobjectid";
	/// <summary><para>Failed on Line</para>
	/// <para>additionalinfo</para></summary>
	public const string FailedOnLine = "additionalinfo";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Reason Id</para>
	/// <para>errornumber</para></summary>
	public const string ReasonId = "errornumber";
}

    }
}
