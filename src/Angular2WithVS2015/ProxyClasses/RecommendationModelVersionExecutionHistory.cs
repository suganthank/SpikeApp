// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("recommendationmodelversionhistory")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class RecommendationModelVersionExecutionHistory : BaseProxyClass
    {
        public new const string LogicalName = "recommendationmodelversionhistory";
        public const int ObjectTypeCode = 9937;
        public const string PrimaryIdAttribute = "recommendationmodelversionhistoryid";
        public const string PrimaryNameAttribute = "";
        
        static RecommendationModelVersionExecutionHistory()
        {
            BaseProxyClass.RegisterProxyType(typeof(RecommendationModelVersionExecutionHistory), "recommendationmodelversionhistory");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public RecommendationModelVersionExecutionHistory() : base(new Entity("recommendationmodelversionhistory")) { }
        public RecommendationModelVersionExecutionHistory(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<RecommendationModelVersionExecutionHistory>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: recommendationmodelversionidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelversionidname")]
public string RecommendationModelVersionIdName
{
	get { return this.GetPropertyValue<string>("recommendationmodelversionidname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: duration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("duration")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("duration"); }
}
///<summary>
///<para>Logical Name: endtime</para>
///</summary>
[AttributeLogicalNameAttribute("endtime")]
public DateTime? EndTime
{
	get { return this.GetPropertyValue<DateTime?>("endtime"); }
	set { this.SetPropertyValue<DateTime?>("endtime", value, "EndTime"); }
}
///<summary>
///<para>Logical Name: azuresyncerrormessage</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("azuresyncerrormessage")]
public string ErrorDetails
{
	get { return this.GetPropertyValue<string>("azuresyncerrormessage"); }
	set { this.SetPropertyValue("azuresyncerrormessage", value, 1073741823, "ErrorDetails"); }
}
///<summary>
///<para>Logical Name: errorcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("errorcount")]
public int? NumberOfFailedRecords
{
	get { return this.GetPropertyValue<int?>("errorcount"); }
	set { this.SetPropertyValue("errorcount", (int?)value, (int)0, (int)2147483647, "NumberOfFailedRecords"); }
}
///<summary>
///<para>Logical Name: numberrecordssynchronized</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("numberrecordssynchronized")]
public int? NumberOfSynchronizedRecords
{
	get { return this.GetPropertyValue<int?>("numberrecordssynchronized"); }
	set { this.SetPropertyValue("numberrecordssynchronized", (int?)value, (int)0, (int)2147483647, "NumberOfSynchronizedRecords"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: recommendationmodelversionid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelversionid")]
public EntityReference RecommendationModelVersion
{
	get { return this.GetPropertyValue<EntityReference>("recommendationmodelversionid"); }
	set { this.SetPropertyValue<EntityReference>("recommendationmodelversionid", value, "RecommendationModelVersion"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: recommendationmodelversionhistoryid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelversionhistoryid")]
public Guid RecommendationModelVersionHistoryId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: starttime</para>
///</summary>
[AttributeLogicalNameAttribute("starttime")]
public DateTime? StartTime
{
	get { return this.GetPropertyValue<DateTime?>("starttime"); }
	set { this.SetPropertyValue<DateTime?>("starttime", value, "StartTime"); }
}
/// <summary>
///Logical Name: workflowstepstatus
/// </summary>
[AttributeLogicalNameAttribute("workflowstepstatus")]
public eStepStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStepStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: workflowstepstatus</para>
///</summary>
[AttributeLogicalNameAttribute("workflowstepstatus")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("workflowstepstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("workflowstepstatus", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "workflowstepstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: workflowstep
/// </summary>
[AttributeLogicalNameAttribute("workflowstep")]
public eStep? Step
{
	get
	{
		if (Step_OptionSetValue != null) { return (eStep)Step_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Step_OptionSetValue = new OptionSetValue((int)value); }
		else this.Step_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: workflowstep</para>
///</summary>
[AttributeLogicalNameAttribute("workflowstep")]
public OptionSetValue Step_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("workflowstep"); }
	set { this.SetPropertyValue<OptionSetValue>("workflowstep", value, "Step_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Step_Text(IOrganizationService Service)
{
	return this.Step_OptionSetValue.GetOptionSetText(Service, this, "workflowstep");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Step_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Step_OptionSetValue.Value);
}


        

        

        

        public enum eStepStatus
{
	///<summary><para>Not Started</para>
	///<para>Value = 1</para></summary>
	[Description("Not Started")]
	NotStarted = 1, 
	///<summary><para>In Progress</para>
	///<para>Value = 2</para></summary>
	[Description("In Progress")]
	InProgress = 2, 
	///<summary><para>Success</para>
	///<para>Value = 3</para></summary>
	[Description("Success")]
	Success = 3, 
	///<summary><para>Failure</para>
	///<para>Value = 4</para></summary>
	[Description("Failure")]
	Failure = 4, 
	///<summary><para>Cancelled</para>
	///<para>Value = 5</para></summary>
	[Description("Cancelled")]
	Cancelled = 5, 
	///<summary><para>Skipped</para>
	///<para>Value = 6</para></summary>
	[Description("Skipped")]
	Skipped = 6
}
public enum eStep
{
	///<summary><para>Synchronize Catalog</para>
	///<para>Value = 1</para></summary>
	[Description("Synchronize Catalog")]
	SynchronizeCatalog = 1, 
	///<summary><para>Synchronize Basket Data</para>
	///<para>Value = 2</para></summary>
	[Description("Synchronize Basket Data")]
	SynchronizeBasketData = 2, 
	///<summary><para>Build AzureModel</para>
	///<para>Value = 3</para></summary>
	[Description("Build AzureModel")]
	BuildAzureModel = 3
}


        public static class Properties
{
	/// <summary><para>recommendationmodelversionidname</para>
	/// <para>recommendationmodelversionidname</para></summary>
	public const string RecommendationModelVersionIdName = "recommendationmodelversionidname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>Duration</para>
	/// <para>duration</para></summary>
	public const string Duration = "duration";
	/// <summary><para>End Time</para>
	/// <para>endtime</para></summary>
	public const string EndTime = "endtime";
	/// <summary><para>Error Details</para>
	/// <para>azuresyncerrormessage</para></summary>
	public const string ErrorDetails = "azuresyncerrormessage";
	/// <summary><para>Number of Failed Records</para>
	/// <para>errorcount</para></summary>
	public const string NumberOfFailedRecords = "errorcount";
	/// <summary><para>Number of Synchronized Records</para>
	/// <para>numberrecordssynchronized</para></summary>
	public const string NumberOfSynchronizedRecords = "numberrecordssynchronized";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Recommendation Model Version</para>
	/// <para>recommendationmodelversionid</para></summary>
	public const string RecommendationModelVersion = "recommendationmodelversionid";
	/// <summary><para>Recommendation Model Version History</para>
	/// <para>recommendationmodelversionhistoryid</para></summary>
	public const string RecommendationModelVersionHistoryId = "recommendationmodelversionhistoryid";
	/// <summary><para>Start Time</para>
	/// <para>starttime</para></summary>
	public const string StartTime = "starttime";
	/// <summary><para>Status</para>
	/// <para>workflowstepstatus</para></summary>
	public const string Status = "workflowstepstatus";
	/// <summary><para>Step</para>
	/// <para>workflowstep</para></summary>
	public const string Step = "workflowstep";
}

    }
}
