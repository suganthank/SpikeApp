// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("emailserverprofile")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class EmailServerProfile : BaseProxyClass
    {
        public new const string LogicalName = "emailserverprofile";
        public const int ObjectTypeCode = 9605;
        public const string PrimaryIdAttribute = "emailserverprofileid";
        public const string PrimaryNameAttribute = "name";
        
        static EmailServerProfile()
        {
            BaseProxyClass.RegisterProxyType(typeof(EmailServerProfile), "emailserverprofile");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public EmailServerProfile() : base(new Entity("emailserverprofile")) { }
        public EmailServerProfile(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<EmailServerProfile>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: owningbusinessunitname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunitname")]
public string OwningBusinessUnitName
{
	get { return this.GetPropertyValue<string>("owningbusinessunitname"); }
}
///<summary>
///<para>Logical Name: entityimage_timestamp</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_timestamp")]
public int? EntityImage_Timestamp
{
	get { return this.GetPropertyValue<int?>("entityimage_timestamp"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: isincomingpasswordset</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isincomingpasswordset")]
public bool? IsIncomingPasswordSet
{
	get { return this.GetPropertyValue<bool?>("isincomingpasswordset"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: outgoingpartnerapplicationname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingpartnerapplicationname")]
public string OutgoingPartnerApplicationName
{
	get { return this.GetPropertyValue<string>("outgoingpartnerapplicationname"); }
}
///<summary>
///<para>Logical Name: isoutgoingpasswordset</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isoutgoingpasswordset")]
public bool? IsOutgoingPasswordSet
{
	get { return this.GetPropertyValue<bool?>("isoutgoingpasswordset"); }
}
///<summary>
///<para>Logical Name: entityimage_url</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_url")]
public string EntityImage_URL
{
	get { return this.GetPropertyValue<string>("entityimage_url"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: incomingpartnerapplicationname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("incomingpartnerapplicationname")]
public string IncomingPartnerApplicationName
{
	get { return this.GetPropertyValue<string>("incomingpartnerapplicationname"); }
}
///<summary>
///<para>Logical Name: useautodiscover</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("useautodiscover")]
public bool? AutoDiscoverServerLocation
{
	get { return this.GetPropertyValue<bool?>("useautodiscover"); }
	set { this.SetPropertyValue<bool?>("useautodiscover", value, "AutoDiscoverServerLocation"); }
}
///<summary>
///<para>Logical Name: outgoingautograntdelegateaccess</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingautograntdelegateaccess")]
public bool? AutoGrantDelegateAccessForOutgoingEmail
{
	get { return this.GetPropertyValue<bool?>("outgoingautograntdelegateaccess"); }
	set { this.SetPropertyValue<bool?>("outgoingautograntdelegateaccess", value, "AutoGrantDelegateAccessForOutgoingEmail"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: defaultserverlocation</para>
///<para>Max Length: 2084 characters</para>
///</summary>
[AttributeLogicalNameAttribute("defaultserverlocation")]
public string DefaultEmailServerLocation
{
	get { return this.GetPropertyValue<string>("defaultserverlocation"); }
	set { this.SetPropertyValue("defaultserverlocation", value, 2084, "DefaultEmailServerLocation"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: owneremailaddress</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneremailaddress")]
public string EmailServerProfileOwnersEmailAddress
{
	get { return this.GetPropertyValue<string>("owneremailaddress"); }
	set { this.SetPropertyValue("owneremailaddress", value, 100, "EmailServerProfileOwnersEmailAddress"); }
}
/// <summary>
///Logical Name: servertype
/// </summary>
[AttributeLogicalNameAttribute("servertype")]
public eEmailServerType? EmailServerType
{
	get
	{
		if (EmailServerType_OptionSetValue != null) { return (eEmailServerType)EmailServerType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EmailServerType_OptionSetValue = new OptionSetValue((int)value); }
		else this.EmailServerType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: servertype</para>
///</summary>
[AttributeLogicalNameAttribute("servertype")]
public OptionSetValue EmailServerType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("servertype"); }
	set { this.SetPropertyValue<OptionSetValue>("servertype", value, "EmailServerType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string EmailServerType_Text(IOrganizationService Service)
{
	return this.EmailServerType_OptionSetValue.GetOptionSetText(Service, this, "servertype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string EmailServerType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.EmailServerType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: emailservertypename</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailservertypename")]
public string EmailServerTypeName
{
	get { return this.GetPropertyValue<string>("emailservertypename"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: emailserverprofileid</para>
///</summary>
[AttributeLogicalNameAttribute("emailserverprofileid")]
public Guid EmailServerProfileId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: encodingcodepage</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("encodingcodepage")]
public string EncodingCodePage
{
	get { return this.GetPropertyValue<string>("encodingcodepage"); }
	set { this.SetPropertyValue("encodingcodepage", value, 100, "EncodingCodePage"); }
}
///<summary>
///<para>Logical Name: entityimageid</para>
///</summary>
[AttributeLogicalNameAttribute("entityimageid")]
public Guid EntityImageId
{
	get { return this.GetPropertyValue<Guid>("entityimageid"); }
}
///<summary>
///<para>Logical Name: exchangeonlinetenantid</para>
///<para>Max Length: 36 characters</para>
///</summary>
[AttributeLogicalNameAttribute("exchangeonlinetenantid")]
public string ExchangeOnlineTenantId
{
	get { return this.GetPropertyValue<string>("exchangeonlinetenantid"); }
	set { this.SetPropertyValue("exchangeonlinetenantid", value, 36, "ExchangeOnlineTenantId"); }
}
/// <summary>
///Logical Name: exchangeversion
/// </summary>
[AttributeLogicalNameAttribute("exchangeversion")]
public eExchangeVersion? ExchangeVersion
{
	get
	{
		if (ExchangeVersion_OptionSetValue != null) { return (eExchangeVersion)ExchangeVersion_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ExchangeVersion_OptionSetValue = new OptionSetValue((int)value); }
		else this.ExchangeVersion_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: exchangeversion</para>
///</summary>
[AttributeLogicalNameAttribute("exchangeversion")]
public OptionSetValue ExchangeVersion_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("exchangeversion"); }
	set { this.SetPropertyValue<OptionSetValue>("exchangeversion", value, "ExchangeVersion_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ExchangeVersion_Text(IOrganizationService Service)
{
	return this.ExchangeVersion_OptionSetValue.GetOptionSetText(Service, this, "exchangeversion");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ExchangeVersion_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ExchangeVersion_OptionSetValue.Value);
}
/// <summary>
///Logical Name: incomingauthenticationprotocol
/// </summary>
[AttributeLogicalNameAttribute("incomingauthenticationprotocol")]
public eAuthenticationProtocol? IncomingAuthenticationProtocol
{
	get
	{
		if (IncomingAuthenticationProtocol_OptionSetValue != null) { return (eAuthenticationProtocol)IncomingAuthenticationProtocol_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.IncomingAuthenticationProtocol_OptionSetValue = new OptionSetValue((int)value); }
		else this.IncomingAuthenticationProtocol_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: incomingauthenticationprotocol</para>
///</summary>
[AttributeLogicalNameAttribute("incomingauthenticationprotocol")]
public OptionSetValue IncomingAuthenticationProtocol_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("incomingauthenticationprotocol"); }
	set { this.SetPropertyValue<OptionSetValue>("incomingauthenticationprotocol", value, "IncomingAuthenticationProtocol_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IncomingAuthenticationProtocol_Text(IOrganizationService Service)
{
	return this.IncomingAuthenticationProtocol_OptionSetValue.GetOptionSetText(Service, this, "incomingauthenticationprotocol");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IncomingAuthenticationProtocol_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IncomingAuthenticationProtocol_OptionSetValue.Value);
}
/// <summary>
///Logical Name: incomingcredentialretrieval
/// </summary>
[AttributeLogicalNameAttribute("incomingcredentialretrieval")]
public eCredentialRetrievalMethod? IncomingEmailCredentialRetrieval
{
	get
	{
		if (IncomingEmailCredentialRetrieval_OptionSetValue != null) { return (eCredentialRetrievalMethod)IncomingEmailCredentialRetrieval_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.IncomingEmailCredentialRetrieval_OptionSetValue = new OptionSetValue((int)value); }
		else this.IncomingEmailCredentialRetrieval_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: incomingcredentialretrieval</para>
///</summary>
[AttributeLogicalNameAttribute("incomingcredentialretrieval")]
public OptionSetValue IncomingEmailCredentialRetrieval_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("incomingcredentialretrieval"); }
	set { this.SetPropertyValue<OptionSetValue>("incomingcredentialretrieval", value, "IncomingEmailCredentialRetrieval_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IncomingEmailCredentialRetrieval_Text(IOrganizationService Service)
{
	return this.IncomingEmailCredentialRetrieval_OptionSetValue.GetOptionSetText(Service, this, "incomingcredentialretrieval");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IncomingEmailCredentialRetrieval_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IncomingEmailCredentialRetrieval_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: incomingpassword</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("incomingpassword")]
public string IncomingEmailPassword
{
	get { return this.GetPropertyValue<string>("incomingpassword"); }
	set { this.SetPropertyValue("incomingpassword", value, 250, "IncomingEmailPassword"); }
}
///<summary>
///<para>Logical Name: incomingportnumber</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 65536</para>
///</summary>
[AttributeLogicalNameAttribute("incomingportnumber")]
public int? IncomingEmailPort
{
	get { return this.GetPropertyValue<int?>("incomingportnumber"); }
	set { this.SetPropertyValue("incomingportnumber", (int?)value, (int)0, (int)65536, "IncomingEmailPort"); }
}
///<summary>
///<para>Logical Name: incomingserverlocation</para>
///<para>Max Length: 2084 characters</para>
///</summary>
[AttributeLogicalNameAttribute("incomingserverlocation")]
public string IncomingEmailServerLocation
{
	get { return this.GetPropertyValue<string>("incomingserverlocation"); }
	set { this.SetPropertyValue("incomingserverlocation", value, 2084, "IncomingEmailServerLocation"); }
}
///<summary>
///<para>Logical Name: incomingusername</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("incomingusername")]
public string IncomingEmailUserName
{
	get { return this.GetPropertyValue<string>("incomingusername"); }
	set { this.SetPropertyValue("incomingusername", value, 250, "IncomingEmailUserName"); }
}
///<summary>
///<para>Logical Name: incomingpartnerapplication</para>
///</summary>
[AttributeLogicalNameAttribute("incomingpartnerapplication")]
public EntityReference IncomingPartnerApplication
{
	get { return this.GetPropertyValue<EntityReference>("incomingpartnerapplication"); }
}
///<summary>
///<para>Logical Name: lastcrmmessage</para>
///<para>Max Length: 2084 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lastcrmmessage")]
public string LastDynamics365Message
{
	get { return this.GetPropertyValue<string>("lastcrmmessage"); }
	set { this.SetPropertyValue("lastcrmmessage", value, 2084, "LastDynamics365Message"); }
}
/// <summary>
///Logical Name: lastauthorizationstatus
/// </summary>
[AttributeLogicalNameAttribute("lastauthorizationstatus")]
public eSelectTheStatusOfTheTest? LastTestAuthorizationStatus
{
	get
	{
		if (LastTestAuthorizationStatus_OptionSetValue != null) { return (eSelectTheStatusOfTheTest)LastTestAuthorizationStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.LastTestAuthorizationStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.LastTestAuthorizationStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: lastauthorizationstatus</para>
///</summary>
[AttributeLogicalNameAttribute("lastauthorizationstatus")]
public OptionSetValue LastTestAuthorizationStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("lastauthorizationstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("lastauthorizationstatus", value, "LastTestAuthorizationStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string LastTestAuthorizationStatus_Text(IOrganizationService Service)
{
	return this.LastTestAuthorizationStatus_OptionSetValue.GetOptionSetText(Service, this, "lastauthorizationstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string LastTestAuthorizationStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.LastTestAuthorizationStatus_OptionSetValue.Value);
}
/// <summary>
///Logical Name: lasttestexecutionstatus
/// </summary>
[AttributeLogicalNameAttribute("lasttestexecutionstatus")]
public eSelectTheStatusOfTheTest2? LastTestExecutionStatus
{
	get
	{
		if (LastTestExecutionStatus_OptionSetValue != null) { return (eSelectTheStatusOfTheTest2)LastTestExecutionStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.LastTestExecutionStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.LastTestExecutionStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: lasttestexecutionstatus</para>
///</summary>
[AttributeLogicalNameAttribute("lasttestexecutionstatus")]
public OptionSetValue LastTestExecutionStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("lasttestexecutionstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("lasttestexecutionstatus", value, "LastTestExecutionStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string LastTestExecutionStatus_Text(IOrganizationService Service)
{
	return this.LastTestExecutionStatus_OptionSetValue.GetOptionSetText(Service, this, "lasttestexecutionstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string LastTestExecutionStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.LastTestExecutionStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: lasttestrequest</para>
///<para>Max Length: 2084 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lasttestrequest")]
public string LastTestRequest
{
	get { return this.GetPropertyValue<string>("lasttestrequest"); }
	set { this.SetPropertyValue("lasttestrequest", value, 2084, "LastTestRequest"); }
}
///<summary>
///<para>Logical Name: lasttestresponse</para>
///<para>Max Length: 2084 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lasttestresponse")]
public string LastTestResponse
{
	get { return this.GetPropertyValue<string>("lasttestresponse"); }
	set { this.SetPropertyValue("lasttestresponse", value, 2084, "LastTestResponse"); }
}
///<summary>
///<para>Logical Name: lastteststarttime</para>
///</summary>
[AttributeLogicalNameAttribute("lastteststarttime")]
public DateTime? LastTestTime
{
	get { return this.GetPropertyValue<DateTime?>("lastteststarttime"); }
	set { this.SetPropertyValue<DateTime?>("lastteststarttime", value, "LastTestTime"); }
}
///<summary>
///<para>Logical Name: lasttesttotalexecutiontime</para>
///</summary>
[AttributeLogicalNameAttribute("lasttesttotalexecutiontime")]
public int? LastTestTimeTaken
{
	get { return this.GetPropertyValue<int?>("lasttesttotalexecutiontime"); }
	set { this.SetPropertyValue<int?>("lasttesttotalexecutiontime", value, "LastTestTimeTaken"); }
}
/// <summary>
///Logical Name: lasttestvalidationstatus
/// </summary>
[AttributeLogicalNameAttribute("lasttestvalidationstatus")]
public eSelectTheStatusOfTheTest3? LastTestValidationStatus
{
	get
	{
		if (LastTestValidationStatus_OptionSetValue != null) { return (eSelectTheStatusOfTheTest3)LastTestValidationStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.LastTestValidationStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.LastTestValidationStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: lasttestvalidationstatus</para>
///</summary>
[AttributeLogicalNameAttribute("lasttestvalidationstatus")]
public OptionSetValue LastTestValidationStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("lasttestvalidationstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("lasttestvalidationstatus", value, "LastTestValidationStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string LastTestValidationStatus_Text(IOrganizationService Service)
{
	return this.LastTestValidationStatus_OptionSetValue.GetOptionSetText(Service, this, "lasttestvalidationstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string LastTestValidationStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.LastTestValidationStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: maxconcurrentconnections</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 65536</para>
///</summary>
[AttributeLogicalNameAttribute("maxconcurrentconnections")]
public int? MaximumConcurrentConnections
{
	get { return this.GetPropertyValue<int?>("maxconcurrentconnections"); }
	set { this.SetPropertyValue("maxconcurrentconnections", (int?)value, (int)1, (int)65536, "MaximumConcurrentConnections"); }
}
///<summary>
///<para>Logical Name: minpollingintervalinminutes</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1440</para>
///</summary>
[AttributeLogicalNameAttribute("minpollingintervalinminutes")]
public int? MinimumPollingIntervalInMinutes
{
	get { return this.GetPropertyValue<int?>("minpollingintervalinminutes"); }
	set { this.SetPropertyValue("minpollingintervalinminutes", (int?)value, (int)0, (int)1440, "MinimumPollingIntervalInMinutes"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: moveundeliveredemails</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("moveundeliveredemails")]
public bool? MoveUndeliveredEmailsToTheUndeliverableFolder
{
	get { return this.GetPropertyValue<bool?>("moveundeliveredemails"); }
	set { this.SetPropertyValue<bool?>("moveundeliveredemails", value, "MoveUndeliveredEmailsToTheUndeliverableFolder"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 100, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference OrganizationId
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
/// <summary>
///Logical Name: outgoingauthenticationprotocol
/// </summary>
[AttributeLogicalNameAttribute("outgoingauthenticationprotocol")]
public eAuthenticationProtocol? OutgoingAuthenticationProtocol
{
	get
	{
		if (OutgoingAuthenticationProtocol_OptionSetValue != null) { return (eAuthenticationProtocol)OutgoingAuthenticationProtocol_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.OutgoingAuthenticationProtocol_OptionSetValue = new OptionSetValue((int)value); }
		else this.OutgoingAuthenticationProtocol_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: outgoingauthenticationprotocol</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingauthenticationprotocol")]
public OptionSetValue OutgoingAuthenticationProtocol_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("outgoingauthenticationprotocol"); }
	set { this.SetPropertyValue<OptionSetValue>("outgoingauthenticationprotocol", value, "OutgoingAuthenticationProtocol_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OutgoingAuthenticationProtocol_Text(IOrganizationService Service)
{
	return this.OutgoingAuthenticationProtocol_OptionSetValue.GetOptionSetText(Service, this, "outgoingauthenticationprotocol");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OutgoingAuthenticationProtocol_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OutgoingAuthenticationProtocol_OptionSetValue.Value);
}
/// <summary>
///Logical Name: outgoingcredentialretrieval
/// </summary>
[AttributeLogicalNameAttribute("outgoingcredentialretrieval")]
public eUseWindowsAuthenticationForOutgoing? OutgoingEmailCredentialRetrieval
{
	get
	{
		if (OutgoingEmailCredentialRetrieval_OptionSetValue != null) { return (eUseWindowsAuthenticationForOutgoing)OutgoingEmailCredentialRetrieval_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.OutgoingEmailCredentialRetrieval_OptionSetValue = new OptionSetValue((int)value); }
		else this.OutgoingEmailCredentialRetrieval_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: outgoingcredentialretrieval</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingcredentialretrieval")]
public OptionSetValue OutgoingEmailCredentialRetrieval_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("outgoingcredentialretrieval"); }
	set { this.SetPropertyValue<OptionSetValue>("outgoingcredentialretrieval", value, "OutgoingEmailCredentialRetrieval_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OutgoingEmailCredentialRetrieval_Text(IOrganizationService Service)
{
	return this.OutgoingEmailCredentialRetrieval_OptionSetValue.GetOptionSetText(Service, this, "outgoingcredentialretrieval");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OutgoingEmailCredentialRetrieval_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OutgoingEmailCredentialRetrieval_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: outgoingpassword</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingpassword")]
public string OutgoingEmailPassword
{
	get { return this.GetPropertyValue<string>("outgoingpassword"); }
	set { this.SetPropertyValue("outgoingpassword", value, 250, "OutgoingEmailPassword"); }
}
///<summary>
///<para>Logical Name: outgoingportnumber</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 65536</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingportnumber")]
public int? OutgoingEmailPort
{
	get { return this.GetPropertyValue<int?>("outgoingportnumber"); }
	set { this.SetPropertyValue("outgoingportnumber", (int?)value, (int)0, (int)65536, "OutgoingEmailPort"); }
}
///<summary>
///<para>Logical Name: outgoingserverlocation</para>
///<para>Max Length: 2084 characters</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingserverlocation")]
public string OutgoingEmailServerLocation
{
	get { return this.GetPropertyValue<string>("outgoingserverlocation"); }
	set { this.SetPropertyValue("outgoingserverlocation", value, 2084, "OutgoingEmailServerLocation"); }
}
///<summary>
///<para>Logical Name: outgoingusername</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingusername")]
public string OutgoingEmailUserName
{
	get { return this.GetPropertyValue<string>("outgoingusername"); }
	set { this.SetPropertyValue("outgoingusername", value, 250, "OutgoingEmailUserName"); }
}
///<summary>
///<para>Logical Name: outgoingpartnerapplication</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingpartnerapplication")]
public EntityReference OutgoingPartnerApplication
{
	get { return this.GetPropertyValue<EntityReference>("outgoingpartnerapplication"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: processemailsreceivedafter</para>
///</summary>
[AttributeLogicalNameAttribute("processemailsreceivedafter")]
public DateTime? ProcessEmailsReceivedAfter
{
	get { return this.GetPropertyValue<DateTime?>("processemailsreceivedafter"); }
	set { this.SetPropertyValue<DateTime?>("processemailsreceivedafter", value, "ProcessEmailsReceivedAfter"); }
}
///<summary>
///<para>Logical Name: sendemailalert</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("sendemailalert")]
public bool? SendAnAlertEmailToTheOwnerOfTheEmailServerProfileReportingOnMajorEvents
{
	get { return this.GetPropertyValue<bool?>("sendemailalert"); }
	set { this.SetPropertyValue<bool?>("sendemailalert", value, "SendAnAlertEmailToTheOwnerOfTheEmailServerProfileReportingOnMajorEvents"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: timeoutmailboxconnectionafteramount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000</para>
///</summary>
[AttributeLogicalNameAttribute("timeoutmailboxconnectionafteramount")]
public int? TimeoutASingleMailboxConnectionAfterThisAmountOfMilliseconds
{
	get { return this.GetPropertyValue<int?>("timeoutmailboxconnectionafteramount"); }
	set { this.SetPropertyValue("timeoutmailboxconnectionafteramount", (int?)value, (int)0, (int)100000, "TimeoutASingleMailboxConnectionAfterThisAmountOfMilliseconds"); }
}
///<summary>
///<para>Logical Name: timeoutmailboxconnection</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("timeoutmailboxconnection")]
public bool? TimeoutMailboxConnectionToExchange
{
	get { return this.GetPropertyValue<bool?>("timeoutmailboxconnection"); }
	set { this.SetPropertyValue<bool?>("timeoutmailboxconnection", value, "TimeoutMailboxConnectionToExchange"); }
}
///<summary>
///<para>Logical Name: usedefaulttenantid</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("usedefaulttenantid")]
public bool? UseDefaultTenantId
{
	get { return this.GetPropertyValue<bool?>("usedefaulttenantid"); }
	set { this.SetPropertyValue<bool?>("usedefaulttenantid", value, "UseDefaultTenantId"); }
}
///<summary>
///<para>Logical Name: incominguseimpersonation</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("incominguseimpersonation")]
public bool? UseImpersonationForIncomingEmail
{
	get { return this.GetPropertyValue<bool?>("incominguseimpersonation"); }
	set { this.SetPropertyValue<bool?>("incominguseimpersonation", value, "UseImpersonationForIncomingEmail"); }
}
///<summary>
///<para>Logical Name: outgoinguseimpersonation</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("outgoinguseimpersonation")]
public bool? UseImpersonationForOutgoingEmail
{
	get { return this.GetPropertyValue<bool?>("outgoinguseimpersonation"); }
	set { this.SetPropertyValue<bool?>("outgoinguseimpersonation", value, "UseImpersonationForOutgoingEmail"); }
}
///<summary>
///<para>Logical Name: usesamesettingsforoutgoingconnections</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("usesamesettingsforoutgoingconnections")]
public bool? UseSameSettingsForOutgoingConnection
{
	get { return this.GetPropertyValue<bool?>("usesamesettingsforoutgoingconnections"); }
	set { this.SetPropertyValue<bool?>("usesamesettingsforoutgoingconnections", value, "UseSameSettingsForOutgoingConnection"); }
}
///<summary>
///<para>Logical Name: incomingusessl</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("incomingusessl")]
public bool? UseSSLForIncomingEmail
{
	get { return this.GetPropertyValue<bool?>("incomingusessl"); }
	set { this.SetPropertyValue<bool?>("incomingusessl", value, "UseSSLForIncomingEmail"); }
}
///<summary>
///<para>Logical Name: outgoingusessl</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingusessl")]
public bool? UseSSLForOutgoingEmail
{
	get { return this.GetPropertyValue<bool?>("outgoingusessl"); }
	set { this.SetPropertyValue<bool?>("outgoingusessl", value, "UseSSLForOutgoingEmail"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}


        /// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: EmailServerProfile_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: EmailServerProfile_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: emailserverprofile_asyncoperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: emailserverprofile_asyncoperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: emailserverprofile_bulkdeletefailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: emailserverprofile_bulkdeletefailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: emailserverprofile_duplicatebaserecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: emailserverprofile_duplicatebaserecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: emailserverprofile_duplicatematchingrecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: emailserverprofile_duplicatematchingrecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Mailbox (Server Profile)</b></para>
/// <para>Schema Name: emailserverprofile_mailbox</para>
/// </summary>
public List<Mailbox> GetMailboxes_ServerProfile (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Mailbox>(Service, this.Id, "mailbox", "emailserverprofile", Columns); }
/// <summary>
/// <para><b>Mailbox (Server Profile)</b></para>
/// <para>Schema Name: emailserverprofile_mailbox</para>
/// </summary>
public List<Mailbox> GetMailboxes_ServerProfile (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Mailbox>(Service, this.Id, "mailbox", "emailserverprofile", Columns); }
/// <summary>
/// <para><b>Organization (Email Server Profile)</b></para>
/// <para>Schema Name: EmailServerProfile_Organization</para>
/// </summary>
public List<Organization> GetOrganizations_EmailServerProfile (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Organization>(Service, this.Id, "organization", "defaultemailserverprofileid", Columns); }
/// <summary>
/// <para><b>Organization (Email Server Profile)</b></para>
/// <para>Schema Name: EmailServerProfile_Organization</para>
/// </summary>
public List<Organization> GetOrganizations_EmailServerProfile (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Organization>(Service, this.Id, "organization", "defaultemailserverprofileid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: EmailServerProfile_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: EmailServerProfile_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Trace (Regarding)</b></para>
/// <para>Schema Name: tracelog_EmailServerProfile</para>
/// </summary>
public List<Trace> GetTraces_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Trace>(Service, this.Id, "tracelog", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Trace (Regarding)</b></para>
/// <para>Schema Name: tracelog_EmailServerProfile</para>
/// </summary>
public List<Trace> GetTraces_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Trace>(Service, this.Id, "tracelog", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>TraceRegarding (Regarding)</b></para>
/// <para>Schema Name: emailServerProfile_TraceRegardings</para>
/// </summary>
public List<TraceRegarding> GetTraceRegarding_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TraceRegarding>(Service, this.Id, "traceregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>TraceRegarding (Regarding)</b></para>
/// <para>Schema Name: emailServerProfile_TraceRegardings</para>
/// </summary>
public List<TraceRegarding> GetTraceRegarding_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TraceRegarding>(Service, this.Id, "traceregarding", "regardingobjectid", Columns); }


        

        

        public enum eEmailServerType
{
	///<summary><para>Exchange Server</para>
	///<para>Value = 0</para></summary>
	[Description("Exchange Server")]
	ExchangeServer = 0, 
	///<summary><para>Other (POP3/SMTP)</para>
	///<para>Value = 1</para></summary>
	[Description("Other (POP3/SMTP)")]
	Other_POP3_SMTP = 1, 
	///<summary><para>Exchange Server (Hybrid)</para>
	///<para>Value = 2</para></summary>
	[Description("Exchange Server (Hybrid)")]
	ExchangeServer_Hybrid = 2, 
	///<summary><para>Exchange Online (Hybrid)</para>
	///<para>Value = 3</para></summary>
	[Description("Exchange Online (Hybrid)")]
	ExchangeOnline_Hybrid = 3
}
public enum eExchangeVersion
{
	///<summary><para>Exchange 2007</para>
	///<para>Value = 0</para></summary>
	[Description("Exchange 2007")]
	Exchange2007 = 0, 
	///<summary><para>Exchange 2007 SP1</para>
	///<para>Value = 1</para></summary>
	[Description("Exchange 2007 SP1")]
	Exchange2007SP1 = 1, 
	///<summary><para>Exchange 2010</para>
	///<para>Value = 2</para></summary>
	[Description("Exchange 2010")]
	Exchange2010 = 2, 
	///<summary><para>Exchange 2010 SP1</para>
	///<para>Value = 3</para></summary>
	[Description("Exchange 2010 SP1")]
	Exchange2010SP1 = 3, 
	///<summary><para>Exchange 2010 SP2</para>
	///<para>Value = 4</para></summary>
	[Description("Exchange 2010 SP2")]
	Exchange2010SP2 = 4, 
	///<summary><para>Exchange 2013</para>
	///<para>Value = 5</para></summary>
	[Description("Exchange 2013")]
	Exchange2013 = 5
}
public enum eAuthenticationProtocol
{
	///<summary><para>Auto Detect</para>
	///<para>Value = 0</para></summary>
	[Description("Auto Detect")]
	AutoDetect = 0, 
	///<summary><para>Negotiate</para>
	///<para>Value = 1</para></summary>
	[Description("Negotiate")]
	Negotiate = 1, 
	///<summary><para>NTLM</para>
	///<para>Value = 2</para></summary>
	[Description("NTLM")]
	NTLM = 2, 
	///<summary><para>Basic</para>
	///<para>Value = 3</para></summary>
	[Description("Basic")]
	Basic = 3
}
public enum eCredentialRetrievalMethod
{
	///<summary><para>Credentials Specified by a User or Queue</para>
	///<para>Value = 0</para></summary>
	[Description("Credentials Specified by a User or Queue")]
	CredentialsSpecifiedByAUserOrQueue = 0, 
	///<summary><para>Credentials Specified in Email Server Profile</para>
	///<para>Value = 1</para></summary>
	[Description("Credentials Specified in Email Server Profile")]
	CredentialsSpecifiedInEmailServerProfile = 1, 
	///<summary><para>Server to Server Authentication</para>
	///<para>Value = 2</para></summary>
	[Description("Server to Server Authentication")]
	ServerToServerAuthentication = 2, 
	///<summary><para>Windows Integrated Authentication</para>
	///<para>Value = 3</para></summary>
	[Description("Windows Integrated Authentication")]
	WindowsIntegratedAuthentication = 3, 
	///<summary><para>Without Credentials (Anonymous)</para>
	///<para>Value = 4</para></summary>
	[Description("Without Credentials (Anonymous)")]
	WithoutCredentials_Anonymous = 4
}
public enum eSelectTheStatusOfTheTest
{
	///<summary><para>Failure</para>
	///<para>Value = 0</para></summary>
	[Description("Failure")]
	Failure = 0, 
	///<summary><para>Success</para>
	///<para>Value = 1</para></summary>
	[Description("Success")]
	Success = 1
}
public enum eSelectTheStatusOfTheTest2
{
	///<summary><para>Failure</para>
	///<para>Value = 0</para></summary>
	[Description("Failure")]
	Failure = 0, 
	///<summary><para>Success</para>
	///<para>Value = 1</para></summary>
	[Description("Success")]
	Success = 1, 
	///<summary><para>Warning</para>
	///<para>Value = 2</para></summary>
	[Description("Warning")]
	Warning = 2
}
public enum eSelectTheStatusOfTheTest3
{
	///<summary><para>Failure</para>
	///<para>Value = 0</para></summary>
	[Description("Failure")]
	Failure = 0, 
	///<summary><para>Success</para>
	///<para>Value = 1</para></summary>
	[Description("Success")]
	Success = 1
}
public enum eUseWindowsAuthenticationForOutgoing
{
	///<summary><para>Credentials Specified by a User or Queue</para>
	///<para>Value = 0</para></summary>
	[Description("Credentials Specified by a User or Queue")]
	CredentialsSpecifiedByAUserOrQueue = 0, 
	///<summary><para>Credentials Specified in Email Server Profile</para>
	///<para>Value = 1</para></summary>
	[Description("Credentials Specified in Email Server Profile")]
	CredentialsSpecifiedInEmailServerProfile = 1, 
	///<summary><para>Server to Server Authentication</para>
	///<para>Value = 2</para></summary>
	[Description("Server to Server Authentication")]
	ServerToServerAuthentication = 2, 
	///<summary><para>Windows Integrated Authentication</para>
	///<para>Value = 3</para></summary>
	[Description("Windows Integrated Authentication")]
	WindowsIntegratedAuthentication = 3, 
	///<summary><para>Without Credentials (Anonymous)</para>
	///<para>Value = 4</para></summary>
	[Description("Without Credentials (Anonymous)")]
	WithoutCredentials_Anonymous = 4
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>owningbusinessunitname</para>
	/// <para>owningbusinessunitname</para></summary>
	public const string OwningBusinessUnitName = "owningbusinessunitname";
	/// <summary><para>entityimage_timestamp</para>
	/// <para>entityimage_timestamp</para></summary>
	public const string EntityImage_Timestamp = "entityimage_timestamp";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>isincomingpasswordset</para>
	/// <para>isincomingpasswordset</para></summary>
	public const string IsIncomingPasswordSet = "isincomingpasswordset";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>outgoingpartnerapplicationname</para>
	/// <para>outgoingpartnerapplicationname</para></summary>
	public const string OutgoingPartnerApplicationName = "outgoingpartnerapplicationname";
	/// <summary><para>isoutgoingpasswordset</para>
	/// <para>isoutgoingpasswordset</para></summary>
	public const string IsOutgoingPasswordSet = "isoutgoingpasswordset";
	/// <summary><para>entityimage_url</para>
	/// <para>entityimage_url</para></summary>
	public const string EntityImage_URL = "entityimage_url";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>incomingpartnerapplicationname</para>
	/// <para>incomingpartnerapplicationname</para></summary>
	public const string IncomingPartnerApplicationName = "incomingpartnerapplicationname";
	/// <summary><para>Auto Discover Server Location</para>
	/// <para>useautodiscover</para></summary>
	public const string AutoDiscoverServerLocation = "useautodiscover";
	/// <summary><para>Auto Grant Delegate Access for Outgoing Email.</para>
	/// <para>outgoingautograntdelegateaccess</para></summary>
	public const string AutoGrantDelegateAccessForOutgoingEmail = "outgoingautograntdelegateaccess";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Default Email Server Location</para>
	/// <para>defaultserverlocation</para></summary>
	public const string DefaultEmailServerLocation = "defaultserverlocation";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Email Server Profile Owner's email address</para>
	/// <para>owneremailaddress</para></summary>
	public const string EmailServerProfileOwnersEmailAddress = "owneremailaddress";
	/// <summary><para>Email Server Type</para>
	/// <para>servertype</para></summary>
	public const string EmailServerType = "servertype";
	/// <summary><para>Email Server Type Name</para>
	/// <para>emailservertypename</para></summary>
	public const string EmailServerTypeName = "emailservertypename";
	/// <summary><para>EmailServerProfile</para>
	/// <para>emailserverprofileid</para></summary>
	public const string EmailServerProfileId = "emailserverprofileid";
	/// <summary><para>Encoding Code Page</para>
	/// <para>encodingcodepage</para></summary>
	public const string EncodingCodePage = "encodingcodepage";
	/// <summary><para>Entity Image Id</para>
	/// <para>entityimageid</para></summary>
	public const string EntityImageId = "entityimageid";
	/// <summary><para>Exchange Online Tenant Id</para>
	/// <para>exchangeonlinetenantid</para></summary>
	public const string ExchangeOnlineTenantId = "exchangeonlinetenantid";
	/// <summary><para>Exchange Version</para>
	/// <para>exchangeversion</para></summary>
	public const string ExchangeVersion = "exchangeversion";
	/// <summary><para>Incoming Authentication Protocol</para>
	/// <para>incomingauthenticationprotocol</para></summary>
	public const string IncomingAuthenticationProtocol = "incomingauthenticationprotocol";
	/// <summary><para>Incoming Email Credential Retrieval</para>
	/// <para>incomingcredentialretrieval</para></summary>
	public const string IncomingEmailCredentialRetrieval = "incomingcredentialretrieval";
	/// <summary><para>Incoming Email Password</para>
	/// <para>incomingpassword</para></summary>
	public const string IncomingEmailPassword = "incomingpassword";
	/// <summary><para>Incoming Email Port</para>
	/// <para>incomingportnumber</para></summary>
	public const string IncomingEmailPort = "incomingportnumber";
	/// <summary><para>Incoming Email Server Location</para>
	/// <para>incomingserverlocation</para></summary>
	public const string IncomingEmailServerLocation = "incomingserverlocation";
	/// <summary><para>Incoming Email User Name</para>
	/// <para>incomingusername</para></summary>
	public const string IncomingEmailUserName = "incomingusername";
	/// <summary><para>Incoming Partner Application</para>
	/// <para>incomingpartnerapplication</para></summary>
	public const string IncomingPartnerApplication = "incomingpartnerapplication";
	/// <summary><para>Last Dynamics 365 Message</para>
	/// <para>lastcrmmessage</para></summary>
	public const string LastDynamics365Message = "lastcrmmessage";
	/// <summary><para>Last Test Authorization Status</para>
	/// <para>lastauthorizationstatus</para></summary>
	public const string LastTestAuthorizationStatus = "lastauthorizationstatus";
	/// <summary><para>Last Test Execution Status</para>
	/// <para>lasttestexecutionstatus</para></summary>
	public const string LastTestExecutionStatus = "lasttestexecutionstatus";
	/// <summary><para>Last Test Request</para>
	/// <para>lasttestrequest</para></summary>
	public const string LastTestRequest = "lasttestrequest";
	/// <summary><para>Last Test Response</para>
	/// <para>lasttestresponse</para></summary>
	public const string LastTestResponse = "lasttestresponse";
	/// <summary><para>Last Test Time</para>
	/// <para>lastteststarttime</para></summary>
	public const string LastTestTime = "lastteststarttime";
	/// <summary><para>Last Test Time Taken</para>
	/// <para>lasttesttotalexecutiontime</para></summary>
	public const string LastTestTimeTaken = "lasttesttotalexecutiontime";
	/// <summary><para>Last Test Validation Status</para>
	/// <para>lasttestvalidationstatus</para></summary>
	public const string LastTestValidationStatus = "lasttestvalidationstatus";
	/// <summary><para>Maximum Concurrent Connections</para>
	/// <para>maxconcurrentconnections</para></summary>
	public const string MaximumConcurrentConnections = "maxconcurrentconnections";
	/// <summary><para>Minimum Polling Interval In Minutes</para>
	/// <para>minpollingintervalinminutes</para></summary>
	public const string MinimumPollingIntervalInMinutes = "minpollingintervalinminutes";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Move Undelivered Emails to the Undeliverable Folder</para>
	/// <para>moveundeliveredemails</para></summary>
	public const string MoveUndeliveredEmailsToTheUndeliverableFolder = "moveundeliveredemails";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization Id</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>Outgoing Authentication Protocol</para>
	/// <para>outgoingauthenticationprotocol</para></summary>
	public const string OutgoingAuthenticationProtocol = "outgoingauthenticationprotocol";
	/// <summary><para>Outgoing Email Credential Retrieval</para>
	/// <para>outgoingcredentialretrieval</para></summary>
	public const string OutgoingEmailCredentialRetrieval = "outgoingcredentialretrieval";
	/// <summary><para>Outgoing Email Password</para>
	/// <para>outgoingpassword</para></summary>
	public const string OutgoingEmailPassword = "outgoingpassword";
	/// <summary><para>Outgoing Email Port</para>
	/// <para>outgoingportnumber</para></summary>
	public const string OutgoingEmailPort = "outgoingportnumber";
	/// <summary><para>Outgoing Email Server Location</para>
	/// <para>outgoingserverlocation</para></summary>
	public const string OutgoingEmailServerLocation = "outgoingserverlocation";
	/// <summary><para>Outgoing Email User Name</para>
	/// <para>outgoingusername</para></summary>
	public const string OutgoingEmailUserName = "outgoingusername";
	/// <summary><para>Outgoing Partner Application</para>
	/// <para>outgoingpartnerapplication</para></summary>
	public const string OutgoingPartnerApplication = "outgoingpartnerapplication";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Process Emails Received After</para>
	/// <para>processemailsreceivedafter</para></summary>
	public const string ProcessEmailsReceivedAfter = "processemailsreceivedafter";
	/// <summary><para>Send an alert email to the owner of the email server profile reporting on major events</para>
	/// <para>sendemailalert</para></summary>
	public const string SendAnAlertEmailToTheOwnerOfTheEmailServerProfileReportingOnMajorEvents = "sendemailalert";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Timeout a Single Mailbox Connection After this Amount of Milliseconds</para>
	/// <para>timeoutmailboxconnectionafteramount</para></summary>
	public const string TimeoutASingleMailboxConnectionAfterThisAmountOfMilliseconds = "timeoutmailboxconnectionafteramount";
	/// <summary><para>Timeout Mailbox Connection to Exchange</para>
	/// <para>timeoutmailboxconnection</para></summary>
	public const string TimeoutMailboxConnectionToExchange = "timeoutmailboxconnection";
	/// <summary><para>Use Default Tenant Id</para>
	/// <para>usedefaulttenantid</para></summary>
	public const string UseDefaultTenantId = "usedefaulttenantid";
	/// <summary><para>Use Impersonation for Incoming Email</para>
	/// <para>incominguseimpersonation</para></summary>
	public const string UseImpersonationForIncomingEmail = "incominguseimpersonation";
	/// <summary><para>Use Impersonation for Outgoing Email</para>
	/// <para>outgoinguseimpersonation</para></summary>
	public const string UseImpersonationForOutgoingEmail = "outgoinguseimpersonation";
	/// <summary><para>Use Same Settings for Outgoing Connection</para>
	/// <para>usesamesettingsforoutgoingconnections</para></summary>
	public const string UseSameSettingsForOutgoingConnection = "usesamesettingsforoutgoingconnections";
	/// <summary><para>Use SSL for Incoming Email</para>
	/// <para>incomingusessl</para></summary>
	public const string UseSSLForIncomingEmail = "incomingusessl";
	/// <summary><para>Use SSL for Outgoing Email</para>
	/// <para>outgoingusessl</para></summary>
	public const string UseSSLForOutgoingEmail = "outgoingusessl";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
}

    }
}
