// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("contract")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Contract : BaseProxyClass
    {
        public new const string LogicalName = "contract";
        public const int ObjectTypeCode = 1010;
        public const string PrimaryIdAttribute = "contractid";
        public const string PrimaryNameAttribute = "title";
        
        static Contract()
        {
            BaseProxyClass.RegisterProxyType(typeof(Contract), "contract");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Contract() : base(new Entity("contract")) { }
        public Contract(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Contract>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: originatingcontractname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("originatingcontractname")]
public string OriginatingContractName
{
	get { return this.GetPropertyValue<string>("originatingcontractname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: entityimage_timestamp</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_timestamp")]
public int? EntityImage_Timestamp
{
	get { return this.GetPropertyValue<int?>("entityimage_timestamp"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: contactidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contactidname")]
public string ContactIdName
{
	get { return this.GetPropertyValue<string>("contactidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: billingaccountidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("billingaccountidname")]
public string BillingAccountIdName
{
	get { return this.GetPropertyValue<string>("billingaccountidname"); }
}
///<summary>
///<para>Logical Name: billingaccountidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("billingaccountidyominame")]
public string BillingAccountIdYomiName
{
	get { return this.GetPropertyValue<string>("billingaccountidyominame"); }
}
///<summary>
///<para>Logical Name: customeridyominame</para>
///<para>Max Length: 450 characters</para>
///</summary>
[AttributeLogicalNameAttribute("customeridyominame")]
public string CustomerIdYomiName
{
	get { return this.GetPropertyValue<string>("customeridyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: billingcontactidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("billingcontactidyominame")]
public string BillingContactIdYomiName
{
	get { return this.GetPropertyValue<string>("billingcontactidyominame"); }
}
///<summary>
///<para>Logical Name: contactidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contactidyominame")]
public string ContactIdYomiName
{
	get { return this.GetPropertyValue<string>("contactidyominame"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: customeridname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("customeridname")]
public string CustomerIdName
{
	get { return this.GetPropertyValue<string>("customeridname"); }
}
///<summary>
///<para>Logical Name: billingcustomeridname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("billingcustomeridname")]
public string BillingCustomerIdName
{
	get { return this.GetPropertyValue<string>("billingcustomeridname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: billtoaddressname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("billtoaddressname")]
public string BillToAddressName
{
	get { return this.GetPropertyValue<string>("billtoaddressname"); }
}
///<summary>
///<para>Logical Name: accountidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("accountidyominame")]
public string AccountIdYomiName
{
	get { return this.GetPropertyValue<string>("accountidyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: entityimage_url</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_url")]
public string EntityImage_URL
{
	get { return this.GetPropertyValue<string>("entityimage_url"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: accountidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("accountidname")]
public string AccountIdName
{
	get { return this.GetPropertyValue<string>("accountidname"); }
}
///<summary>
///<para>Logical Name: billingcustomeridyominame</para>
///<para>Max Length: 450 characters</para>
///</summary>
[AttributeLogicalNameAttribute("billingcustomeridyominame")]
public string BillingCustomerIdYomiName
{
	get { return this.GetPropertyValue<string>("billingcustomeridyominame"); }
}
///<summary>
///<para>Logical Name: serviceaddressname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("serviceaddressname")]
public string ServiceAddressName
{
	get { return this.GetPropertyValue<string>("serviceaddressname"); }
}
///<summary>
///<para>Logical Name: contracttemplateidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contracttemplateidname")]
public string ContractTemplateIdName
{
	get { return this.GetPropertyValue<string>("contracttemplateidname"); }
}
///<summary>
///<para>Logical Name: billingcontactidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("billingcontactidname")]
public string BillingContactIdName
{
	get { return this.GetPropertyValue<string>("billingcontactidname"); }
}
///<summary>
///<para>Logical Name: accountid</para>
///</summary>
[AttributeLogicalNameAttribute("accountid")]
public EntityReference Account
{
	get { return this.GetPropertyValue<EntityReference>("accountid"); }
}
/// <summary>
///Logical Name: allotmenttypecode
/// </summary>
[AttributeLogicalNameAttribute("allotmenttypecode")]
public eAllotmentType? AllotmentType
{
	get
	{
		if (AllotmentType_OptionSetValue != null) { return (eAllotmentType)AllotmentType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AllotmentType_OptionSetValue = new OptionSetValue((int)value); }
		else this.AllotmentType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: allotmenttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("allotmenttypecode")]
public OptionSetValue AllotmentType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("allotmenttypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("allotmenttypecode", value, "AllotmentType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AllotmentType_Text(IOrganizationService Service)
{
	return this.AllotmentType_OptionSetValue.GetOptionSetText(Service, this, "allotmenttypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AllotmentType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AllotmentType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: billtoaddress</para>
///</summary>
[AttributeLogicalNameAttribute("billtoaddress")]
public EntityReference BillToAddress
{
	get { return this.GetPropertyValue<EntityReference>("billtoaddress"); }
	set { this.SetPropertyValue<EntityReference>("billtoaddress", value, "BillToAddress"); }
}
///<summary>
///<para>Logical Name: billingcustomerid</para>
///</summary>
[AttributeLogicalNameAttribute("billingcustomerid")]
public EntityReference BillToCustomer
{
	get { return this.GetPropertyValue<EntityReference>("billingcustomerid"); }
	set { this.SetPropertyValue<EntityReference>("billingcustomerid", value, "BillToCustomer"); }
}
///<summary>
///<para>Logical Name: billingcustomeridtype</para>
///</summary>
[AttributeLogicalNameAttribute("billingcustomeridtype")]
public string BillToCustomerType
{
	get { return this.GetPropertyValue<string>("billingcustomeridtype"); }
	set { this.SetPropertyValue<string>("billingcustomeridtype", value, "BillToCustomerType"); }
}
///<summary>
///<para>Logical Name: billingaccountid</para>
///</summary>
[AttributeLogicalNameAttribute("billingaccountid")]
public EntityReference BillingAccount
{
	get { return this.GetPropertyValue<EntityReference>("billingaccountid"); }
}
///<summary>
///<para>Logical Name: billingcontactid</para>
///</summary>
[AttributeLogicalNameAttribute("billingcontactid")]
public EntityReference BillingContact
{
	get { return this.GetPropertyValue<EntityReference>("billingcontactid"); }
}
///<summary>
///<para>Logical Name: billingendon</para>
///</summary>
[AttributeLogicalNameAttribute("billingendon")]
public DateTime? BillingEndDate
{
	get { return this.GetPropertyValue<DateTime?>("billingendon"); }
	set { this.SetPropertyValue<DateTime?>("billingendon", value, "BillingEndDate"); }
}
/// <summary>
///Logical Name: billingfrequencycode
/// </summary>
[AttributeLogicalNameAttribute("billingfrequencycode")]
public eBillingFrequency? BillingFrequency
{
	get
	{
		if (BillingFrequency_OptionSetValue != null) { return (eBillingFrequency)BillingFrequency_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.BillingFrequency_OptionSetValue = new OptionSetValue((int)value); }
		else this.BillingFrequency_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: billingfrequencycode</para>
///</summary>
[AttributeLogicalNameAttribute("billingfrequencycode")]
public OptionSetValue BillingFrequency_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("billingfrequencycode"); }
	set { this.SetPropertyValue<OptionSetValue>("billingfrequencycode", value, "BillingFrequency_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string BillingFrequency_Text(IOrganizationService Service)
{
	return this.BillingFrequency_OptionSetValue.GetOptionSetText(Service, this, "billingfrequencycode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string BillingFrequency_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.BillingFrequency_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: billingstarton</para>
///</summary>
[AttributeLogicalNameAttribute("billingstarton")]
public DateTime? BillingStartDate
{
	get { return this.GetPropertyValue<DateTime?>("billingstarton"); }
	set { this.SetPropertyValue<DateTime?>("billingstarton", value, "BillingStartDate"); }
}
///<summary>
///<para>Logical Name: cancelon</para>
///</summary>
[AttributeLogicalNameAttribute("cancelon")]
public DateTime? CancellationDate
{
	get { return this.GetPropertyValue<DateTime?>("cancelon"); }
}
///<summary>
///<para>Logical Name: contactid</para>
///</summary>
[AttributeLogicalNameAttribute("contactid")]
public EntityReference Contact
{
	get { return this.GetPropertyValue<EntityReference>("contactid"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: contractid</para>
///</summary>
[AttributeLogicalNameAttribute("contractid")]
public Guid ContractId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: serviceaddress</para>
///</summary>
[AttributeLogicalNameAttribute("serviceaddress")]
public EntityReference ContractAddress
{
	get { return this.GetPropertyValue<EntityReference>("serviceaddress"); }
	set { this.SetPropertyValue<EntityReference>("serviceaddress", value, "ContractAddress"); }
}
///<summary>
///<para>Logical Name: expireson</para>
///</summary>
[AttributeLogicalNameAttribute("expireson")]
public DateTime? ContractEndDate
{
	get { return this.GetPropertyValue<DateTime?>("expireson"); }
	set { this.SetPropertyValue<DateTime?>("expireson", value, "ContractEndDate"); }
}
///<summary>
///<para>Logical Name: contractnumber</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contractnumber")]
public string ContractID
{
	get { return this.GetPropertyValue<string>("contractnumber"); }
	set { this.SetPropertyValue("contractnumber", value, 100, "ContractID"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string ContractName
{
	get { return this.GetPropertyValue<string>("title"); }
	set { this.SetPropertyValue("title", value, 100, "ContractName"); }
}
///<summary>
///<para>Logical Name: activeon</para>
///</summary>
[AttributeLogicalNameAttribute("activeon")]
public DateTime? ContractStartDate
{
	get { return this.GetPropertyValue<DateTime?>("activeon"); }
	set { this.SetPropertyValue<DateTime?>("activeon", value, "ContractStartDate"); }
}
///<summary>
///<para>Logical Name: contracttemplateid</para>
///</summary>
[AttributeLogicalNameAttribute("contracttemplateid")]
public EntityReference ContractTemplate
{
	get { return this.GetPropertyValue<EntityReference>("contracttemplateid"); }
	set { this.SetPropertyValue<EntityReference>("contracttemplateid", value, "ContractTemplate"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: customerid</para>
///</summary>
[AttributeLogicalNameAttribute("customerid")]
public EntityReference Customer
{
	get { return this.GetPropertyValue<EntityReference>("customerid"); }
	set { this.SetPropertyValue<EntityReference>("customerid", value, "Customer"); }
}
///<summary>
///<para>Logical Name: customeridtype</para>
///</summary>
[AttributeLogicalNameAttribute("customeridtype")]
public string CustomerType
{
	get { return this.GetPropertyValue<string>("customeridtype"); }
	set { this.SetPropertyValue<string>("customeridtype", value, "CustomerType"); }
}
///<summary>
///<para>Logical Name: contractlanguage</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contractlanguage")]
public string Description
{
	get { return this.GetPropertyValue<string>("contractlanguage"); }
	set { this.SetPropertyValue("contractlanguage", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: usediscountaspercentage</para>
///<para>True = Percentage</para>
///<para>False = Amount</para>
///</summary>
[AttributeLogicalNameAttribute("usediscountaspercentage")]
public bool? Discount
{
	get { return this.GetPropertyValue<bool?>("usediscountaspercentage"); }
	set { this.SetPropertyValue<bool?>("usediscountaspercentage", value, "Discount"); }
}
///<summary>
///<para>Logical Name: duration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("duration")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("duration"); }
}
///<summary>
///<para>Logical Name: entityimageid</para>
///</summary>
[AttributeLogicalNameAttribute("entityimageid")]
public Guid EntityImageId
{
	get { return this.GetPropertyValue<Guid>("entityimageid"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: netprice</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? NetPrice
{
	get
	{
		if (NetPriceMoney != null) { return NetPriceMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: netprice</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("netprice")]
public Money NetPriceMoney
{
	get { return this.GetPropertyValue<Money>("netprice"); }
}
///<summary>
///<para>Logical Name: netprice_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? NetPrice_Base
{
	get
	{
		if (NetPrice_BaseMoney != null) { return NetPrice_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: netprice_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("netprice_base")]
public Money NetPrice_BaseMoney
{
	get { return this.GetPropertyValue<Money>("netprice_base"); }
}
///<summary>
///<para>Logical Name: originatingcontract</para>
///</summary>
[AttributeLogicalNameAttribute("originatingcontract")]
public EntityReference OriginatingContract
{
	get { return this.GetPropertyValue<EntityReference>("originatingcontract"); }
	set { this.SetPropertyValue<EntityReference>("originatingcontract", value, "OriginatingContract"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
/// <summary>
///Logical Name: contractservicelevelcode
/// </summary>
[AttributeLogicalNameAttribute("contractservicelevelcode")]
public eServiceLevel? ServiceLevel
{
	get
	{
		if (ServiceLevel_OptionSetValue != null) { return (eServiceLevel)ServiceLevel_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ServiceLevel_OptionSetValue = new OptionSetValue((int)value); }
		else this.ServiceLevel_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: contractservicelevelcode</para>
///</summary>
[AttributeLogicalNameAttribute("contractservicelevelcode")]
public OptionSetValue ServiceLevel_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("contractservicelevelcode"); }
	set { this.SetPropertyValue<OptionSetValue>("contractservicelevelcode", value, "ServiceLevel_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ServiceLevel_Text(IOrganizationService Service)
{
	return this.ServiceLevel_OptionSetValue.GetOptionSetText(Service, this, "contractservicelevelcode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ServiceLevel_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ServiceLevel_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: effectivitycalendar</para>
///<para>Max Length: 168 characters</para>
///</summary>
[AttributeLogicalNameAttribute("effectivitycalendar")]
public string SupportCalendar
{
	get { return this.GetPropertyValue<string>("effectivitycalendar"); }
	set { this.SetPropertyValue("effectivitycalendar", value, 168, "SupportCalendar"); }
}
///<summary>
///<para>Logical Name: contracttemplateabbreviation</para>
///<para>Max Length: 20 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contracttemplateabbreviation")]
public string TemplateAbbreviation
{
	get { return this.GetPropertyValue<string>("contracttemplateabbreviation"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: totaldiscount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalDiscount
{
	get
	{
		if (TotalDiscountMoney != null) { return TotalDiscountMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totaldiscount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("totaldiscount")]
public Money TotalDiscountMoney
{
	get { return this.GetPropertyValue<Money>("totaldiscount"); }
}
///<summary>
///<para>Logical Name: totaldiscount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? TotalDiscount_Base
{
	get
	{
		if (TotalDiscount_BaseMoney != null) { return TotalDiscount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totaldiscount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("totaldiscount_base")]
public Money TotalDiscount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("totaldiscount_base"); }
}
///<summary>
///<para>Logical Name: totalprice</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalPrice
{
	get
	{
		if (TotalPriceMoney != null) { return TotalPriceMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totalprice</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("totalprice")]
public Money TotalPriceMoney
{
	get { return this.GetPropertyValue<Money>("totalprice"); }
}
///<summary>
///<para>Logical Name: totalprice_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? TotalPrice_Base
{
	get
	{
		if (TotalPrice_BaseMoney != null) { return TotalPrice_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totalprice_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("totalprice_base")]
public Money TotalPrice_BaseMoney
{
	get { return this.GetPropertyValue<Money>("totalprice_base"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>ActivityParty (Party)</b></para>
/// <para>Schema Name: contract_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Party (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>ActivityParty (Party)</b></para>
/// <para>Schema Name: contract_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Party (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: Contract_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: Contract_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Contract_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Contract_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: Contract_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: Contract_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Contract_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Contract_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Contract_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Contract_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: contract_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: contract_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: contract_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: contract_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Contract (Originating Contract)</b></para>
/// <para>Schema Name: contract_originating_contract</para>
/// </summary>
public List<Contract> GetContracts_OriginatingContract (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contract>(Service, this.Id, "contract", "originatingcontract", Columns); }
/// <summary>
/// <para><b>Contract (Originating Contract)</b></para>
/// <para>Schema Name: contract_originating_contract</para>
/// </summary>
public List<Contract> GetContracts_OriginatingContract (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contract>(Service, this.Id, "contract", "originatingcontract", Columns); }
/// <summary>
/// <para><b>ContractLine (Contract)</b></para>
/// <para>Schema Name: contract_line_items</para>
/// </summary>
public List<ContractLine> GetContractLines_Contract (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ContractLine>(Service, this.Id, "contractdetail", "contractid", Columns); }
/// <summary>
/// <para><b>ContractLine (Contract)</b></para>
/// <para>Schema Name: contract_line_items</para>
/// </summary>
public List<ContractLine> GetContractLines_Contract (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ContractLine>(Service, this.Id, "contractdetail", "contractid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Contract_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Contract_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Contract_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Contract_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: Contract_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: Contract_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: Contract_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: Contract_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>@Case (Contract)</b></para>
/// <para>Schema Name: contract_cases</para>
/// </summary>
public List<@Case> GetCases_Contract (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<@Case>(Service, this.Id, "incident", "contractid", Columns); }
/// <summary>
/// <para><b>@Case (Contract)</b></para>
/// <para>Schema Name: contract_cases</para>
/// </summary>
public List<@Case> GetCases_Contract (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<@Case>(Service, this.Id, "incident", "contractid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: Contract_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: Contract_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: Contract_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: Contract_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: contract_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: contract_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: contract_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: contract_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: Contract_Phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: Contract_Phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: contract_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: contract_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Contract_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Contract_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: Contract_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: Contract_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Regarding)</b></para>
/// <para>Schema Name: Contract_ServiceAppointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Regarding)</b></para>
/// <para>Schema Name: Contract_ServiceAppointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SocialActivity (Regarding)</b></para>
/// <para>Schema Name: Contract_SocialActivities</para>
/// </summary>
public List<SocialActivity> GetSocialActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialActivity>(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SocialActivity (Regarding)</b></para>
/// <para>Schema Name: Contract_SocialActivities</para>
/// </summary>
public List<SocialActivity> GetSocialActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialActivity>(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Contract_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Contract_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: Contract_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: Contract_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_contract</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_contract</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>Contact</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: servicecontractcontacts_association</para>
/// </summary>
public List<Contact> GetContacts (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Contact>(Service, this, "contract", "contractid", "contact", "contactid", "servicecontractcontacts", "contractid", "contactid", Columns); }
public List<Contact> GetContacts (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Contact>(Service, this, "contract", "contractid", "contact", "contactid", "servicecontractcontacts", "contractid", "contactid", Columns); }
public void RelateContacts (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "servicecontractcontacts_association", Items); }
public void RelateContacts (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "servicecontractcontacts_association", Items); }
public void UnRelateContacts (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "servicecontractcontacts_association", Items); }
public void UnRelateContacts (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "servicecontractcontacts_association", Items); }


        

        public enum eAllotmentType
{
	///<summary><para>Number of Cases</para>
	///<para>Value = 1</para></summary>
	[Description("Number of Cases")]
	NumberOfCases = 1, 
	///<summary><para>Time</para>
	///<para>Value = 2</para></summary>
	[Description("Time")]
	Time = 2, 
	///<summary><para>Coverage Dates</para>
	///<para>Value = 3</para></summary>
	[Description("Coverage Dates")]
	CoverageDates = 3
}
public enum eBillingFrequency
{
	///<summary><para>Monthly</para>
	///<para>Value = 1</para></summary>
	[Description("Monthly")]
	Monthly = 1, 
	///<summary><para>Bimonthly</para>
	///<para>Value = 2</para></summary>
	[Description("Bimonthly")]
	Bimonthly = 2, 
	///<summary><para>Quarterly</para>
	///<para>Value = 3</para></summary>
	[Description("Quarterly")]
	Quarterly = 3, 
	///<summary><para>Semiannually</para>
	///<para>Value = 4</para></summary>
	[Description("Semiannually")]
	Semiannually = 4, 
	///<summary><para>Annually</para>
	///<para>Value = 5</para></summary>
	[Description("Annually")]
	Annually = 5
}
public enum eServiceLevel
{
	///<summary><para>Gold</para>
	///<para>Value = 1</para></summary>
	[Description("Gold")]
	Gold = 1, 
	///<summary><para>Silver</para>
	///<para>Value = 2</para></summary>
	[Description("Silver")]
	Silver = 2, 
	///<summary><para>Bronze</para>
	///<para>Value = 3</para></summary>
	[Description("Bronze")]
	Bronze = 3
}
public enum eStatus
{
	///<summary><para>Draft</para>
	///<para>Value = 0</para></summary>
	[Description("Draft")]
	Draft = 0, 
	///<summary><para>Invoiced</para>
	///<para>Value = 1</para></summary>
	[Description("Invoiced")]
	Invoiced = 1, 
	///<summary><para>Active</para>
	///<para>Value = 2</para></summary>
	[Description("Active")]
	Active = 2, 
	///<summary><para>On Hold</para>
	///<para>Value = 3</para></summary>
	[Description("On Hold")]
	OnHold = 3, 
	///<summary><para>Canceled</para>
	///<para>Value = 4</para></summary>
	[Description("Canceled")]
	Canceled = 4, 
	///<summary><para>Expired</para>
	///<para>Value = 5</para></summary>
	[Description("Expired")]
	Expired = 5
}
public enum eStatusReason
{
	///<summary><para>Draft</para>
	///<para>Value = 1</para></summary>
	[Description("Draft")]
	Draft_Draft = 1, 
	///<summary><para>Invoiced</para>
	///<para>Value = 2</para></summary>
	[Description("Invoiced")]
	Invoiced_Invoiced = 2, 
	///<summary><para>Active</para>
	///<para>Value = 3</para></summary>
	[Description("Active")]
	Active_Active = 3, 
	///<summary><para>On Hold</para>
	///<para>Value = 4</para></summary>
	[Description("On Hold")]
	OnHold_OnHold = 4, 
	///<summary><para>Canceled</para>
	///<para>Value = 5</para></summary>
	[Description("Canceled")]
	Canceled_Canceled = 5, 
	///<summary><para>Expired</para>
	///<para>Value = 6</para></summary>
	[Description("Expired")]
	Expired_Expired = 6
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>originatingcontractname</para>
	/// <para>originatingcontractname</para></summary>
	public const string OriginatingContractName = "originatingcontractname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>entityimage_timestamp</para>
	/// <para>entityimage_timestamp</para></summary>
	public const string EntityImage_Timestamp = "entityimage_timestamp";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>contactidname</para>
	/// <para>contactidname</para></summary>
	public const string ContactIdName = "contactidname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>billingaccountidname</para>
	/// <para>billingaccountidname</para></summary>
	public const string BillingAccountIdName = "billingaccountidname";
	/// <summary><para>billingaccountidyominame</para>
	/// <para>billingaccountidyominame</para></summary>
	public const string BillingAccountIdYomiName = "billingaccountidyominame";
	/// <summary><para>customeridyominame</para>
	/// <para>customeridyominame</para></summary>
	public const string CustomerIdYomiName = "customeridyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>billingcontactidyominame</para>
	/// <para>billingcontactidyominame</para></summary>
	public const string BillingContactIdYomiName = "billingcontactidyominame";
	/// <summary><para>contactidyominame</para>
	/// <para>contactidyominame</para></summary>
	public const string ContactIdYomiName = "contactidyominame";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>customeridname</para>
	/// <para>customeridname</para></summary>
	public const string CustomerIdName = "customeridname";
	/// <summary><para>billingcustomeridname</para>
	/// <para>billingcustomeridname</para></summary>
	public const string BillingCustomerIdName = "billingcustomeridname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>billtoaddressname</para>
	/// <para>billtoaddressname</para></summary>
	public const string BillToAddressName = "billtoaddressname";
	/// <summary><para>accountidyominame</para>
	/// <para>accountidyominame</para></summary>
	public const string AccountIdYomiName = "accountidyominame";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>entityimage_url</para>
	/// <para>entityimage_url</para></summary>
	public const string EntityImage_URL = "entityimage_url";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>accountidname</para>
	/// <para>accountidname</para></summary>
	public const string AccountIdName = "accountidname";
	/// <summary><para>billingcustomeridyominame</para>
	/// <para>billingcustomeridyominame</para></summary>
	public const string BillingCustomerIdYomiName = "billingcustomeridyominame";
	/// <summary><para>serviceaddressname</para>
	/// <para>serviceaddressname</para></summary>
	public const string ServiceAddressName = "serviceaddressname";
	/// <summary><para>contracttemplateidname</para>
	/// <para>contracttemplateidname</para></summary>
	public const string ContractTemplateIdName = "contracttemplateidname";
	/// <summary><para>billingcontactidname</para>
	/// <para>billingcontactidname</para></summary>
	public const string BillingContactIdName = "billingcontactidname";
	/// <summary><para>Account</para>
	/// <para>accountid</para></summary>
	public const string Account = "accountid";
	/// <summary><para>Allotment Type</para>
	/// <para>allotmenttypecode</para></summary>
	public const string AllotmentType = "allotmenttypecode";
	/// <summary><para>Bill To Address</para>
	/// <para>billtoaddress</para></summary>
	public const string BillToAddress = "billtoaddress";
	/// <summary><para>Bill To Customer</para>
	/// <para>billingcustomerid</para></summary>
	public const string BillToCustomer = "billingcustomerid";
	/// <summary><para>Bill To Customer Type</para>
	/// <para>billingcustomeridtype</para></summary>
	public const string BillToCustomerType = "billingcustomeridtype";
	/// <summary><para>Billing Account</para>
	/// <para>billingaccountid</para></summary>
	public const string BillingAccount = "billingaccountid";
	/// <summary><para>Billing Contact</para>
	/// <para>billingcontactid</para></summary>
	public const string BillingContact = "billingcontactid";
	/// <summary><para>Billing End Date</para>
	/// <para>billingendon</para></summary>
	public const string BillingEndDate = "billingendon";
	/// <summary><para>Billing Frequency</para>
	/// <para>billingfrequencycode</para></summary>
	public const string BillingFrequency = "billingfrequencycode";
	/// <summary><para>Billing Start Date</para>
	/// <para>billingstarton</para></summary>
	public const string BillingStartDate = "billingstarton";
	/// <summary><para>Cancellation Date</para>
	/// <para>cancelon</para></summary>
	public const string CancellationDate = "cancelon";
	/// <summary><para>Contact</para>
	/// <para>contactid</para></summary>
	public const string Contact = "contactid";
	/// <summary><para>Contract</para>
	/// <para>contractid</para></summary>
	public const string ContractId = "contractid";
	/// <summary><para>Contract Address</para>
	/// <para>serviceaddress</para></summary>
	public const string ContractAddress = "serviceaddress";
	/// <summary><para>Contract End Date</para>
	/// <para>expireson</para></summary>
	public const string ContractEndDate = "expireson";
	/// <summary><para>Contract ID</para>
	/// <para>contractnumber</para></summary>
	public const string ContractID = "contractnumber";
	/// <summary><para>Contract Name</para>
	/// <para>title</para></summary>
	public const string ContractName = "title";
	/// <summary><para>Contract Start Date</para>
	/// <para>activeon</para></summary>
	public const string ContractStartDate = "activeon";
	/// <summary><para>Contract Template</para>
	/// <para>contracttemplateid</para></summary>
	public const string ContractTemplate = "contracttemplateid";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Customer</para>
	/// <para>customerid</para></summary>
	public const string Customer = "customerid";
	/// <summary><para>Customer Type</para>
	/// <para>customeridtype</para></summary>
	public const string CustomerType = "customeridtype";
	/// <summary><para>Description</para>
	/// <para>contractlanguage</para></summary>
	public const string Description = "contractlanguage";
	/// <summary><para>Discount</para>
	/// <para>usediscountaspercentage</para></summary>
	public const string Discount = "usediscountaspercentage";
	/// <summary><para>Duration</para>
	/// <para>duration</para></summary>
	public const string Duration = "duration";
	/// <summary><para>Entity Image Id</para>
	/// <para>entityimageid</para></summary>
	public const string EntityImageId = "entityimageid";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Net Price</para>
	/// <para>netprice</para></summary>
	public const string NetPrice = "netprice";
	/// <summary><para>Net Price (Base)</para>
	/// <para>netprice_base</para></summary>
	public const string NetPrice_Base = "netprice_base";
	/// <summary><para>Originating Contract</para>
	/// <para>originatingcontract</para></summary>
	public const string OriginatingContract = "originatingcontract";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Service Level</para>
	/// <para>contractservicelevelcode</para></summary>
	public const string ServiceLevel = "contractservicelevelcode";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Support Calendar</para>
	/// <para>effectivitycalendar</para></summary>
	public const string SupportCalendar = "effectivitycalendar";
	/// <summary><para>Template Abbreviation</para>
	/// <para>contracttemplateabbreviation</para></summary>
	public const string TemplateAbbreviation = "contracttemplateabbreviation";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Total Discount</para>
	/// <para>totaldiscount</para></summary>
	public const string TotalDiscount = "totaldiscount";
	/// <summary><para>Total Discount (Base)</para>
	/// <para>totaldiscount_base</para></summary>
	public const string TotalDiscount_Base = "totaldiscount_base";
	/// <summary><para>Total Price</para>
	/// <para>totalprice</para></summary>
	public const string TotalPrice = "totalprice";
	/// <summary><para>Total Price (Base)</para>
	/// <para>totalprice_base</para></summary>
	public const string TotalPrice_Base = "totalprice_base";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
