// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("activityparty")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ActivityParty : BaseProxyClass
    {
        public new const string LogicalName = "activityparty";
        public const int ObjectTypeCode = 135;
        public const string PrimaryIdAttribute = "activitypartyid";
        public const string PrimaryNameAttribute = "partyidname";
        
        static ActivityParty()
        {
            BaseProxyClass.RegisterProxyType(typeof(ActivityParty), "activityparty");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ActivityParty() : base(new Entity("activityparty")) { }
        public ActivityParty(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ActivityParty>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public Guid OwningUser
{
	get { return this.GetPropertyValue<Guid>("owninguser"); }
}
///<summary>
///<para>Logical Name: partyidname</para>
///<para>Max Length: 400 characters</para>
///</summary>
[AttributeLogicalNameAttribute("partyidname")]
public string PartyIdName
{
	get { return this.GetPropertyValue<string>("partyidname"); }
	set { this.SetPropertyValue("partyidname", value, 400, "PartyIdName"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public Guid OwningBusinessUnit
{
	get { return this.GetPropertyValue<Guid>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
}
///<summary>
///<para>Logical Name: resourcespecidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("resourcespecidname")]
public string ResourceSpecIdName
{
	get { return this.GetPropertyValue<string>("resourcespecidname"); }
}
///<summary>
///<para>Logical Name: partyobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("partyobjecttypecode")]
public string PartyObjectTypeCode
{
	get { return this.GetPropertyValue<string>("partyobjecttypecode"); }
	set { this.SetPropertyValue<string>("partyobjecttypecode", value, "PartyObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: activityid</para>
///</summary>
[AttributeLogicalNameAttribute("activityid")]
public EntityReference Activity
{
	get { return this.GetPropertyValue<EntityReference>("activityid"); }
	set { this.SetPropertyValue<EntityReference>("activityid", value, "Activity"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: activitypartyid</para>
///</summary>
[AttributeLogicalNameAttribute("activitypartyid")]
public Guid ActivityPartyId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: addressused</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("addressused")]
public string Address
{
	get { return this.GetPropertyValue<string>("addressused"); }
	set { this.SetPropertyValue("addressused", value, 200, "Address"); }
}
/// <summary>
///Logical Name: instancetypecode
/// </summary>
[AttributeLogicalNameAttribute("instancetypecode")]
public eAppointmentType? AppointmentType
{
	get
	{
		if (AppointmentType_OptionSetValue != null) { return (eAppointmentType)AppointmentType_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: instancetypecode</para>
///</summary>
[AttributeLogicalNameAttribute("instancetypecode")]
public OptionSetValue AppointmentType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("instancetypecode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AppointmentType_Text(IOrganizationService Service)
{
	return this.AppointmentType_OptionSetValue.GetOptionSetText(Service, this, "instancetypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AppointmentType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AppointmentType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: donotemail</para>
///<para>True = Do Not Allow</para>
///<para>False = Allow</para>
///</summary>
[AttributeLogicalNameAttribute("donotemail")]
public bool? DoNotAllowEmails
{
	get { return this.GetPropertyValue<bool?>("donotemail"); }
}
///<summary>
///<para>Logical Name: donotfax</para>
///<para>True = Do Not Allow</para>
///<para>False = Allow</para>
///</summary>
[AttributeLogicalNameAttribute("donotfax")]
public bool? DoNotAllowFaxes
{
	get { return this.GetPropertyValue<bool?>("donotfax"); }
}
///<summary>
///<para>Logical Name: donotphone</para>
///<para>True = Do Not Allow</para>
///<para>False = Allow</para>
///</summary>
[AttributeLogicalNameAttribute("donotphone")]
public bool? DoNotAllowPhoneCalls
{
	get { return this.GetPropertyValue<bool?>("donotphone"); }
}
///<summary>
///<para>Logical Name: donotpostalmail</para>
///<para>True = Do Not Allow</para>
///<para>False = Allow</para>
///</summary>
[AttributeLogicalNameAttribute("donotpostalmail")]
public bool? DoNotAllowPostalMails
{
	get { return this.GetPropertyValue<bool?>("donotpostalmail"); }
}
///<summary>
///<para>Logical Name: effort</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("effort")]
public double? Effort
{
	get { return this.GetPropertyValue<double?>("effort"); }
	set { this.SetPropertyValue("effort", (double?)value, (double)0, (double)1000000000, "Effort"); }
}
///<summary>
///<para>Logical Name: addressusedemailcolumnnumber</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("addressusedemailcolumnnumber")]
public int? EmailColumnNumberOfParty
{
	get { return this.GetPropertyValue<int?>("addressusedemailcolumnnumber"); }
}
///<summary>
///<para>Logical Name: exchangeentryid</para>
///<para>Max Length: 1024 characters</para>
///</summary>
[AttributeLogicalNameAttribute("exchangeentryid")]
public string ExchangeEntry
{
	get { return this.GetPropertyValue<string>("exchangeentryid"); }
	set { this.SetPropertyValue("exchangeentryid", value, 1024, "ExchangeEntry"); }
}
///<summary>
///<para>Logical Name: ispartydeleted</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("ispartydeleted")]
public bool? IsPartyDeleted
{
	get { return this.GetPropertyValue<bool?>("ispartydeleted"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
}
/// <summary>
///Logical Name: participationtypemask
/// </summary>
[AttributeLogicalNameAttribute("participationtypemask")]
public eParticipationType? ParticipationType
{
	get
	{
		if (ParticipationType_OptionSetValue != null) { return (eParticipationType)ParticipationType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ParticipationType_OptionSetValue = new OptionSetValue((int)value); }
		else this.ParticipationType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: participationtypemask</para>
///</summary>
[AttributeLogicalNameAttribute("participationtypemask")]
public OptionSetValue ParticipationType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("participationtypemask"); }
	set { this.SetPropertyValue<OptionSetValue>("participationtypemask", value, "ParticipationType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ParticipationType_Text(IOrganizationService Service)
{
	return this.ParticipationType_OptionSetValue.GetOptionSetText(Service, this, "participationtypemask");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ParticipationType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ParticipationType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: partyid</para>
///</summary>
[AttributeLogicalNameAttribute("partyid")]
public EntityReference Party
{
	get { return this.GetPropertyValue<EntityReference>("partyid"); }
	set { this.SetPropertyValue<EntityReference>("partyid", value, "Party"); }
}
///<summary>
///<para>Logical Name: resourcespecid</para>
///</summary>
[AttributeLogicalNameAttribute("resourcespecid")]
public EntityReference ResourceSpecification
{
	get { return this.GetPropertyValue<EntityReference>("resourcespecid"); }
	set { this.SetPropertyValue<EntityReference>("resourcespecid", value, "ResourceSpecification"); }
}
///<summary>
///<para>Logical Name: scheduledend</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledend")]
public DateTime? ScheduledEnd
{
	get { return this.GetPropertyValue<DateTime?>("scheduledend"); }
}
///<summary>
///<para>Logical Name: scheduledstart</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledstart")]
public DateTime? ScheduledStart
{
	get { return this.GetPropertyValue<DateTime?>("scheduledstart"); }
}


        /// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: ActivityParty_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: ActivityParty_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_activityparty</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_activityparty</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eAppointmentType
{
	///<summary><para>Not Recurring</para>
	///<para>Value = 0</para></summary>
	[Description("Not Recurring")]
	NotRecurring = 0, 
	///<summary><para>Recurring Master</para>
	///<para>Value = 1</para></summary>
	[Description("Recurring Master")]
	RecurringMaster = 1, 
	///<summary><para>Recurring Instance</para>
	///<para>Value = 2</para></summary>
	[Description("Recurring Instance")]
	RecurringInstance = 2, 
	///<summary><para>Recurring Exception</para>
	///<para>Value = 3</para></summary>
	[Description("Recurring Exception")]
	RecurringException = 3, 
	///<summary><para>Recurring Future Exception</para>
	///<para>Value = 4</para></summary>
	[Description("Recurring Future Exception")]
	RecurringFutureException = 4
}
public enum eParticipationType
{
	///<summary><para>Sender</para>
	///<para>Value = 1</para></summary>
	[Description("Sender")]
	Sender = 1, 
	///<summary><para>To Recipient</para>
	///<para>Value = 2</para></summary>
	[Description("To Recipient")]
	ToRecipient = 2, 
	///<summary><para>CC Recipient</para>
	///<para>Value = 3</para></summary>
	[Description("CC Recipient")]
	CCRecipient = 3, 
	///<summary><para>BCC Recipient</para>
	///<para>Value = 4</para></summary>
	[Description("BCC Recipient")]
	BCCRecipient = 4, 
	///<summary><para>Required attendee</para>
	///<para>Value = 5</para></summary>
	[Description("Required attendee")]
	RequiredAttendee = 5, 
	///<summary><para>Optional attendee</para>
	///<para>Value = 6</para></summary>
	[Description("Optional attendee")]
	OptionalAttendee = 6, 
	///<summary><para>Organizer</para>
	///<para>Value = 7</para></summary>
	[Description("Organizer")]
	Organizer = 7, 
	///<summary><para>Regarding</para>
	///<para>Value = 8</para></summary>
	[Description("Regarding")]
	Regarding = 8, 
	///<summary><para>Owner</para>
	///<para>Value = 9</para></summary>
	[Description("Owner")]
	Owner = 9, 
	///<summary><para>Resource</para>
	///<para>Value = 10</para></summary>
	[Description("Resource")]
	Resource = 10, 
	///<summary><para>Customer</para>
	///<para>Value = 11</para></summary>
	[Description("Customer")]
	Customer = 11
}


        public static class Properties
{
	/// <summary><para>owninguser</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>partyidname</para>
	/// <para>partyidname</para></summary>
	public const string PartyIdName = "partyidname";
	/// <summary><para>owningbusinessunit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>resourcespecidname</para>
	/// <para>resourcespecidname</para></summary>
	public const string ResourceSpecIdName = "resourcespecidname";
	/// <summary><para>partyobjecttypecode</para>
	/// <para>partyobjecttypecode</para></summary>
	public const string PartyObjectTypeCode = "partyobjecttypecode";
	/// <summary><para>Activity</para>
	/// <para>activityid</para></summary>
	public const string Activity = "activityid";
	/// <summary><para>Activity Party</para>
	/// <para>activitypartyid</para></summary>
	public const string ActivityPartyId = "activitypartyid";
	/// <summary><para>Address </para>
	/// <para>addressused</para></summary>
	public const string Address = "addressused";
	/// <summary><para>Appointment Type</para>
	/// <para>instancetypecode</para></summary>
	public const string AppointmentType = "instancetypecode";
	/// <summary><para>Do not allow Emails</para>
	/// <para>donotemail</para></summary>
	public const string DoNotAllowEmails = "donotemail";
	/// <summary><para>Do not allow Faxes</para>
	/// <para>donotfax</para></summary>
	public const string DoNotAllowFaxes = "donotfax";
	/// <summary><para>Do not allow Phone Calls</para>
	/// <para>donotphone</para></summary>
	public const string DoNotAllowPhoneCalls = "donotphone";
	/// <summary><para>Do not allow Postal Mails</para>
	/// <para>donotpostalmail</para></summary>
	public const string DoNotAllowPostalMails = "donotpostalmail";
	/// <summary><para>Effort</para>
	/// <para>effort</para></summary>
	public const string Effort = "effort";
	/// <summary><para>Email column number of party</para>
	/// <para>addressusedemailcolumnnumber</para></summary>
	public const string EmailColumnNumberOfParty = "addressusedemailcolumnnumber";
	/// <summary><para>Exchange Entry</para>
	/// <para>exchangeentryid</para></summary>
	public const string ExchangeEntry = "exchangeentryid";
	/// <summary><para>Is Party Deleted</para>
	/// <para>ispartydeleted</para></summary>
	public const string IsPartyDeleted = "ispartydeleted";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Participation Type</para>
	/// <para>participationtypemask</para></summary>
	public const string ParticipationType = "participationtypemask";
	/// <summary><para>Party</para>
	/// <para>partyid</para></summary>
	public const string Party = "partyid";
	/// <summary><para>Resource Specification</para>
	/// <para>resourcespecid</para></summary>
	public const string ResourceSpecification = "resourcespecid";
	/// <summary><para>Scheduled End</para>
	/// <para>scheduledend</para></summary>
	public const string ScheduledEnd = "scheduledend";
	/// <summary><para>Scheduled Start</para>
	/// <para>scheduledstart</para></summary>
	public const string ScheduledStart = "scheduledstart";
}

    }
}
