// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("plugintracelog")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Plug_inTraceLog : BaseProxyClass
    {
        public new const string LogicalName = "plugintracelog";
        public const int ObjectTypeCode = 4619;
        public const string PrimaryIdAttribute = "plugintracelogid";
        public const string PrimaryNameAttribute = "typename";
        
        static Plug_inTraceLog()
        {
            BaseProxyClass.RegisterProxyType(typeof(Plug_inTraceLog), "plugintracelog");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Plug_inTraceLog() : base(new Entity("plugintracelog")) { }
        public Plug_inTraceLog(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Plug_inTraceLog>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: configuration</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("configuration")]
public string Configuration
{
	get { return this.GetPropertyValue<string>("configuration"); }
}
///<summary>
///<para>Logical Name: performanceconstructorduration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("performanceconstructorduration")]
public int? ConstructorDuration
{
	get { return this.GetPropertyValue<int?>("performanceconstructorduration"); }
}
///<summary>
///<para>Logical Name: performanceconstructorstarttime</para>
///</summary>
[AttributeLogicalNameAttribute("performanceconstructorstarttime")]
public DateTime? ConstructorStartTime
{
	get { return this.GetPropertyValue<DateTime?>("performanceconstructorstarttime"); }
}
///<summary>
///<para>Logical Name: correlationid</para>
///</summary>
[AttributeLogicalNameAttribute("correlationid")]
public Guid CorrelationId
{
	get { return this.GetPropertyValue<Guid>("correlationid"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy_Delegate2
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: depth</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("depth")]
public int? Depth
{
	get { return this.GetPropertyValue<int?>("depth"); }
}
///<summary>
///<para>Logical Name: exceptiondetails</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("exceptiondetails")]
public string ExceptionDetails
{
	get { return this.GetPropertyValue<string>("exceptiondetails"); }
}
///<summary>
///<para>Logical Name: performanceexecutionduration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("performanceexecutionduration")]
public int? ExecutionDuration
{
	get { return this.GetPropertyValue<int?>("performanceexecutionduration"); }
}
///<summary>
///<para>Logical Name: performanceexecutionstarttime</para>
///</summary>
[AttributeLogicalNameAttribute("performanceexecutionstarttime")]
public DateTime? ExecutionStartTime
{
	get { return this.GetPropertyValue<DateTime?>("performanceexecutionstarttime"); }
}
///<summary>
///<para>Logical Name: messageblock</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("messageblock")]
public string MessageBlock
{
	get { return this.GetPropertyValue<string>("messageblock"); }
}
///<summary>
///<para>Logical Name: messagename</para>
///<para>Max Length: 1024 characters</para>
///</summary>
[AttributeLogicalNameAttribute("messagename")]
public string MessageName
{
	get { return this.GetPropertyValue<string>("messagename"); }
}
/// <summary>
///Logical Name: mode
/// </summary>
[AttributeLogicalNameAttribute("mode")]
public eMode? Mode
{
	get
	{
		if (Mode_OptionSetValue != null) { return (eMode)Mode_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: mode</para>
///</summary>
[AttributeLogicalNameAttribute("mode")]
public OptionSetValue Mode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("mode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Mode_Text(IOrganizationService Service)
{
	return this.Mode_OptionSetValue.GetOptionSetText(Service, this, "mode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Mode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Mode_OptionSetValue.Value);
}
/// <summary>
///Logical Name: operationtype
/// </summary>
[AttributeLogicalNameAttribute("operationtype")]
public eOperationType? OperationType
{
	get
	{
		if (OperationType_OptionSetValue != null) { return (eOperationType)OperationType_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: operationtype</para>
///</summary>
[AttributeLogicalNameAttribute("operationtype")]
public OptionSetValue OperationType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("operationtype"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OperationType_Text(IOrganizationService Service)
{
	return this.OperationType_OptionSetValue.GetOptionSetText(Service, this, "operationtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OperationType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OperationType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public Guid OrganizationId
{
	get { return this.GetPropertyValue<Guid>("organizationid"); }
}
///<summary>
///<para>Logical Name: persistencekey</para>
///</summary>
[AttributeLogicalNameAttribute("persistencekey")]
public Guid PersistenceKey
{
	get { return this.GetPropertyValue<Guid>("persistencekey"); }
}
///<summary>
///<para>Logical Name: pluginstepid</para>
///</summary>
[AttributeLogicalNameAttribute("pluginstepid")]
public Guid PluginStepID
{
	get { return this.GetPropertyValue<Guid>("pluginstepid"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: plugintracelogid</para>
///</summary>
[AttributeLogicalNameAttribute("plugintracelogid")]
public Guid Plug_inTraceLogId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: primaryentity</para>
///<para>Max Length: 1000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("primaryentity")]
public string PrimaryEntity
{
	get { return this.GetPropertyValue<string>("primaryentity"); }
}
///<summary>
///<para>Logical Name: profile</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("profile")]
public string Profile
{
	get { return this.GetPropertyValue<string>("profile"); }
}
///<summary>
///<para>Logical Name: requestid</para>
///</summary>
[AttributeLogicalNameAttribute("requestid")]
public Guid RequestID
{
	get { return this.GetPropertyValue<Guid>("requestid"); }
}
///<summary>
///<para>Logical Name: secureconfiguration</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("secureconfiguration")]
public string SecureConfiguration
{
	get { return this.GetPropertyValue<string>("secureconfiguration"); }
}
///<summary>
///<para>Logical Name: issystemcreated</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("issystemcreated")]
public bool? SystemCreated
{
	get { return this.GetPropertyValue<bool?>("issystemcreated"); }
}
///<summary>
///<para>Logical Name: typename</para>
///<para>Max Length: 1024 characters</para>
///</summary>
[AttributeLogicalNameAttribute("typename")]
public string TypeName
{
	get { return this.GetPropertyValue<string>("typename"); }
}


        

        

        

        public enum eMode
{
	///<summary><para>Synchronous</para>
	///<para>Value = 0</para></summary>
	[Description("Synchronous")]
	Synchronous = 0, 
	///<summary><para>Asynchronous</para>
	///<para>Value = 1</para></summary>
	[Description("Asynchronous")]
	Asynchronous = 1
}
public enum eOperationType
{
	///<summary><para>Unknown</para>
	///<para>Value = 0</para></summary>
	[Description("Unknown")]
	Unknown = 0, 
	///<summary><para>Plug-in</para>
	///<para>Value = 1</para></summary>
	[Description("Plug-in")]
	Plug_in = 1, 
	///<summary><para>Workflow Activity</para>
	///<para>Value = 2</para></summary>
	[Description("Workflow Activity")]
	WorkflowActivity = 2
}


        public static class Properties
{
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>Configuration</para>
	/// <para>configuration</para></summary>
	public const string Configuration = "configuration";
	/// <summary><para>Constructor Duration</para>
	/// <para>performanceconstructorduration</para></summary>
	public const string ConstructorDuration = "performanceconstructorduration";
	/// <summary><para>Constructor Start Time</para>
	/// <para>performanceconstructorstarttime</para></summary>
	public const string ConstructorStartTime = "performanceconstructorstarttime";
	/// <summary><para>Correlation Id</para>
	/// <para>correlationid</para></summary>
	public const string CorrelationId = "correlationid";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy_Delegate2 = "createdby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Depth</para>
	/// <para>depth</para></summary>
	public const string Depth = "depth";
	/// <summary><para>Exception Details</para>
	/// <para>exceptiondetails</para></summary>
	public const string ExceptionDetails = "exceptiondetails";
	/// <summary><para>Execution Duration</para>
	/// <para>performanceexecutionduration</para></summary>
	public const string ExecutionDuration = "performanceexecutionduration";
	/// <summary><para>Execution Start Time</para>
	/// <para>performanceexecutionstarttime</para></summary>
	public const string ExecutionStartTime = "performanceexecutionstarttime";
	/// <summary><para>Message Block</para>
	/// <para>messageblock</para></summary>
	public const string MessageBlock = "messageblock";
	/// <summary><para>Message Name</para>
	/// <para>messagename</para></summary>
	public const string MessageName = "messagename";
	/// <summary><para>Mode</para>
	/// <para>mode</para></summary>
	public const string Mode = "mode";
	/// <summary><para>Operation Type</para>
	/// <para>operationtype</para></summary>
	public const string OperationType = "operationtype";
	/// <summary><para>Organization Id</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>Persistence Key</para>
	/// <para>persistencekey</para></summary>
	public const string PersistenceKey = "persistencekey";
	/// <summary><para>Plugin Step ID</para>
	/// <para>pluginstepid</para></summary>
	public const string PluginStepID = "pluginstepid";
	/// <summary><para>Plug-in Trace Log</para>
	/// <para>plugintracelogid</para></summary>
	public const string Plug_inTraceLogId = "plugintracelogid";
	/// <summary><para>Primary Entity</para>
	/// <para>primaryentity</para></summary>
	public const string PrimaryEntity = "primaryentity";
	/// <summary><para>Profile</para>
	/// <para>profile</para></summary>
	public const string Profile = "profile";
	/// <summary><para>Request ID</para>
	/// <para>requestid</para></summary>
	public const string RequestID = "requestid";
	/// <summary><para>Secure Configuration</para>
	/// <para>secureconfiguration</para></summary>
	public const string SecureConfiguration = "secureconfiguration";
	/// <summary><para>System Created</para>
	/// <para>issystemcreated</para></summary>
	public const string SystemCreated = "issystemcreated";
	/// <summary><para>Type Name</para>
	/// <para>typename</para></summary>
	public const string TypeName = "typename";
}

    }
}
