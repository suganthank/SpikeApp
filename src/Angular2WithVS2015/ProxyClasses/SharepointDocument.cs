// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("sharepointdocument")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class SharepointDocument : BaseProxyClass
    {
        public new const string LogicalName = "sharepointdocument";
        public const int ObjectTypeCode = 9507;
        public const string PrimaryIdAttribute = "sharepointdocumentid";
        public const string PrimaryNameAttribute = "fullname";
        
        static SharepointDocument()
        {
            BaseProxyClass.RegisterProxyType(typeof(SharepointDocument), "sharepointdocument");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public SharepointDocument() : base(new Entity("sharepointdocument")) { }
        public SharepointDocument(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<SharepointDocument>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
	set { this.SetPropertyValue("regardingobjectidyominame", value, 160, "RegardingObjectIdYomiName"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
	set { this.SetPropertyValue("regardingobjectidname", value, 256, "RegardingObjectIdName"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: businessunitidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitidname")]
public string BusinessUnitIdName
{
	get { return this.GetPropertyValue<string>("businessunitidname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: absoluteurl</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("absoluteurl")]
public string AbsoluteURL
{
	get { return this.GetPropertyValue<string>("absoluteurl"); }
}
///<summary>
///<para>Logical Name: appcreatedby</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("appcreatedby")]
public string ApplicationCreatedBy
{
	get { return this.GetPropertyValue<string>("appcreatedby"); }
}
///<summary>
///<para>Logical Name: appmodifiedby</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("appmodifiedby")]
public string ApplicationModifiedBy
{
	get { return this.GetPropertyValue<string>("appmodifiedby"); }
}
///<summary>
///<para>Logical Name: author</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("author")]
public string Author
{
	get { return this.GetPropertyValue<string>("author"); }
	set { this.SetPropertyValue("author", value, 2000, "Author"); }
}
///<summary>
///<para>Logical Name: businessunitid</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitid")]
public EntityReference BusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("businessunitid"); }
	set { this.SetPropertyValue<EntityReference>("businessunitid", value, "BusinessUnit"); }
}
///<summary>
///<para>Logical Name: checkincomment</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("checkincomment")]
public string CheckInComment
{
	get { return this.GetPropertyValue<string>("checkincomment"); }
}
///<summary>
///<para>Logical Name: checkedoutto</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("checkedoutto")]
public string CheckedOutTo
{
	get { return this.GetPropertyValue<string>("checkedoutto"); }
}
///<summary>
///<para>Logical Name: childitemcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("childitemcount")]
public int? ChildItemCount
{
	get { return this.GetPropertyValue<int?>("childitemcount"); }
}
///<summary>
///<para>Logical Name: contenttype</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("contenttype")]
public string ContentType
{
	get { return this.GetPropertyValue<string>("contenttype"); }
}
///<summary>
///<para>Logical Name: contenttypeid</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("contenttypeid")]
public int? ContentTypeID
{
	get { return this.GetPropertyValue<int?>("contenttypeid"); }
}
///<summary>
///<para>Logical Name: copysource</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("copysource")]
public string CopySource
{
	get { return this.GetPropertyValue<string>("copysource"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: sharepointcreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("sharepointcreatedon")]
public DateTime? CreatedOnSharePoint
{
	get { return this.GetPropertyValue<DateTime?>("sharepointcreatedon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
}
///<summary>
///<para>Logical Name: documentid</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("documentid")]
public int? DocumentID
{
	get { return this.GetPropertyValue<int?>("documentid"); }
}
/// <summary>
///Logical Name: servicetype
/// </summary>
[AttributeLogicalNameAttribute("servicetype")]
public eServiceType? DocumentLocation
{
	get
	{
		if (DocumentLocation_OptionSetValue != null) { return (eServiceType)DocumentLocation_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DocumentLocation_OptionSetValue = new OptionSetValue((int)value); }
		else this.DocumentLocation_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: servicetype</para>
///</summary>
[AttributeLogicalNameAttribute("servicetype")]
public OptionSetValue DocumentLocation_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("servicetype"); }
	set { this.SetPropertyValue<OptionSetValue>("servicetype", value, "DocumentLocation_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DocumentLocation_Text(IOrganizationService Service)
{
	return this.DocumentLocation_OptionSetValue.GetOptionSetText(Service, this, "servicetype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DocumentLocation_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DocumentLocation_OptionSetValue.Value);
}
/// <summary>
///Logical Name: documentlocationtype
/// </summary>
[AttributeLogicalNameAttribute("documentlocationtype")]
public eLocationType? DocumentLocationType
{
	get
	{
		if (DocumentLocationType_OptionSetValue != null) { return (eLocationType)DocumentLocationType_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: documentlocationtype</para>
///</summary>
[AttributeLogicalNameAttribute("documentlocationtype")]
public OptionSetValue DocumentLocationType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("documentlocationtype"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DocumentLocationType_Text(IOrganizationService Service)
{
	return this.DocumentLocationType_OptionSetValue.GetOptionSetText(Service, this, "documentlocationtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DocumentLocationType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DocumentLocationType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: edit</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("edit")]
public string EditUrlSharepointForm
{
	get { return this.GetPropertyValue<string>("edit"); }
}
///<summary>
///<para>Logical Name: editurl</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("editurl")]
public string EditWebAppURL
{
	get { return this.GetPropertyValue<string>("editurl"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: filesize</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("filesize")]
public int? FileSize
{
	get { return this.GetPropertyValue<int?>("filesize"); }
}
///<summary>
///<para>Logical Name: filetype</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("filetype")]
public string FileType
{
	get { return this.GetPropertyValue<string>("filetype"); }
}
///<summary>
///<para>Logical Name: childfoldercount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("childfoldercount")]
public int? FolderChildCount
{
	get { return this.GetPropertyValue<int?>("childfoldercount"); }
}
///<summary>
///<para>Logical Name: iconclassname</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("iconclassname")]
public string IconClassName
{
	get { return this.GetPropertyValue<string>("iconclassname"); }
}
///<summary>
///<para>Logical Name: ischeckedout</para>
///<para>True = Checked Out</para>
///<para>False = Checked Out</para>
///</summary>
[AttributeLogicalNameAttribute("ischeckedout")]
public bool? IsCheckedOut
{
	get { return this.GetPropertyValue<bool?>("ischeckedout"); }
}
///<summary>
///<para>Logical Name: isfolder</para>
///<para>True = is Folder</para>
///<para>False = is Folder</para>
///</summary>
[AttributeLogicalNameAttribute("isfolder")]
public bool? IsFolder
{
	get { return this.GetPropertyValue<bool?>("isfolder"); }
}
///<summary>
///<para>Logical Name: isrecursivefetch</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isrecursivefetch")]
public bool? IsRecursiveFetch
{
	get { return this.GetPropertyValue<bool?>("isrecursivefetch"); }
}
///<summary>
///<para>Logical Name: modified</para>
///</summary>
[AttributeLogicalNameAttribute("modified")]
public DateTime? Modified
{
	get { return this.GetPropertyValue<DateTime?>("modified"); }
}
///<summary>
///<para>Logical Name: sharepointmodifiedby</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("sharepointmodifiedby")]
public string ModifiedBy
{
	get { return this.GetPropertyValue<string>("sharepointmodifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy2
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: fullname</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("fullname")]
public string Name
{
	get { return this.GetPropertyValue<string>("fullname"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: relativelocation</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("relativelocation")]
public string Path
{
	get { return this.GetPropertyValue<string>("relativelocation"); }
}
///<summary>
///<para>Logical Name: readurl</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("readurl")]
public string ReadWebAppURL
{
	get { return this.GetPropertyValue<string>("readurl"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: sharepointdocumentid</para>
///</summary>
[AttributeLogicalNameAttribute("sharepointdocumentid")]
public Guid SharePointDocumentId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: locationid</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("locationid")]
public string SharePointDocumentLocation
{
	get { return this.GetPropertyValue<string>("locationid"); }
}
///<summary>
///<para>Logical Name: version</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("version")]
public string SharePointDocumentVersion
{
	get { return this.GetPropertyValue<string>("version"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string Title
{
	get { return this.GetPropertyValue<string>("title"); }
}


        /// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: SharePointDocument_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: SharePointDocument_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }


        

        

        public enum eServiceType
{
	///<summary><para>SharePoint</para>
	///<para>Value = 0</para></summary>
	[Description("SharePoint")]
	SharePoint = 0, 
	///<summary><para>OneDrive</para>
	///<para>Value = 1</para></summary>
	[Description("OneDrive")]
	OneDrive = 1, 
	///<summary><para>Shared with me</para>
	///<para>Value = 2</para></summary>
	[Description("Shared with me")]
	SharedWithMe = 2
}
public enum eLocationType
{
	///<summary><para>General</para>
	///<para>Value = 0</para></summary>
	[Description("General")]
	General = 0, 
	///<summary><para>Dedicated for OneNote Integration</para>
	///<para>Value = 1</para></summary>
	[Description("Dedicated for OneNote Integration")]
	DedicatedForOneNoteIntegration = 1
}


        public static class Properties
{
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>regardingobjectidyominame</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>businessunitidname</para>
	/// <para>businessunitidname</para></summary>
	public const string BusinessUnitIdName = "businessunitidname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>Absolute URL</para>
	/// <para>absoluteurl</para></summary>
	public const string AbsoluteURL = "absoluteurl";
	/// <summary><para>Application Created by</para>
	/// <para>appcreatedby</para></summary>
	public const string ApplicationCreatedBy = "appcreatedby";
	/// <summary><para>Application Modified By</para>
	/// <para>appmodifiedby</para></summary>
	public const string ApplicationModifiedBy = "appmodifiedby";
	/// <summary><para>Author</para>
	/// <para>author</para></summary>
	public const string Author = "author";
	/// <summary><para>Business Unit</para>
	/// <para>businessunitid</para></summary>
	public const string BusinessUnit = "businessunitid";
	/// <summary><para>Check In Comment</para>
	/// <para>checkincomment</para></summary>
	public const string CheckInComment = "checkincomment";
	/// <summary><para>Checked Out To</para>
	/// <para>checkedoutto</para></summary>
	public const string CheckedOutTo = "checkedoutto";
	/// <summary><para>Child Item Count</para>
	/// <para>childitemcount</para></summary>
	public const string ChildItemCount = "childitemcount";
	/// <summary><para>Content Type</para>
	/// <para>contenttype</para></summary>
	public const string ContentType = "contenttype";
	/// <summary><para>Content Type ID</para>
	/// <para>contenttypeid</para></summary>
	public const string ContentTypeID = "contenttypeid";
	/// <summary><para>Copy Source</para>
	/// <para>copysource</para></summary>
	public const string CopySource = "copysource";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Created On SharePoint</para>
	/// <para>sharepointcreatedon</para></summary>
	public const string CreatedOnSharePoint = "sharepointcreatedon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Document ID</para>
	/// <para>documentid</para></summary>
	public const string DocumentID = "documentid";
	/// <summary><para>Document Location</para>
	/// <para>servicetype</para></summary>
	public const string DocumentLocation = "servicetype";
	/// <summary><para>Document Location Type</para>
	/// <para>documentlocationtype</para></summary>
	public const string DocumentLocationType = "documentlocationtype";
	/// <summary><para>Edit Url Sharepoint Form</para>
	/// <para>edit</para></summary>
	public const string EditUrlSharepointForm = "edit";
	/// <summary><para>Edit Web App URL</para>
	/// <para>editurl</para></summary>
	public const string EditWebAppURL = "editurl";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>File Size</para>
	/// <para>filesize</para></summary>
	public const string FileSize = "filesize";
	/// <summary><para>File Type</para>
	/// <para>filetype</para></summary>
	public const string FileType = "filetype";
	/// <summary><para>Folder Child Count</para>
	/// <para>childfoldercount</para></summary>
	public const string FolderChildCount = "childfoldercount";
	/// <summary><para>Icon ClassName</para>
	/// <para>iconclassname</para></summary>
	public const string IconClassName = "iconclassname";
	/// <summary><para>Is Checked out</para>
	/// <para>ischeckedout</para></summary>
	public const string IsCheckedOut = "ischeckedout";
	/// <summary><para>Is Folder</para>
	/// <para>isfolder</para></summary>
	public const string IsFolder = "isfolder";
	/// <summary><para>Is Recursive Fetch</para>
	/// <para>isrecursivefetch</para></summary>
	public const string IsRecursiveFetch = "isrecursivefetch";
	/// <summary><para>Modified</para>
	/// <para>modified</para></summary>
	public const string Modified = "modified";
	/// <summary><para>Modified by</para>
	/// <para>sharepointmodifiedby</para></summary>
	public const string ModifiedBy = "sharepointmodifiedby";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy2 = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>fullname</para></summary>
	public const string Name = "fullname";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Path</para>
	/// <para>relativelocation</para></summary>
	public const string Path = "relativelocation";
	/// <summary><para>Read WebApp URL</para>
	/// <para>readurl</para></summary>
	public const string ReadWebAppURL = "readurl";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>SharePoint Document</para>
	/// <para>sharepointdocumentid</para></summary>
	public const string SharePointDocumentId = "sharepointdocumentid";
	/// <summary><para>SharePoint Document Location</para>
	/// <para>locationid</para></summary>
	public const string SharePointDocumentLocation = "locationid";
	/// <summary><para>SharePoint Document Version</para>
	/// <para>version</para></summary>
	public const string SharePointDocumentVersion = "version";
	/// <summary><para>Title</para>
	/// <para>title</para></summary>
	public const string Title = "title";
}

    }
}
