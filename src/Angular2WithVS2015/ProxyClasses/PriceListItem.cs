// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("productpricelevel")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class PriceListItem : BaseProxyClass
    {
        public new const string LogicalName = "productpricelevel";
        public const int ObjectTypeCode = 1026;
        public const string PrimaryIdAttribute = "productpricelevelid";
        public const string PrimaryNameAttribute = "productidname";
        
        static PriceListItem()
        {
            BaseProxyClass.RegisterProxyType(typeof(PriceListItem), "productpricelevel");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public PriceListItem() : base(new Entity("productpricelevel")) { }
        public PriceListItem(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<PriceListItem>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: uomscheduleidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("uomscheduleidname")]
public string UoMScheduleIdName
{
	get { return this.GetPropertyValue<string>("uomscheduleidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: pricelevelidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("pricelevelidname")]
public string PriceLevelIdName
{
	get { return this.GetPropertyValue<string>("pricelevelidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: discounttypeidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("discounttypeidname")]
public string DiscountTypeIdName
{
	get { return this.GetPropertyValue<string>("discounttypeidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: uomidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("uomidname")]
public string UoMIdName
{
	get { return this.GetPropertyValue<string>("uomidname"); }
}
///<summary>
///<para>Logical Name: productidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productidname")]
public string ProductIdName
{
	get { return this.GetPropertyValue<string>("productidname"); }
}
///<summary>
///<para>Logical Name: amount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Amount
{
	get
	{
		if (AmountMoney != null) { return AmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AmountMoney = new Money(value.Value); }
		else this.AmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: amount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("amount")]
public Money AmountMoney
{
	get { return this.GetPropertyValue<Money>("amount"); }
	set { this.SetPropertyValue("amount", (Money)value, (decimal)0, (decimal)100000000000000, "AmountMoney"); }
}
///<summary>
///<para>Logical Name: amount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Amount_Base
{
	get
	{
		if (Amount_BaseMoney != null) { return Amount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: amount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("amount_base")]
public Money Amount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("amount_base"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: discounttypeid</para>
///</summary>
[AttributeLogicalNameAttribute("discounttypeid")]
public EntityReference DiscountList
{
	get { return this.GetPropertyValue<EntityReference>("discounttypeid"); }
	set { this.SetPropertyValue<EntityReference>("discounttypeid", value, "DiscountList"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public Guid Organization
{
	get { return this.GetPropertyValue<Guid>("organizationid"); }
}
///<summary>
///<para>Logical Name: percentage</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("percentage")]
public decimal? Percentage
{
	get { return this.GetPropertyValue<decimal?>("percentage"); }
	set { this.SetPropertyValue("percentage", (decimal?)value, (decimal)0, (decimal)1000000000, "Percentage"); }
}
///<summary>
///<para>Logical Name: pricelevelid</para>
///</summary>
[AttributeLogicalNameAttribute("pricelevelid")]
public EntityReference PriceList
{
	get { return this.GetPropertyValue<EntityReference>("pricelevelid"); }
	set { this.SetPropertyValue<EntityReference>("pricelevelid", value, "PriceList"); }
}
/// <summary>
///Logical Name: pricingmethodcode
/// </summary>
[AttributeLogicalNameAttribute("pricingmethodcode")]
public ePricingMethod? PricingMethod
{
	get
	{
		if (PricingMethod_OptionSetValue != null) { return (ePricingMethod)PricingMethod_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PricingMethod_OptionSetValue = new OptionSetValue((int)value); }
		else this.PricingMethod_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: pricingmethodcode</para>
///</summary>
[AttributeLogicalNameAttribute("pricingmethodcode")]
public OptionSetValue PricingMethod_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("pricingmethodcode"); }
	set { this.SetPropertyValue<OptionSetValue>("pricingmethodcode", value, "PricingMethod_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string PricingMethod_Text(IOrganizationService Service)
{
	return this.PricingMethod_OptionSetValue.GetOptionSetText(Service, this, "pricingmethodcode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string PricingMethod_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.PricingMethod_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public Guid Process
{
	get { return this.GetPropertyValue<Guid>("processid"); }
	set { this.SetPropertyValue<Guid>("processid", value, "Process"); }
}
///<summary>
///<para>Logical Name: stageid</para>
///</summary>
[AttributeLogicalNameAttribute("stageid")]
public Guid ProcessStage
{
	get { return this.GetPropertyValue<Guid>("stageid"); }
	set { this.SetPropertyValue<Guid>("stageid", value, "ProcessStage"); }
}
///<summary>
///<para>Logical Name: productid</para>
///</summary>
[AttributeLogicalNameAttribute("productid")]
public EntityReference Product
{
	get { return this.GetPropertyValue<EntityReference>("productid"); }
	set { this.SetPropertyValue<EntityReference>("productid", value, "Product"); }
}
///<summary>
///<para>Logical Name: productnumber</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productnumber")]
public string ProductID
{
	get { return this.GetPropertyValue<string>("productnumber"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: productpricelevelid</para>
///</summary>
[AttributeLogicalNameAttribute("productpricelevelid")]
public Guid ProductPriceListId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
/// <summary>
///Logical Name: quantitysellingcode
/// </summary>
[AttributeLogicalNameAttribute("quantitysellingcode")]
public eQuantitySellingOption? QuantitySellingOption
{
	get
	{
		if (QuantitySellingOption_OptionSetValue != null) { return (eQuantitySellingOption)QuantitySellingOption_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.QuantitySellingOption_OptionSetValue = new OptionSetValue((int)value); }
		else this.QuantitySellingOption_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: quantitysellingcode</para>
///</summary>
[AttributeLogicalNameAttribute("quantitysellingcode")]
public OptionSetValue QuantitySellingOption_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("quantitysellingcode"); }
	set { this.SetPropertyValue<OptionSetValue>("quantitysellingcode", value, "QuantitySellingOption_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string QuantitySellingOption_Text(IOrganizationService Service)
{
	return this.QuantitySellingOption_OptionSetValue.GetOptionSetText(Service, this, "quantitysellingcode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string QuantitySellingOption_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.QuantitySellingOption_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: roundingoptionamount</para>
///<para>Minimum Value: -100000000000000</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? RoundingAmount
{
	get
	{
		if (RoundingAmountMoney != null) { return RoundingAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RoundingAmountMoney = new Money(value.Value); }
		else this.RoundingAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: roundingoptionamount</para>
///<para>Minimum Value: -100000000000000</para>
///<para>Maximum Value: 100000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("roundingoptionamount")]
public Money RoundingAmountMoney
{
	get { return this.GetPropertyValue<Money>("roundingoptionamount"); }
	set { this.SetPropertyValue("roundingoptionamount", (Money)value, (decimal)-100000000000000, (decimal)100000000000000, "RoundingAmountMoney"); }
}
///<summary>
///<para>Logical Name: roundingoptionamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? RoundingAmount_Base
{
	get
	{
		if (RoundingAmount_BaseMoney != null) { return RoundingAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: roundingoptionamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("roundingoptionamount_base")]
public Money RoundingAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("roundingoptionamount_base"); }
}
/// <summary>
///Logical Name: roundingoptioncode
/// </summary>
[AttributeLogicalNameAttribute("roundingoptioncode")]
public eRoundingOption? RoundingOption
{
	get
	{
		if (RoundingOption_OptionSetValue != null) { return (eRoundingOption)RoundingOption_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RoundingOption_OptionSetValue = new OptionSetValue((int)value); }
		else this.RoundingOption_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: roundingoptioncode</para>
///</summary>
[AttributeLogicalNameAttribute("roundingoptioncode")]
public OptionSetValue RoundingOption_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("roundingoptioncode"); }
	set { this.SetPropertyValue<OptionSetValue>("roundingoptioncode", value, "RoundingOption_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string RoundingOption_Text(IOrganizationService Service)
{
	return this.RoundingOption_OptionSetValue.GetOptionSetText(Service, this, "roundingoptioncode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string RoundingOption_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.RoundingOption_OptionSetValue.Value);
}
/// <summary>
///Logical Name: roundingpolicycode
/// </summary>
[AttributeLogicalNameAttribute("roundingpolicycode")]
public eRoundingPolicy? RoundingPolicy
{
	get
	{
		if (RoundingPolicy_OptionSetValue != null) { return (eRoundingPolicy)RoundingPolicy_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RoundingPolicy_OptionSetValue = new OptionSetValue((int)value); }
		else this.RoundingPolicy_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: roundingpolicycode</para>
///</summary>
[AttributeLogicalNameAttribute("roundingpolicycode")]
public OptionSetValue RoundingPolicy_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("roundingpolicycode"); }
	set { this.SetPropertyValue<OptionSetValue>("roundingpolicycode", value, "RoundingPolicy_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string RoundingPolicy_Text(IOrganizationService Service)
{
	return this.RoundingPolicy_OptionSetValue.GetOptionSetText(Service, this, "roundingpolicycode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string RoundingPolicy_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.RoundingPolicy_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string TraversedPath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "TraversedPath"); }
}
///<summary>
///<para>Logical Name: uomid</para>
///</summary>
[AttributeLogicalNameAttribute("uomid")]
public EntityReference Unit
{
	get { return this.GetPropertyValue<EntityReference>("uomid"); }
	set { this.SetPropertyValue<EntityReference>("uomid", value, "Unit"); }
}
///<summary>
///<para>Logical Name: uomscheduleid</para>
///</summary>
[AttributeLogicalNameAttribute("uomscheduleid")]
public EntityReference UnitScheduleID
{
	get { return this.GetPropertyValue<EntityReference>("uomscheduleid"); }
	set { this.SetPropertyValue<EntityReference>("uomscheduleid", value, "UnitScheduleID"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: ProductPriceLevel_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: ProductPriceLevel_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: ProductPriceLevel_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: ProductPriceLevel_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: ProductPriceLevel_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: ProductPriceLevel_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>RecommendationCache (Product Details)</b></para>
/// <para>Schema Name: ProductPriceLevel_RecommendationCache_AdditionalDataRecordId</para>
/// </summary>
public List<RecommendationCache> GetRecommendationCaches_ProductDetails (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecommendationCache>(Service, this.Id, "recommendationcache", "additionaldatarecordid", Columns); }
/// <summary>
/// <para><b>RecommendationCache (Product Details)</b></para>
/// <para>Schema Name: ProductPriceLevel_RecommendationCache_AdditionalDataRecordId</para>
/// </summary>
public List<RecommendationCache> GetRecommendationCaches_ProductDetails (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecommendationCache>(Service, this.Id, "recommendationcache", "additionaldatarecordid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: ProductPriceLevel_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: ProductPriceLevel_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_productpricelevel</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_productpricelevel</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum ePricingMethod
{
	///<summary><para>Currency Amount</para>
	///<para>Value = 1</para></summary>
	[Description("Currency Amount")]
	CurrencyAmount = 1, 
	///<summary><para>Percent of List</para>
	///<para>Value = 2</para></summary>
	[Description("Percent of List")]
	PercentOfList = 2, 
	///<summary><para>Percent Markup - Current Cost</para>
	///<para>Value = 3</para></summary>
	[Description("Percent Markup - Current Cost")]
	PercentMarkup_CurrentCost = 3, 
	///<summary><para>Percent Margin - Current Cost</para>
	///<para>Value = 4</para></summary>
	[Description("Percent Margin - Current Cost")]
	PercentMargin_CurrentCost = 4, 
	///<summary><para>Percent Markup - Standard Cost</para>
	///<para>Value = 5</para></summary>
	[Description("Percent Markup - Standard Cost")]
	PercentMarkup_StandardCost = 5, 
	///<summary><para>Percent Margin - Standard Cost</para>
	///<para>Value = 6</para></summary>
	[Description("Percent Margin - Standard Cost")]
	PercentMargin_StandardCost = 6
}
public enum eQuantitySellingOption
{
	///<summary><para>No Control</para>
	///<para>Value = 1</para></summary>
	[Description("No Control")]
	NoControl = 1, 
	///<summary><para>Whole</para>
	///<para>Value = 2</para></summary>
	[Description("Whole")]
	Whole = 2, 
	///<summary><para>Whole and Fractional</para>
	///<para>Value = 3</para></summary>
	[Description("Whole and Fractional")]
	WholeAndFractional = 3
}
public enum eRoundingOption
{
	///<summary><para>Ends in</para>
	///<para>Value = 1</para></summary>
	[Description("Ends in")]
	EndsIn = 1, 
	///<summary><para>Multiple of</para>
	///<para>Value = 2</para></summary>
	[Description("Multiple of")]
	MultipleOf = 2
}
public enum eRoundingPolicy
{
	///<summary><para>None</para>
	///<para>Value = 1</para></summary>
	[Description("None")]
	None = 1, 
	///<summary><para>Up</para>
	///<para>Value = 2</para></summary>
	[Description("Up")]
	Up = 2, 
	///<summary><para>Down</para>
	///<para>Value = 3</para></summary>
	[Description("Down")]
	Down = 3, 
	///<summary><para>To Nearest</para>
	///<para>Value = 4</para></summary>
	[Description("To Nearest")]
	ToNearest = 4
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>uomscheduleidname</para>
	/// <para>uomscheduleidname</para></summary>
	public const string UoMScheduleIdName = "uomscheduleidname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>pricelevelidname</para>
	/// <para>pricelevelidname</para></summary>
	public const string PriceLevelIdName = "pricelevelidname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>discounttypeidname</para>
	/// <para>discounttypeidname</para></summary>
	public const string DiscountTypeIdName = "discounttypeidname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>uomidname</para>
	/// <para>uomidname</para></summary>
	public const string UoMIdName = "uomidname";
	/// <summary><para>productidname</para>
	/// <para>productidname</para></summary>
	public const string ProductIdName = "productidname";
	/// <summary><para>Amount</para>
	/// <para>amount</para></summary>
	public const string Amount = "amount";
	/// <summary><para>Amount (Base)</para>
	/// <para>amount_base</para></summary>
	public const string Amount_Base = "amount_base";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Discount List</para>
	/// <para>discounttypeid</para></summary>
	public const string DiscountList = "discounttypeid";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Percentage</para>
	/// <para>percentage</para></summary>
	public const string Percentage = "percentage";
	/// <summary><para>Price List</para>
	/// <para>pricelevelid</para></summary>
	public const string PriceList = "pricelevelid";
	/// <summary><para>Pricing Method</para>
	/// <para>pricingmethodcode</para></summary>
	public const string PricingMethod = "pricingmethodcode";
	/// <summary><para>Process</para>
	/// <para>processid</para></summary>
	public const string Process = "processid";
	/// <summary><para>Process Stage</para>
	/// <para>stageid</para></summary>
	public const string ProcessStage = "stageid";
	/// <summary><para>Product</para>
	/// <para>productid</para></summary>
	public const string Product = "productid";
	/// <summary><para>Product ID</para>
	/// <para>productnumber</para></summary>
	public const string ProductID = "productnumber";
	/// <summary><para>Product Price List</para>
	/// <para>productpricelevelid</para></summary>
	public const string ProductPriceListId = "productpricelevelid";
	/// <summary><para>Quantity Selling Option</para>
	/// <para>quantitysellingcode</para></summary>
	public const string QuantitySellingOption = "quantitysellingcode";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Rounding Amount</para>
	/// <para>roundingoptionamount</para></summary>
	public const string RoundingAmount = "roundingoptionamount";
	/// <summary><para>Rounding Amount (Base)</para>
	/// <para>roundingoptionamount_base</para></summary>
	public const string RoundingAmount_Base = "roundingoptionamount_base";
	/// <summary><para>Rounding Option</para>
	/// <para>roundingoptioncode</para></summary>
	public const string RoundingOption = "roundingoptioncode";
	/// <summary><para>Rounding Policy</para>
	/// <para>roundingpolicycode</para></summary>
	public const string RoundingPolicy = "roundingpolicycode";
	/// <summary><para>Traversed Path</para>
	/// <para>traversedpath</para></summary>
	public const string TraversedPath = "traversedpath";
	/// <summary><para>Unit</para>
	/// <para>uomid</para></summary>
	public const string Unit = "uomid";
	/// <summary><para>Unit Schedule ID</para>
	/// <para>uomscheduleid</para></summary>
	public const string UnitScheduleID = "uomscheduleid";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
