// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("msdyn_scheduleboardsetting")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ScheduleBoardSetting : BaseProxyClass
    {
        public new const string LogicalName = "msdyn_scheduleboardsetting";
        public const int ObjectTypeCode = 10021;
        public const string PrimaryIdAttribute = "msdyn_scheduleboardsettingid";
        public const string PrimaryNameAttribute = "msdyn_tabname";
        
        static ScheduleBoardSetting()
        {
            BaseProxyClass.RegisterProxyType(typeof(ScheduleBoardSetting), "msdyn_scheduleboardsetting");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ScheduleBoardSetting() : base(new Entity("msdyn_scheduleboardsetting")) { }
        public ScheduleBoardSetting(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ScheduleBoardSetting>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulerbusinessunittooltipview</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulerbusinessunittooltipview")]
public string BusinessUnitTooltipsView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulerbusinessunittooltipview"); }
	set { this.SetPropertyValue("msdyn_schedulerbusinessunittooltipview", value, 40, "BusinessUnitTooltipsView_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulercoredetailsview</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulercoredetailsview")]
public string CoreDetailsView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulercoredetailsview"); }
	set { this.SetPropertyValue("msdyn_schedulercoredetailsview", value, 50, "CoreDetailsView_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulercoreslottexttemplate</para>
///<para>Max Length: 5000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulercoreslottexttemplate")]
public string CoreSlotTextTemplate_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulercoreslottexttemplate"); }
	set { this.SetPropertyValue("msdyn_schedulercoreslottexttemplate", value, 5000, "CoreSlotTextTemplate_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulercoretooltipview</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulercoretooltipview")]
public string CoreTooltipView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulercoretooltipview"); }
	set { this.SetPropertyValue("msdyn_schedulercoretooltipview", value, 50, "CoreTooltipView_Deprecated"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: msdyn_customtabname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_customtabname")]
public string CustomTabName
{
	get { return this.GetPropertyValue<string>("msdyn_customtabname"); }
	set { this.SetPropertyValue("msdyn_customtabname", value, 100, "CustomTabName"); }
}
///<summary>
///<para>Logical Name: msdyn_customtabwebresource</para>
///<para>Max Length: 255 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_customtabwebresource")]
public string CustomTabWebResource
{
	get { return this.GetPropertyValue<string>("msdyn_customtabwebresource"); }
	set { this.SetPropertyValue("msdyn_customtabwebresource", value, 255, "CustomTabWebResource"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulerfieldservicedetailsview</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulerfieldservicedetailsview")]
public string FieldServiceDetailsView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulerfieldservicedetailsview"); }
	set { this.SetPropertyValue("msdyn_schedulerfieldservicedetailsview", value, 40, "FieldServiceDetailsView_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulerfieldserviceslottexttemplate</para>
///<para>Max Length: 8000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulerfieldserviceslottexttemplate")]
public string FieldServiceSlotTextTemplate_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulerfieldserviceslottexttemplate"); }
	set { this.SetPropertyValue("msdyn_schedulerfieldserviceslottexttemplate", value, 8000, "FieldServiceSlotTextTemplate_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulerfieldservicetooltipview</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulerfieldservicetooltipview")]
public string FieldServiceTooltipView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulerfieldservicetooltipview"); }
	set { this.SetPropertyValue("msdyn_schedulerfieldservicetooltipview", value, 40, "FieldServiceTooltipView_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_fullybookedcolor</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_fullybookedcolor")]
public string FullyBookedColor
{
	get { return this.GetPropertyValue<string>("msdyn_fullybookedcolor"); }
	set { this.SetPropertyValue("msdyn_fullybookedcolor", value, 100, "FullyBookedColor"); }
}
///<summary>
///<para>Logical Name: msdyn_hidecancelled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_hidecancelled")]
public bool? HideCanceled
{
	get { return this.GetPropertyValue<bool?>("msdyn_hidecancelled"); }
	set { this.SetPropertyValue<bool?>("msdyn_hidecancelled", value, "HideCanceled"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_ispublic</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_ispublic")]
public bool? IsPublic_Deprecated
{
	get { return this.GetPropertyValue<bool?>("msdyn_ispublic"); }
	set { this.SetPropertyValue<bool?>("msdyn_ispublic", value, "IsPublic_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_issynchronizeresources</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_issynchronizeresources")]
public bool? IsSynchronizeResources
{
	get { return this.GetPropertyValue<bool?>("msdyn_issynchronizeresources"); }
	set { this.SetPropertyValue<bool?>("msdyn_issynchronizeresources", value, "IsSynchronizeResources"); }
}
///<summary>
///<para>Logical Name: msdyn_mapviewtabplacement</para>
///<para>True = Details</para>
///<para>False = Filter</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_mapviewtabplacement")]
public bool? MapViewTabPlacement
{
	get { return this.GetPropertyValue<bool?>("msdyn_mapviewtabplacement"); }
	set { this.SetPropertyValue<bool?>("msdyn_mapviewtabplacement", value, "MapViewTabPlacement"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: msdyn_notbookedcolor</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_notbookedcolor")]
public string NotBookedColor
{
	get { return this.GetPropertyValue<string>("msdyn_notbookedcolor"); }
	set { this.SetPropertyValue("msdyn_notbookedcolor", value, 100, "NotBookedColor"); }
}
///<summary>
///<para>Logical Name: msdyn_ordernumber</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_ordernumber")]
public int? OrderNumber
{
	get { return this.GetPropertyValue<int?>("msdyn_ordernumber"); }
	set { this.SetPropertyValue("msdyn_ordernumber", (int?)value, (int)0, (int)100, "OrderNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_organizationalunittooltipsviewid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_organizationalunittooltipsviewid")]
public string OrganizationalUnitTooltipsViewId
{
	get { return this.GetPropertyValue<string>("msdyn_organizationalunittooltipsviewid"); }
	set { this.SetPropertyValue("msdyn_organizationalunittooltipsviewid", value, 100, "OrganizationalUnitTooltipsViewId"); }
}
///<summary>
///<para>Logical Name: msdyn_organizationalunitviewid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_organizationalunitviewid")]
public string OrganizationalUnitViewId
{
	get { return this.GetPropertyValue<string>("msdyn_organizationalunitviewid"); }
	set { this.SetPropertyValue("msdyn_organizationalunitviewid", value, 100, "OrganizationalUnitViewId"); }
}
///<summary>
///<para>Logical Name: msdyn_overbookedcolor</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_overbookedcolor")]
public string OverbookedColor
{
	get { return this.GetPropertyValue<string>("msdyn_overbookedcolor"); }
	set { this.SetPropertyValue("msdyn_overbookedcolor", value, 100, "OverbookedColor"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: msdyn_partiallybookedcolor</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_partiallybookedcolor")]
public string PartiallyBookedColor
{
	get { return this.GetPropertyValue<string>("msdyn_partiallybookedcolor"); }
	set { this.SetPropertyValue("msdyn_partiallybookedcolor", value, 100, "PartiallyBookedColor"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: msdyn_unscheduledrequirementsviewid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unscheduledrequirementsviewid")]
public string RequirementsViewId
{
	get { return this.GetPropertyValue<string>("msdyn_unscheduledrequirementsviewid"); }
	set { this.SetPropertyValue("msdyn_unscheduledrequirementsviewid", value, 100, "RequirementsViewId"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulerresourcedetailsview</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulerresourcedetailsview")]
public string ResourceDetailsView
{
	get { return this.GetPropertyValue<string>("msdyn_schedulerresourcedetailsview"); }
	set { this.SetPropertyValue("msdyn_schedulerresourcedetailsview", value, 40, "ResourceDetailsView"); }
}
///<summary>
///<para>Logical Name: msdyn_unscheduledwopagereccount</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unscheduledwopagereccount")]
public int? ResourceRequirementViewPageRecordCount
{
	get { return this.GetPropertyValue<int?>("msdyn_unscheduledwopagereccount"); }
	set { this.SetPropertyValue("msdyn_unscheduledwopagereccount", (int?)value, (int)1, (int)2147483647, "ResourceRequirementViewPageRecordCount"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulerresourcetooltipview</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulerresourcetooltipview")]
public string ResourceTooltipsView
{
	get { return this.GetPropertyValue<string>("msdyn_schedulerresourcetooltipview"); }
	set { this.SetPropertyValue("msdyn_schedulerresourcetooltipview", value, 40, "ResourceTooltipsView"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: msdyn_scheduleboardsettingid</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_scheduleboardsettingid")]
public Guid ScheduleBoardSettingId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: msdyn_scheduleralertsview</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_scheduleralertsview")]
public string SchedulerAlertsView
{
	get { return this.GetPropertyValue<string>("msdyn_scheduleralertsview"); }
	set { this.SetPropertyValue("msdyn_scheduleralertsview", value, 100, "SchedulerAlertsView"); }
}
///<summary>
///<para>Logical Name: msdyn_settings</para>
///<para>Max Length: 1048576 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_settings")]
public string Settings
{
	get { return this.GetPropertyValue<string>("msdyn_settings"); }
	set { this.SetPropertyValue("msdyn_settings", value, 1048576, "Settings"); }
}
/// <summary>
///Logical Name: msdyn_sharetype
/// </summary>
[AttributeLogicalNameAttribute("msdyn_sharetype")]
public eShareType? ShareType
{
	get
	{
		if (ShareType_OptionSetValue != null) { return (eShareType)ShareType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ShareType_OptionSetValue = new OptionSetValue((int)value); }
		else this.ShareType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_sharetype</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_sharetype")]
public OptionSetValue ShareType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_sharetype"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_sharetype", value, "ShareType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ShareType_Text(IOrganizationService Service)
{
	return this.ShareType_OptionSetValue.GetOptionSetText(Service, this, "msdyn_sharetype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ShareType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ShareType_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_tabname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_tabname")]
public string TabName
{
	get { return this.GetPropertyValue<string>("msdyn_tabname"); }
	set { this.SetPropertyValue("msdyn_tabname", value, 100, "TabName"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulerbusinessunitdetailsview</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulerbusinessunitdetailsview")]
public string UnitDetailsView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_schedulerbusinessunitdetailsview"); }
	set { this.SetPropertyValue("msdyn_schedulerbusinessunitdetailsview", value, 40, "UnitDetailsView_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_unscheduledviewid</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unscheduledviewid")]
public string UnscheduledView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_unscheduledviewid"); }
	set { this.SetPropertyValue("msdyn_unscheduledviewid", value, 40, "UnscheduledView_Deprecated"); }
}
///<summary>
///<para>Logical Name: msdyn_unscheduledwotooltipsviewid</para>
///<para>Max Length: 40 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_unscheduledwotooltipsviewid")]
public string UnscheduledWOTooltipsView_Deprecated
{
	get { return this.GetPropertyValue<string>("msdyn_unscheduledwotooltipsviewid"); }
	set { this.SetPropertyValue("msdyn_unscheduledwotooltipsviewid", value, 40, "UnscheduledWOTooltipsView_Deprecated"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: msdyn_workinghourscolor</para>
///<para>Max Length: 10 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_workinghourscolor")]
public string WorkingHoursColor
{
	get { return this.GetPropertyValue<string>("msdyn_workinghourscolor"); }
	set { this.SetPropertyValue("msdyn_workinghourscolor", value, 10, "WorkingHoursColor"); }
}


        /// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_scheduleboardsetting_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eShareType
{
	///<summary><para>Everyone</para>
	///<para>Value = 192350000</para></summary>
	[Description("Everyone")]
	Everyone = 192350000, 
	///<summary><para>Just me</para>
	///<para>Value = 192350001</para></summary>
	[Description("Just me")]
	JustMe = 192350001, 
	///<summary><para>Specific people</para>
	///<para>Value = 192350002</para></summary>
	[Description("Specific people")]
	SpecificPeople = 192350002
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>Business Unit Tooltips View (Deprecated)</para>
	/// <para>msdyn_schedulerbusinessunittooltipview</para></summary>
	public const string BusinessUnitTooltipsView_Deprecated = "msdyn_schedulerbusinessunittooltipview";
	/// <summary><para>Core Details View (Deprecated)</para>
	/// <para>msdyn_schedulercoredetailsview</para></summary>
	public const string CoreDetailsView_Deprecated = "msdyn_schedulercoredetailsview";
	/// <summary><para>Core Slot Text Template (Deprecated)</para>
	/// <para>msdyn_schedulercoreslottexttemplate</para></summary>
	public const string CoreSlotTextTemplate_Deprecated = "msdyn_schedulercoreslottexttemplate";
	/// <summary><para>Core Tooltip View (Deprecated)</para>
	/// <para>msdyn_schedulercoretooltipview</para></summary>
	public const string CoreTooltipView_Deprecated = "msdyn_schedulercoretooltipview";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Custom Tab Name</para>
	/// <para>msdyn_customtabname</para></summary>
	public const string CustomTabName = "msdyn_customtabname";
	/// <summary><para>Custom Tab Web Resource</para>
	/// <para>msdyn_customtabwebresource</para></summary>
	public const string CustomTabWebResource = "msdyn_customtabwebresource";
	/// <summary><para>Field Service Details View (Deprecated)</para>
	/// <para>msdyn_schedulerfieldservicedetailsview</para></summary>
	public const string FieldServiceDetailsView_Deprecated = "msdyn_schedulerfieldservicedetailsview";
	/// <summary><para>Field Service Slot Text Template (Deprecated)</para>
	/// <para>msdyn_schedulerfieldserviceslottexttemplate</para></summary>
	public const string FieldServiceSlotTextTemplate_Deprecated = "msdyn_schedulerfieldserviceslottexttemplate";
	/// <summary><para>Field Service Tooltip View (Deprecated)</para>
	/// <para>msdyn_schedulerfieldservicetooltipview</para></summary>
	public const string FieldServiceTooltipView_Deprecated = "msdyn_schedulerfieldservicetooltipview";
	/// <summary><para>Fully Booked Color</para>
	/// <para>msdyn_fullybookedcolor</para></summary>
	public const string FullyBookedColor = "msdyn_fullybookedcolor";
	/// <summary><para>Hide Canceled</para>
	/// <para>msdyn_hidecancelled</para></summary>
	public const string HideCanceled = "msdyn_hidecancelled";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Is Public (Deprecated)</para>
	/// <para>msdyn_ispublic</para></summary>
	public const string IsPublic_Deprecated = "msdyn_ispublic";
	/// <summary><para>Is Synchronize Resources</para>
	/// <para>msdyn_issynchronizeresources</para></summary>
	public const string IsSynchronizeResources = "msdyn_issynchronizeresources";
	/// <summary><para>Map View Tab Placement</para>
	/// <para>msdyn_mapviewtabplacement</para></summary>
	public const string MapViewTabPlacement = "msdyn_mapviewtabplacement";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Not Booked Color</para>
	/// <para>msdyn_notbookedcolor</para></summary>
	public const string NotBookedColor = "msdyn_notbookedcolor";
	/// <summary><para>Order Number</para>
	/// <para>msdyn_ordernumber</para></summary>
	public const string OrderNumber = "msdyn_ordernumber";
	/// <summary><para>Organizational Unit Tooltips View Id</para>
	/// <para>msdyn_organizationalunittooltipsviewid</para></summary>
	public const string OrganizationalUnitTooltipsViewId = "msdyn_organizationalunittooltipsviewid";
	/// <summary><para>Organizational Unit View Id</para>
	/// <para>msdyn_organizationalunitviewid</para></summary>
	public const string OrganizationalUnitViewId = "msdyn_organizationalunitviewid";
	/// <summary><para>Overbooked Color</para>
	/// <para>msdyn_overbookedcolor</para></summary>
	public const string OverbookedColor = "msdyn_overbookedcolor";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Partially Booked Color</para>
	/// <para>msdyn_partiallybookedcolor</para></summary>
	public const string PartiallyBookedColor = "msdyn_partiallybookedcolor";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Requirements View Id</para>
	/// <para>msdyn_unscheduledrequirementsviewid</para></summary>
	public const string RequirementsViewId = "msdyn_unscheduledrequirementsviewid";
	/// <summary><para>Resource Details View</para>
	/// <para>msdyn_schedulerresourcedetailsview</para></summary>
	public const string ResourceDetailsView = "msdyn_schedulerresourcedetailsview";
	/// <summary><para>Resource Requirement View Page Record Count</para>
	/// <para>msdyn_unscheduledwopagereccount</para></summary>
	public const string ResourceRequirementViewPageRecordCount = "msdyn_unscheduledwopagereccount";
	/// <summary><para>Resource Tooltips View</para>
	/// <para>msdyn_schedulerresourcetooltipview</para></summary>
	public const string ResourceTooltipsView = "msdyn_schedulerresourcetooltipview";
	/// <summary><para>Schedule Board Setting</para>
	/// <para>msdyn_scheduleboardsettingid</para></summary>
	public const string ScheduleBoardSettingId = "msdyn_scheduleboardsettingid";
	/// <summary><para>Scheduler Alerts View</para>
	/// <para>msdyn_scheduleralertsview</para></summary>
	public const string SchedulerAlertsView = "msdyn_scheduleralertsview";
	/// <summary><para>Settings</para>
	/// <para>msdyn_settings</para></summary>
	public const string Settings = "msdyn_settings";
	/// <summary><para>Share Type</para>
	/// <para>msdyn_sharetype</para></summary>
	public const string ShareType = "msdyn_sharetype";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Tab name.</para>
	/// <para>msdyn_tabname</para></summary>
	public const string TabName = "msdyn_tabname";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Unit Details View (Deprecated)</para>
	/// <para>msdyn_schedulerbusinessunitdetailsview</para></summary>
	public const string UnitDetailsView_Deprecated = "msdyn_schedulerbusinessunitdetailsview";
	/// <summary><para>Unscheduled View (Deprecated)</para>
	/// <para>msdyn_unscheduledviewid</para></summary>
	public const string UnscheduledView_Deprecated = "msdyn_unscheduledviewid";
	/// <summary><para>Unscheduled WO Tooltips View (Deprecated)</para>
	/// <para>msdyn_unscheduledwotooltipsviewid</para></summary>
	public const string UnscheduledWOTooltipsView_Deprecated = "msdyn_unscheduledwotooltipsviewid";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Working Hours Color</para>
	/// <para>msdyn_workinghourscolor</para></summary>
	public const string WorkingHoursColor = "msdyn_workinghourscolor";
}

    }
}
