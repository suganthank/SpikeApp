// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("actioncard")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ActionCard : BaseProxyClass
    {
        public new const string LogicalName = "actioncard";
        public const int ObjectTypeCode = 9962;
        public const string PrimaryIdAttribute = "actioncardid";
        public const string PrimaryNameAttribute = "title";
        
        static ActionCard()
        {
            BaseProxyClass.RegisterProxyType(typeof(ActionCard), "actioncard");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ActionCard() : base(new Entity("actioncard")) { }
        public ActionCard(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ActionCard>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: recordidname</para>
///<para>Max Length: 400 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recordidname")]
public string RecordIdName
{
	get { return this.GetPropertyValue<string>("recordidname"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 4000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
	set { this.SetPropertyValue("regardingobjectidname", value, 4000, "RegardingObjectIdName"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: cardtypeidname</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("cardtypeidname")]
public string CardTypeIdName
{
	get { return this.GetPropertyValue<string>("cardtypeidname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: recordidobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("recordidobjecttypecode")]
public string RecordIdObjectTypeCode
{
	get { return this.GetPropertyValue<string>("recordidobjecttypecode"); }
	set { this.SetPropertyValue<string>("recordidobjecttypecode", value, "RecordIdObjectTypeCode"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: actioncardid</para>
///</summary>
[AttributeLogicalNameAttribute("actioncardid")]
public Guid ActionCardId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
/// <summary>
///Logical Name: source
/// </summary>
[AttributeLogicalNameAttribute("source")]
public eActionCardSource? ActionCardSource
{
	get
	{
		if (ActionCardSource_OptionSetValue != null) { return (eActionCardSource)ActionCardSource_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActionCardSource_OptionSetValue = new OptionSetValue((int)value); }
		else this.ActionCardSource_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: source</para>
///</summary>
[AttributeLogicalNameAttribute("source")]
public OptionSetValue ActionCardSource_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("source"); }
	set { this.SetPropertyValue<OptionSetValue>("source", value, "ActionCardSource_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ActionCardSource_Text(IOrganizationService Service)
{
	return this.ActionCardSource_OptionSetValue.GetOptionSetText(Service, this, "source");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ActionCardSource_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ActionCardSource_OptionSetValue.Value);
}
/// <summary>
///Logical Name: state
/// </summary>
[AttributeLogicalNameAttribute("state")]
public eActionCardState? ActionCardState
{
	get
	{
		if (ActionCardState_OptionSetValue != null) { return (eActionCardState)ActionCardState_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActionCardState_OptionSetValue = new OptionSetValue((int)value); }
		else this.ActionCardState_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: state</para>
///</summary>
[AttributeLogicalNameAttribute("state")]
public OptionSetValue ActionCardState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("state"); }
	set { this.SetPropertyValue<OptionSetValue>("state", value, "ActionCardState_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ActionCardState_Text(IOrganizationService Service)
{
	return this.ActionCardState_OptionSetValue.GetOptionSetText(Service, this, "state");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ActionCardState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ActionCardState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 8192 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string CardDescription
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 8192, "CardDescription"); }
}
///<summary>
///<para>Logical Name: cardtypeid</para>
///</summary>
[AttributeLogicalNameAttribute("cardtypeid")]
public EntityReference CardType
{
	get { return this.GetPropertyValue<EntityReference>("cardtypeid"); }
	set { this.SetPropertyValue<EntityReference>("cardtypeid", value, "CardType"); }
}
///<summary>
///<para>Logical Name: cardtype</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("cardtype")]
public int? CardTypeENUM
{
	get { return this.GetPropertyValue<int?>("cardtype"); }
	set { this.SetPropertyValue("cardtype", (int?)value, (int)0, (int)2147483647, "CardTypeENUM"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: referencetokens</para>
///<para>Max Length: 8192 characters</para>
///</summary>
[AttributeLogicalNameAttribute("referencetokens")]
public string DataAssociatedConstructingTitleAndBody
{
	get { return this.GetPropertyValue<string>("referencetokens"); }
	set { this.SetPropertyValue("referencetokens", value, 8192, "DataAssociatedConstructingTitleAndBody"); }
}
///<summary>
///<para>Logical Name: data</para>
///<para>Max Length: 8192 characters</para>
///</summary>
[AttributeLogicalNameAttribute("data")]
public string DataAssociatedWithCardCommandbarActions
{
	get { return this.GetPropertyValue<string>("data"); }
	set { this.SetPropertyValue("data", value, 8192, "DataAssociatedWithCardCommandbarActions"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: expirydate</para>
///</summary>
[AttributeLogicalNameAttribute("expirydate")]
public DateTime? ExpiryDate
{
	get { return this.GetPropertyValue<DateTime?>("expirydate"); }
	set { this.SetPropertyValue<DateTime?>("expirydate", value, "ExpiryDate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: priority</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("priority")]
public int? Priority
{
	get { return this.GetPropertyValue<int?>("priority"); }
	set { this.SetPropertyValue("priority", (int?)value, (int)0, (int)2147483647, "Priority"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: recordid</para>
///</summary>
[AttributeLogicalNameAttribute("recordid")]
public EntityReference RecordId
{
	get { return this.GetPropertyValue<EntityReference>("recordid"); }
	set { this.SetPropertyValue<EntityReference>("recordid", value, "RecordId"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: startdate</para>
///</summary>
[AttributeLogicalNameAttribute("startdate")]
public DateTime? StartDate
{
	get { return this.GetPropertyValue<DateTime?>("startdate"); }
	set { this.SetPropertyValue<DateTime?>("startdate", value, "StartDate"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string Title
{
	get { return this.GetPropertyValue<string>("title"); }
	set { this.SetPropertyValue("title", value, 200, "Title"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: visibility</para>
///<para>True = Private</para>
///<para>False = Public</para>
///</summary>
[AttributeLogicalNameAttribute("visibility")]
public bool? VisibiliyStatusOfActionCard
{
	get { return this.GetPropertyValue<bool?>("visibility"); }
	set { this.SetPropertyValue<bool?>("visibility", value, "VisibiliyStatusOfActionCard"); }
}


        /// <summary>
/// <para><b>ActionCardUserState (ActionCardId)</b></para>
/// <para>Schema Name: ActionCardUserState_ActionCard</para>
/// </summary>
public List<ActionCardUserState> GetActionCardUserStates_ActionCardId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActionCardUserState>(Service, this.Id, "actioncarduserstate", "actioncardid", Columns); }
/// <summary>
/// <para><b>ActionCardUserState (ActionCardId)</b></para>
/// <para>Schema Name: ActionCardUserState_ActionCard</para>
/// </summary>
public List<ActionCardUserState> GetActionCardUserStates_ActionCardId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActionCardUserState>(Service, this.Id, "actioncarduserstate", "actioncardid", Columns); }


        

        

        public enum eActionCardSource
{
	///<summary><para>CRM</para>
	///<para>Value = 1</para></summary>
	[Description("CRM")]
	CRM = 1, 
	///<summary><para>Exchange</para>
	///<para>Value = 2</para></summary>
	[Description("Exchange")]
	Exchange = 2
}
public enum eActionCardState
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Dismissed</para>
	///<para>Value = 1</para></summary>
	[Description("Dismissed")]
	Dismissed = 1, 
	///<summary><para>Completed</para>
	///<para>Value = 2</para></summary>
	[Description("Completed")]
	Completed = 2
}


        public static class Properties
{
	/// <summary><para>recordidname</para>
	/// <para>recordidname</para></summary>
	public const string RecordIdName = "recordidname";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>cardtypeidname</para>
	/// <para>cardtypeidname</para></summary>
	public const string CardTypeIdName = "cardtypeidname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>recordidobjecttypecode</para>
	/// <para>recordidobjecttypecode</para></summary>
	public const string RecordIdObjectTypeCode = "recordidobjecttypecode";
	/// <summary><para>Action Card</para>
	/// <para>actioncardid</para></summary>
	public const string ActionCardId = "actioncardid";
	/// <summary><para>Action Card Source</para>
	/// <para>source</para></summary>
	public const string ActionCardSource = "source";
	/// <summary><para>Action Card State</para>
	/// <para>state</para></summary>
	public const string ActionCardState = "state";
	/// <summary><para>Card Description</para>
	/// <para>description</para></summary>
	public const string CardDescription = "description";
	/// <summary><para>Card Type</para>
	/// <para>cardtypeid</para></summary>
	public const string CardType = "cardtypeid";
	/// <summary><para>CardType ENUM</para>
	/// <para>cardtype</para></summary>
	public const string CardTypeENUM = "cardtype";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Data Associated constructing title and body</para>
	/// <para>referencetokens</para></summary>
	public const string DataAssociatedConstructingTitleAndBody = "referencetokens";
	/// <summary><para>Data Associated with Card Commandbar Actions</para>
	/// <para>data</para></summary>
	public const string DataAssociatedWithCardCommandbarActions = "data";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Expiry Date</para>
	/// <para>expirydate</para></summary>
	public const string ExpiryDate = "expirydate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Priority</para>
	/// <para>priority</para></summary>
	public const string Priority = "priority";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>RecordId</para>
	/// <para>recordid</para></summary>
	public const string RecordId = "recordid";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Start Date</para>
	/// <para>startdate</para></summary>
	public const string StartDate = "startdate";
	/// <summary><para>Title</para>
	/// <para>title</para></summary>
	public const string Title = "title";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Visibiliy Status of ActionCard</para>
	/// <para>visibility</para></summary>
	public const string VisibiliyStatusOfActionCard = "visibility";
}

    }
}
