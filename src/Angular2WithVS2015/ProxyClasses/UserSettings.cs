// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("usersettings")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class UserSettings : BaseProxyClass
    {
        public new const string LogicalName = "usersettings";
        public const int ObjectTypeCode = 150;
        public const string PrimaryIdAttribute = "systemuserid";
        public const string PrimaryNameAttribute = "";
        
        static UserSettings()
        {
            BaseProxyClass.RegisterProxyType(typeof(UserSettings), "usersettings");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public UserSettings() : base(new Entity("usersettings")) { }
        public UserSettings(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<UserSettings>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: workdaystarttime</para>
///<para>Max Length: 5 characters</para>
///</summary>
[AttributeLogicalNameAttribute("workdaystarttime")]
public string WorkdayStartTime
{
	get { return this.GetPropertyValue<string>("workdaystarttime"); }
	set { this.SetPropertyValue("workdaystarttime", value, 5, "WorkdayStartTime"); }
}
///<summary>
///<para>Logical Name: uilanguageid</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("uilanguageid")]
public int? UILanguageId
{
	get { return this.GetPropertyValue<int?>("uilanguageid"); }
	set { this.SetPropertyValue("uilanguageid", (int?)value, (int)0, (int)2147483647, "UILanguageId"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: lastalertsviewedtime</para>
///</summary>
[AttributeLogicalNameAttribute("lastalertsviewedtime")]
public DateTime? LastAlertsViewedTime
{
	get { return this.GetPropertyValue<DateTime?>("lastalertsviewedtime"); }
	set { this.SetPropertyValue<DateTime?>("lastalertsviewedtime", value, "LastAlertsViewedTime"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: usecrmformforcontact</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("usecrmformforcontact")]
public bool? UseCrmFormForContact
{
	get { return this.GetPropertyValue<bool?>("usecrmformforcontact"); }
	set { this.SetPropertyValue<bool?>("usecrmformforcontact", value, "UseCrmFormForContact"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: helplanguageid</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("helplanguageid")]
public int? HelpLanguageId
{
	get { return this.GetPropertyValue<int?>("helplanguageid"); }
	set { this.SetPropertyValue("helplanguageid", (int?)value, (int)0, (int)2147483647, "HelpLanguageId"); }
}
///<summary>
///<para>Logical Name: getstartedpanecontentenabled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("getstartedpanecontentenabled")]
public bool? GetStartedPaneContentEnabled
{
	get { return this.GetPropertyValue<bool?>("getstartedpanecontentenabled"); }
	set { this.SetPropertyValue<bool?>("getstartedpanecontentenabled", value, "GetStartedPaneContentEnabled"); }
}
///<summary>
///<para>Logical Name: longdateformatcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("longdateformatcode")]
public int? LongDateFormatCode
{
	get { return this.GetPropertyValue<int?>("longdateformatcode"); }
	set { this.SetPropertyValue("longdateformatcode", (int?)value, (int)-2147483648, (int)2147483647, "LongDateFormatCode"); }
}
///<summary>
///<para>Logical Name: splitviewstate</para>
///<para>True = Expanded</para>
///<para>False = Collapsed</para>
///</summary>
[AttributeLogicalNameAttribute("splitviewstate")]
public bool? SplitViewState
{
	get { return this.GetPropertyValue<bool?>("splitviewstate"); }
	set { this.SetPropertyValue<bool?>("splitviewstate", value, "SplitViewState"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: dateseparator</para>
///<para>Max Length: 5 characters</para>
///</summary>
[AttributeLogicalNameAttribute("dateseparator")]
public string DateSeparator
{
	get { return this.GetPropertyValue<string>("dateseparator"); }
	set { this.SetPropertyValue("dateseparator", value, 5, "DateSeparator"); }
}
///<summary>
///<para>Logical Name: defaultcalendarview</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("defaultcalendarview")]
public int? DefaultCalendarView
{
	get { return this.GetPropertyValue<int?>("defaultcalendarview"); }
	set { this.SetPropertyValue("defaultcalendarview", (int?)value, (int)-2147483648, (int)2147483647, "DefaultCalendarView"); }
}
///<summary>
///<para>Logical Name: emailpassword</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailpassword")]
public string EmailPassword
{
	get { return this.GetPropertyValue<string>("emailpassword"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: systemuserid</para>
///</summary>
[AttributeLogicalNameAttribute("systemuserid")]
public Guid SystemUserId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: outlooksyncinterval</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("outlooksyncinterval")]
public int? OutlookSyncInterval
{
	get { return this.GetPropertyValue<int?>("outlooksyncinterval"); }
	set { this.SetPropertyValue("outlooksyncinterval", (int?)value, (int)-2147483648, (int)2147483647, "OutlookSyncInterval"); }
}
///<summary>
///<para>Logical Name: timezonedaylightday</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylightday")]
public int? TimeZoneDaylightDay
{
	get { return this.GetPropertyValue<int?>("timezonedaylightday"); }
	set { this.SetPropertyValue<int?>("timezonedaylightday", value, "TimeZoneDaylightDay"); }
}
///<summary>
///<para>Logical Name: calendartype</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("calendartype")]
public int? CalendarType
{
	get { return this.GetPropertyValue<int?>("calendartype"); }
	set { this.SetPropertyValue("calendartype", (int?)value, (int)-2147483648, (int)2147483647, "CalendarType"); }
}
///<summary>
///<para>Logical Name: timezonestandardmonth</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandardmonth")]
public int? TimeZoneStandardMonth
{
	get { return this.GetPropertyValue<int?>("timezonestandardmonth"); }
	set { this.SetPropertyValue<int?>("timezonestandardmonth", value, "TimeZoneStandardMonth"); }
}
///<summary>
///<para>Logical Name: userprofile</para>
///<para>Max Length: 1024 characters</para>
///</summary>
[AttributeLogicalNameAttribute("userprofile")]
public string UserProfile
{
	get { return this.GetPropertyValue<string>("userprofile"); }
	set { this.SetPropertyValue("userprofile", value, 1024, "UserProfile"); }
}
///<summary>
///<para>Logical Name: dateformatstring</para>
///<para>Max Length: 255 characters</para>
///</summary>
[AttributeLogicalNameAttribute("dateformatstring")]
public string DateFormatString
{
	get { return this.GetPropertyValue<string>("dateformatstring"); }
	set { this.SetPropertyValue("dateformatstring", value, 255, "DateFormatString"); }
}
///<summary>
///<para>Logical Name: timezonestandardsecond</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandardsecond")]
public int? TimeZoneStandardSecond
{
	get { return this.GetPropertyValue<int?>("timezonestandardsecond"); }
	set { this.SetPropertyValue<int?>("timezonestandardsecond", value, "TimeZoneStandardSecond"); }
}
///<summary>
///<para>Logical Name: personalizationsettings</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("personalizationsettings")]
public string PersonalizationSettings
{
	get { return this.GetPropertyValue<string>("personalizationsettings"); }
	set { this.SetPropertyValue("personalizationsettings", value, 1073741823, "PersonalizationSettings"); }
}
///<summary>
///<para>Logical Name: timezonedaylightminute</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylightminute")]
public int? TimeZoneDaylightMinute
{
	get { return this.GetPropertyValue<int?>("timezonedaylightminute"); }
	set { this.SetPropertyValue<int?>("timezonedaylightminute", value, "TimeZoneDaylightMinute"); }
}
///<summary>
///<para>Logical Name: pmdesignator</para>
///<para>Max Length: 25 characters</para>
///</summary>
[AttributeLogicalNameAttribute("pmdesignator")]
public string PMDesignator
{
	get { return this.GetPropertyValue<string>("pmdesignator"); }
	set { this.SetPropertyValue("pmdesignator", value, 25, "PMDesignator"); }
}
///<summary>
///<para>Logical Name: synccontactcompany</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("synccontactcompany")]
public bool? SyncContactCompany
{
	get { return this.GetPropertyValue<bool?>("synccontactcompany"); }
	set { this.SetPropertyValue<bool?>("synccontactcompany", value, "SyncContactCompany"); }
}
///<summary>
///<para>Logical Name: timeseparator</para>
///<para>Max Length: 5 characters</para>
///</summary>
[AttributeLogicalNameAttribute("timeseparator")]
public string TimeSeparator
{
	get { return this.GetPropertyValue<string>("timeseparator"); }
	set { this.SetPropertyValue("timeseparator", value, 5, "TimeSeparator"); }
}
///<summary>
///<para>Logical Name: pricingdecimalprecision</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("pricingdecimalprecision")]
public int? PricingDecimalPrecision
{
	get { return this.GetPropertyValue<int?>("pricingdecimalprecision"); }
	set { this.SetPropertyValue("pricingdecimalprecision", (int?)value, (int)-2147483648, (int)2147483647, "PricingDecimalPrecision"); }
}
///<summary>
///<para>Logical Name: allowemailcredentials</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("allowemailcredentials")]
public bool? AllowEmailCredentials
{
	get { return this.GetPropertyValue<bool?>("allowemailcredentials"); }
}
///<summary>
///<para>Logical Name: currencysymbol</para>
///<para>Max Length: 13 characters</para>
///</summary>
[AttributeLogicalNameAttribute("currencysymbol")]
public string CurrencySymbol
{
	get { return this.GetPropertyValue<string>("currencysymbol"); }
	set { this.SetPropertyValue("currencysymbol", value, 13, "CurrencySymbol"); }
}
///<summary>
///<para>Logical Name: timezonestandardday</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandardday")]
public int? TimeZoneStandardDay
{
	get { return this.GetPropertyValue<int?>("timezonestandardday"); }
	set { this.SetPropertyValue<int?>("timezonestandardday", value, "TimeZoneStandardDay"); }
}
///<summary>
///<para>Logical Name: paginglimit</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("paginglimit")]
public int? PagingLimit
{
	get { return this.GetPropertyValue<int?>("paginglimit"); }
	set { this.SetPropertyValue("paginglimit", (int?)value, (int)0, (int)2147483647, "PagingLimit"); }
}
///<summary>
///<para>Logical Name: issendasallowed</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("issendasallowed")]
public bool? IsSendAsAllowed
{
	get { return this.GetPropertyValue<bool?>("issendasallowed"); }
	set { this.SetPropertyValue<bool?>("issendasallowed", value, "IsSendAsAllowed"); }
}
///<summary>
///<para>Logical Name: defaultdashboardid</para>
///</summary>
[AttributeLogicalNameAttribute("defaultdashboardid")]
public Guid DefaultDashboardId
{
	get { return this.GetPropertyValue<Guid>("defaultdashboardid"); }
	set { this.SetPropertyValue<Guid>("defaultdashboardid", value, "DefaultDashboardId"); }
}
///<summary>
///<para>Logical Name: negativeformatcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("negativeformatcode")]
public int? NegativeFormatCode
{
	get { return this.GetPropertyValue<int?>("negativeformatcode"); }
	set { this.SetPropertyValue("negativeformatcode", (int?)value, (int)-2147483648, (int)2147483647, "NegativeFormatCode"); }
}
///<summary>
///<para>Logical Name: showweeknumber</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("showweeknumber")]
public bool? ShowWeekNumber
{
	get { return this.GetPropertyValue<bool?>("showweeknumber"); }
	set { this.SetPropertyValue<bool?>("showweeknumber", value, "ShowWeekNumber"); }
}
///<summary>
///<para>Logical Name: timezonedaylightsecond</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylightsecond")]
public int? TimeZoneDaylightSecond
{
	get { return this.GetPropertyValue<int?>("timezonedaylightsecond"); }
	set { this.SetPropertyValue<int?>("timezonedaylightsecond", value, "TimeZoneDaylightSecond"); }
}
///<summary>
///<para>Logical Name: timezonedaylightmonth</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylightmonth")]
public int? TimeZoneDaylightMonth
{
	get { return this.GetPropertyValue<int?>("timezonedaylightmonth"); }
	set { this.SetPropertyValue<int?>("timezonedaylightmonth", value, "TimeZoneDaylightMonth"); }
}
///<summary>
///<para>Logical Name: timezonecode</para>
///</summary>
[AttributeLogicalNameAttribute("timezonecode")]
public int? TimeZoneCode
{
	get { return this.GetPropertyValue<int?>("timezonecode"); }
	set { this.SetPropertyValue<int?>("timezonecode", value, "TimeZoneCode"); }
}
///<summary>
///<para>Logical Name: numberseparator</para>
///<para>Max Length: 5 characters</para>
///</summary>
[AttributeLogicalNameAttribute("numberseparator")]
public string NumberSeparator
{
	get { return this.GetPropertyValue<string>("numberseparator"); }
	set { this.SetPropertyValue("numberseparator", value, 5, "NumberSeparator"); }
}
///<summary>
///<para>Logical Name: timezonestandardminute</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandardminute")]
public int? TimeZoneStandardMinute
{
	get { return this.GetPropertyValue<int?>("timezonestandardminute"); }
	set { this.SetPropertyValue<int?>("timezonestandardminute", value, "TimeZoneStandardMinute"); }
}
///<summary>
///<para>Logical Name: numbergroupformat</para>
///<para>Max Length: 25 characters</para>
///</summary>
[AttributeLogicalNameAttribute("numbergroupformat")]
public string NumberGroupFormat
{
	get { return this.GetPropertyValue<string>("numbergroupformat"); }
	set { this.SetPropertyValue("numbergroupformat", value, 25, "NumberGroupFormat"); }
}
///<summary>
///<para>Logical Name: timezonedaylightyear</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylightyear")]
public int? TimeZoneDaylightYear
{
	get { return this.GetPropertyValue<int?>("timezonedaylightyear"); }
	set { this.SetPropertyValue<int?>("timezonedaylightyear", value, "TimeZoneDaylightYear"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: autocreatecontactonpromote</para>
///</summary>
[AttributeLogicalNameAttribute("autocreatecontactonpromote")]
public int? AutoCreateContactOnPromote
{
	get { return this.GetPropertyValue<int?>("autocreatecontactonpromote"); }
	set { this.SetPropertyValue<int?>("autocreatecontactonpromote", value, "AutoCreateContactOnPromote"); }
}
///<summary>
///<para>Logical Name: timeformatcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timeformatcode")]
public int? TimeFormatCode
{
	get { return this.GetPropertyValue<int?>("timeformatcode"); }
	set { this.SetPropertyValue("timeformatcode", (int?)value, (int)-2147483648, (int)2147483647, "TimeFormatCode"); }
}
///<summary>
///<para>Logical Name: timezonedaylightbias</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylightbias")]
public int? TimeZoneDaylightBias
{
	get { return this.GetPropertyValue<int?>("timezonedaylightbias"); }
	set { this.SetPropertyValue("timezonedaylightbias", (int?)value, (int)-2147483648, (int)2147483647, "TimeZoneDaylightBias"); }
}
///<summary>
///<para>Logical Name: timezonestandardyear</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandardyear")]
public int? TimeZoneStandardYear
{
	get { return this.GetPropertyValue<int?>("timezonestandardyear"); }
	set { this.SetPropertyValue<int?>("timezonestandardyear", value, "TimeZoneStandardYear"); }
}
///<summary>
///<para>Logical Name: homepagearea</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("homepagearea")]
public string HomepageArea
{
	get { return this.GetPropertyValue<string>("homepagearea"); }
	set { this.SetPropertyValue("homepagearea", value, 200, "HomepageArea"); }
}
///<summary>
///<para>Logical Name: decimalsymbol</para>
///<para>Max Length: 5 characters</para>
///</summary>
[AttributeLogicalNameAttribute("decimalsymbol")]
public string DecimalSymbol
{
	get { return this.GetPropertyValue<string>("decimalsymbol"); }
	set { this.SetPropertyValue("decimalsymbol", value, 5, "DecimalSymbol"); }
}
///<summary>
///<para>Logical Name: dateformatcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("dateformatcode")]
public int? DateFormatCode
{
	get { return this.GetPropertyValue<int?>("dateformatcode"); }
	set { this.SetPropertyValue("dateformatcode", (int?)value, (int)-2147483648, (int)2147483647, "DateFormatCode"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: isduplicatedetectionenabledwhengoingonline</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isduplicatedetectionenabledwhengoingonline")]
public bool? IsDuplicateDetectionEnabledWhenGoingOnline
{
	get { return this.GetPropertyValue<bool?>("isduplicatedetectionenabledwhengoingonline"); }
	set { this.SetPropertyValue<bool?>("isduplicatedetectionenabledwhengoingonline", value, "IsDuplicateDetectionEnabledWhenGoingOnline"); }
}
///<summary>
///<para>Logical Name: emailusername</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailusername")]
public string EmailUsername
{
	get { return this.GetPropertyValue<string>("emailusername"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: advancedfindstartupmode</para>
///</summary>
[AttributeLogicalNameAttribute("advancedfindstartupmode")]
public int? AdvancedFindStartupMode
{
	get { return this.GetPropertyValue<int?>("advancedfindstartupmode"); }
	set { this.SetPropertyValue<int?>("advancedfindstartupmode", value, "AdvancedFindStartupMode"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: ignoreunsolicitedemail</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("ignoreunsolicitedemail")]
public bool? IgnoreUnsolicitedEmail
{
	get { return this.GetPropertyValue<bool?>("ignoreunsolicitedemail"); }
	set { this.SetPropertyValue<bool?>("ignoreunsolicitedemail", value, "IgnoreUnsolicitedEmail"); }
}
///<summary>
///<para>Logical Name: timezonedaylightdayofweek</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylightdayofweek")]
public int? TimeZoneDaylightDayOfWeek
{
	get { return this.GetPropertyValue<int?>("timezonedaylightdayofweek"); }
	set { this.SetPropertyValue<int?>("timezonedaylightdayofweek", value, "TimeZoneDaylightDayOfWeek"); }
}
///<summary>
///<para>Logical Name: amdesignator</para>
///<para>Max Length: 25 characters</para>
///</summary>
[AttributeLogicalNameAttribute("amdesignator")]
public string AMDesignator
{
	get { return this.GetPropertyValue<string>("amdesignator"); }
	set { this.SetPropertyValue("amdesignator", value, 25, "AMDesignator"); }
}
///<summary>
///<para>Logical Name: homepagelayout</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("homepagelayout")]
public string HomepageLayout
{
	get { return this.GetPropertyValue<string>("homepagelayout"); }
	set { this.SetPropertyValue("homepagelayout", value, 2000, "HomepageLayout"); }
}
///<summary>
///<para>Logical Name: currencyformatcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("currencyformatcode")]
public int? CurrencyFormatCode
{
	get { return this.GetPropertyValue<int?>("currencyformatcode"); }
	set { this.SetPropertyValue("currencyformatcode", (int?)value, (int)-2147483648, (int)2147483647, "CurrencyFormatCode"); }
}
///<summary>
///<para>Logical Name: timezonestandardbias</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandardbias")]
public int? TimeZoneStandardBias
{
	get { return this.GetPropertyValue<int?>("timezonestandardbias"); }
	set { this.SetPropertyValue("timezonestandardbias", (int?)value, (int)-2147483648, (int)2147483647, "TimeZoneStandardBias"); }
}
///<summary>
///<para>Logical Name: fullnameconventioncode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("fullnameconventioncode")]
public int? FullNameConventionCode
{
	get { return this.GetPropertyValue<int?>("fullnameconventioncode"); }
	set { this.SetPropertyValue("fullnameconventioncode", (int?)value, (int)-2147483648, (int)2147483647, "FullNameConventionCode"); }
}
///<summary>
///<para>Logical Name: businessunitidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitidname")]
public string BusinessUnitIdName
{
	get { return this.GetPropertyValue<string>("businessunitidname"); }
}
///<summary>
///<para>Logical Name: localeid</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("localeid")]
public int? LocaleId
{
	get { return this.GetPropertyValue<int?>("localeid"); }
	set { this.SetPropertyValue("localeid", (int?)value, (int)-2147483648, (int)2147483647, "LocaleId"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: trackingtokenid</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("trackingtokenid")]
public int? TrackingTokenId
{
	get { return this.GetPropertyValue<int?>("trackingtokenid"); }
	set { this.SetPropertyValue("trackingtokenid", (int?)value, (int)-2147483648, (int)2147483647, "TrackingTokenId"); }
}
///<summary>
///<para>Logical Name: isautodatacaptureenabled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isautodatacaptureenabled")]
public bool? IsAutoDataCaptureEnabled
{
	get { return this.GetPropertyValue<bool?>("isautodatacaptureenabled"); }
	set { this.SetPropertyValue<bool?>("isautodatacaptureenabled", value, "IsAutoDataCaptureEnabled"); }
}
///<summary>
///<para>Logical Name: timezonestandarddayofweek</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandarddayofweek")]
public int? TimeZoneStandardDayOfWeek
{
	get { return this.GetPropertyValue<int?>("timezonestandarddayofweek"); }
	set { this.SetPropertyValue<int?>("timezonestandarddayofweek", value, "TimeZoneStandardDayOfWeek"); }
}
///<summary>
///<para>Logical Name: nexttrackingnumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("nexttrackingnumber")]
public int? NextTrackingNumber
{
	get { return this.GetPropertyValue<int?>("nexttrackingnumber"); }
	set { this.SetPropertyValue("nexttrackingnumber", (int?)value, (int)-2147483648, (int)2147483647, "NextTrackingNumber"); }
}
///<summary>
///<para>Logical Name: currencydecimalprecision</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("currencydecimalprecision")]
public int? CurrencyDecimalPrecision
{
	get { return this.GetPropertyValue<int?>("currencydecimalprecision"); }
	set { this.SetPropertyValue("currencydecimalprecision", (int?)value, (int)-2147483648, (int)2147483647, "CurrencyDecimalPrecision"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: timezonebias</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezonebias")]
public int? TimeZoneBias
{
	get { return this.GetPropertyValue<int?>("timezonebias"); }
	set { this.SetPropertyValue("timezonebias", (int?)value, (int)-2147483648, (int)2147483647, "TimeZoneBias"); }
}
///<summary>
///<para>Logical Name: addressbooksyncinterval</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("addressbooksyncinterval")]
public int? AddressBookSyncInterval
{
	get { return this.GetPropertyValue<int?>("addressbooksyncinterval"); }
	set { this.SetPropertyValue("addressbooksyncinterval", (int?)value, (int)-2147483648, (int)2147483647, "AddressBookSyncInterval"); }
}
///<summary>
///<para>Logical Name: usecrmformforemail</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("usecrmformforemail")]
public bool? UseCrmFormForEmail
{
	get { return this.GetPropertyValue<bool?>("usecrmformforemail"); }
	set { this.SetPropertyValue<bool?>("usecrmformforemail", value, "UseCrmFormForEmail"); }
}
///<summary>
///<para>Logical Name: timezonestandardhour</para>
///</summary>
[AttributeLogicalNameAttribute("timezonestandardhour")]
public int? TimeZoneStandardHour
{
	get { return this.GetPropertyValue<int?>("timezonestandardhour"); }
	set { this.SetPropertyValue<int?>("timezonestandardhour", value, "TimeZoneStandardHour"); }
}
///<summary>
///<para>Logical Name: usecrmformforappointment</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("usecrmformforappointment")]
public bool? UseCrmFormForAppointment
{
	get { return this.GetPropertyValue<bool?>("usecrmformforappointment"); }
	set { this.SetPropertyValue<bool?>("usecrmformforappointment", value, "UseCrmFormForAppointment"); }
}
///<summary>
///<para>Logical Name: offlinesyncinterval</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("offlinesyncinterval")]
public int? OfflineSyncInterval
{
	get { return this.GetPropertyValue<int?>("offlinesyncinterval"); }
	set { this.SetPropertyValue("offlinesyncinterval", (int?)value, (int)-2147483648, (int)2147483647, "OfflineSyncInterval"); }
}
///<summary>
///<para>Logical Name: useimagestrips</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("useimagestrips")]
public bool? UseImageStrips
{
	get { return this.GetPropertyValue<bool?>("useimagestrips"); }
	set { this.SetPropertyValue<bool?>("useimagestrips", value, "UseImageStrips"); }
}
///<summary>
///<para>Logical Name: timezonedaylighthour</para>
///</summary>
[AttributeLogicalNameAttribute("timezonedaylighthour")]
public int? TimeZoneDaylightHour
{
	get { return this.GetPropertyValue<int?>("timezonedaylighthour"); }
	set { this.SetPropertyValue<int?>("timezonedaylighthour", value, "TimeZoneDaylightHour"); }
}
///<summary>
///<para>Logical Name: usecrmformfortask</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("usecrmformfortask")]
public bool? UseCrmFormForTask
{
	get { return this.GetPropertyValue<bool?>("usecrmformfortask"); }
	set { this.SetPropertyValue<bool?>("usecrmformfortask", value, "UseCrmFormForTask"); }
}
///<summary>
///<para>Logical Name: negativecurrencyformatcode</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 15</para>
///</summary>
[AttributeLogicalNameAttribute("negativecurrencyformatcode")]
public int? NegativeCurrencyFormatCode
{
	get { return this.GetPropertyValue<int?>("negativecurrencyformatcode"); }
	set { this.SetPropertyValue("negativecurrencyformatcode", (int?)value, (int)0, (int)15, "NegativeCurrencyFormatCode"); }
}
///<summary>
///<para>Logical Name: timeformatstring</para>
///<para>Max Length: 255 characters</para>
///</summary>
[AttributeLogicalNameAttribute("timeformatstring")]
public string TimeFormatString
{
	get { return this.GetPropertyValue<string>("timeformatstring"); }
	set { this.SetPropertyValue("timeformatstring", value, 255, "TimeFormatString"); }
}
///<summary>
///<para>Logical Name: businessunitid</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitid")]
public Guid BusinessUnitId
{
	get { return this.GetPropertyValue<Guid>("businessunitid"); }
	set { this.SetPropertyValue<Guid>("businessunitid", value, "BusinessUnitId"); }
}
///<summary>
///<para>Logical Name: workdaystoptime</para>
///<para>Max Length: 5 characters</para>
///</summary>
[AttributeLogicalNameAttribute("workdaystoptime")]
public string WorkdayStopTime
{
	get { return this.GetPropertyValue<string>("workdaystoptime"); }
	set { this.SetPropertyValue("workdaystoptime", value, 5, "WorkdayStopTime"); }
}
///<summary>
///<para>Logical Name: homepagesubarea</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("homepagesubarea")]
public string HomepageSubarea
{
	get { return this.GetPropertyValue<string>("homepagesubarea"); }
	set { this.SetPropertyValue("homepagesubarea", value, 200, "HomepageSubarea"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
/// <summary>
///Logical Name: datavalidationmodeforexporttoexcel
/// </summary>
[AttributeLogicalNameAttribute("datavalidationmodeforexporttoexcel")]
public eDataValidationModeForExportToExcel? DataValidationModeForExportToExcel
{
	get
	{
		if (DataValidationModeForExportToExcel_OptionSetValue != null) { return (eDataValidationModeForExportToExcel)DataValidationModeForExportToExcel_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DataValidationModeForExportToExcel_OptionSetValue = new OptionSetValue((int)value); }
		else this.DataValidationModeForExportToExcel_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: datavalidationmodeforexporttoexcel</para>
///</summary>
[AttributeLogicalNameAttribute("datavalidationmodeforexporttoexcel")]
public OptionSetValue DataValidationModeForExportToExcel_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("datavalidationmodeforexporttoexcel"); }
	set { this.SetPropertyValue<OptionSetValue>("datavalidationmodeforexporttoexcel", value, "DataValidationModeForExportToExcel_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DataValidationModeForExportToExcel_Text(IOrganizationService Service)
{
	return this.DataValidationModeForExportToExcel_OptionSetValue.GetOptionSetText(Service, this, "datavalidationmodeforexporttoexcel");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DataValidationModeForExportToExcel_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DataValidationModeForExportToExcel_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: defaultcountrycode</para>
///<para>Max Length: 30 characters</para>
///</summary>
[AttributeLogicalNameAttribute("defaultcountrycode")]
public string DefaultCountryCode
{
	get { return this.GetPropertyValue<string>("defaultcountrycode"); }
	set { this.SetPropertyValue("defaultcountrycode", value, 30, "DefaultCountryCode"); }
}
/// <summary>
///Logical Name: defaultsearchexperience
/// </summary>
[AttributeLogicalNameAttribute("defaultsearchexperience")]
public eDefaultSearchExperience? DefaultSearchExperience
{
	get
	{
		if (DefaultSearchExperience_OptionSetValue != null) { return (eDefaultSearchExperience)DefaultSearchExperience_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DefaultSearchExperience_OptionSetValue = new OptionSetValue((int)value); }
		else this.DefaultSearchExperience_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: defaultsearchexperience</para>
///</summary>
[AttributeLogicalNameAttribute("defaultsearchexperience")]
public OptionSetValue DefaultSearchExperience_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("defaultsearchexperience"); }
	set { this.SetPropertyValue<OptionSetValue>("defaultsearchexperience", value, "DefaultSearchExperience_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DefaultSearchExperience_Text(IOrganizationService Service)
{
	return this.DefaultSearchExperience_OptionSetValue.GetOptionSetText(Service, this, "defaultsearchexperience");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DefaultSearchExperience_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DefaultSearchExperience_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: isdefaultcountrycodecheckenabled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isdefaultcountrycodecheckenabled")]
public bool? EnableDefaultCountryCode
{
	get { return this.GetPropertyValue<bool?>("isdefaultcountrycodecheckenabled"); }
	set { this.SetPropertyValue<bool?>("isdefaultcountrycodecheckenabled", value, "EnableDefaultCountryCode"); }
}
///<summary>
///<para>Logical Name: isguidedhelpenabled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isguidedhelpenabled")]
public bool? EnableDefaultGuidedHelp
{
	get { return this.GetPropertyValue<bool?>("isguidedhelpenabled"); }
	set { this.SetPropertyValue<bool?>("isguidedhelpenabled", value, "EnableDefaultGuidedHelp"); }
}
/// <summary>
///Logical Name: entityformmode
/// </summary>
[AttributeLogicalNameAttribute("entityformmode")]
public eEntityFormMode? FormMode
{
	get
	{
		if (FormMode_OptionSetValue != null) { return (eEntityFormMode)FormMode_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FormMode_OptionSetValue = new OptionSetValue((int)value); }
		else this.FormMode_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: entityformmode</para>
///</summary>
[AttributeLogicalNameAttribute("entityformmode")]
public OptionSetValue FormMode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("entityformmode"); }
	set { this.SetPropertyValue<OptionSetValue>("entityformmode", value, "FormMode_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FormMode_Text(IOrganizationService Service)
{
	return this.FormMode_OptionSetValue.GetOptionSetText(Service, this, "entityformmode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FormMode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FormMode_OptionSetValue.Value);
}
/// <summary>
///Logical Name: incomingemailfilteringmethod
/// </summary>
[AttributeLogicalNameAttribute("incomingemailfilteringmethod")]
public eIncomingEmailFilteringMethod? IncomingEmailFilteringMethod
{
	get
	{
		if (IncomingEmailFilteringMethod_OptionSetValue != null) { return (eIncomingEmailFilteringMethod)IncomingEmailFilteringMethod_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.IncomingEmailFilteringMethod_OptionSetValue = new OptionSetValue((int)value); }
		else this.IncomingEmailFilteringMethod_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: incomingemailfilteringmethod</para>
///</summary>
[AttributeLogicalNameAttribute("incomingemailfilteringmethod")]
public OptionSetValue IncomingEmailFilteringMethod_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("incomingemailfilteringmethod"); }
	set { this.SetPropertyValue<OptionSetValue>("incomingemailfilteringmethod", value, "IncomingEmailFilteringMethod_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IncomingEmailFilteringMethod_Text(IOrganizationService Service)
{
	return this.IncomingEmailFilteringMethod_OptionSetValue.GetOptionSetText(Service, this, "incomingemailfilteringmethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IncomingEmailFilteringMethod_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IncomingEmailFilteringMethod_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
/// <summary>
///Logical Name: reportscripterrors
/// </summary>
[AttributeLogicalNameAttribute("reportscripterrors")]
public eReportScriptErrors? ReportScriptErrors
{
	get
	{
		if (ReportScriptErrors_OptionSetValue != null) { return (eReportScriptErrors)ReportScriptErrors_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ReportScriptErrors_OptionSetValue = new OptionSetValue((int)value); }
		else this.ReportScriptErrors_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: reportscripterrors</para>
///</summary>
[AttributeLogicalNameAttribute("reportscripterrors")]
public OptionSetValue ReportScriptErrors_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("reportscripterrors"); }
	set { this.SetPropertyValue<OptionSetValue>("reportscripterrors", value, "ReportScriptErrors_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ReportScriptErrors_Text(IOrganizationService Service)
{
	return this.ReportScriptErrors_OptionSetValue.GetOptionSetText(Service, this, "reportscripterrors");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ReportScriptErrors_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ReportScriptErrors_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: isresourcebookingexchangesyncenabled</para>
///<para>True = Enabled</para>
///<para>False = Disabled</para>
///</summary>
[AttributeLogicalNameAttribute("isresourcebookingexchangesyncenabled")]
public bool? ResourceBookingSynchronizationEnabled
{
	get { return this.GetPropertyValue<bool?>("isresourcebookingexchangesyncenabled"); }
	set { this.SetPropertyValue<bool?>("isresourcebookingexchangesyncenabled", value, "ResourceBookingSynchronizationEnabled"); }
}
///<summary>
///<para>Logical Name: isappsforcrmalertdismissed</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isappsforcrmalertdismissed")]
public bool? ShowAlertForAppsFor365
{
	get { return this.GetPropertyValue<bool?>("isappsforcrmalertdismissed"); }
	set { this.SetPropertyValue<bool?>("isappsforcrmalertdismissed", value, "ShowAlertForAppsFor365"); }
}
///<summary>
///<para>Logical Name: resourcebookingexchangesyncversion</para>
///</summary>
[AttributeLogicalNameAttribute("resourcebookingexchangesyncversion")]
public int? UserResourceBookingSynchronizationVersion
{
	get { return this.GetPropertyValue<int?>("resourcebookingexchangesyncversion"); }
	set { this.SetPropertyValue<int?>("resourcebookingexchangesyncversion", value, "UserResourceBookingSynchronizationVersion"); }
}
/// <summary>
///Logical Name: visualizationpanelayout
/// </summary>
[AttributeLogicalNameAttribute("visualizationpanelayout")]
public eVisualizationPaneLayout? VisualizationPaneLayout
{
	get
	{
		if (VisualizationPaneLayout_OptionSetValue != null) { return (eVisualizationPaneLayout)VisualizationPaneLayout_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.VisualizationPaneLayout_OptionSetValue = new OptionSetValue((int)value); }
		else this.VisualizationPaneLayout_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: visualizationpanelayout</para>
///</summary>
[AttributeLogicalNameAttribute("visualizationpanelayout")]
public OptionSetValue VisualizationPaneLayout_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("visualizationpanelayout"); }
	set { this.SetPropertyValue<OptionSetValue>("visualizationpanelayout", value, "VisualizationPaneLayout_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string VisualizationPaneLayout_Text(IOrganizationService Service)
{
	return this.VisualizationPaneLayout_OptionSetValue.GetOptionSetText(Service, this, "visualizationpanelayout");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string VisualizationPaneLayout_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.VisualizationPaneLayout_OptionSetValue.Value);
}


        

        

        

        public enum eDataValidationModeForExportToExcel
{
	///<summary><para>Full</para>
	///<para>Value = 0</para></summary>
	[Description("Full")]
	Full = 0, 
	///<summary><para>None</para>
	///<para>Value = 1</para></summary>
	[Description("None")]
	None = 1
}
public enum eDefaultSearchExperience
{
	///<summary><para>Relevance search</para>
	///<para>Value = 0</para></summary>
	[Description("Relevance search")]
	RelevanceSearch = 0, 
	///<summary><para>Categorized search</para>
	///<para>Value = 1</para></summary>
	[Description("Categorized search")]
	CategorizedSearch = 1, 
	///<summary><para>Use last search</para>
	///<para>Value = 2</para></summary>
	[Description("Use last search")]
	UseLastSearch = 2
}
public enum eEntityFormMode
{
	///<summary><para>Organization default</para>
	///<para>Value = 0</para></summary>
	[Description("Organization default")]
	OrganizationDefault = 0, 
	///<summary><para>Read-optimized</para>
	///<para>Value = 1</para></summary>
	[Description("Read-optimized")]
	Read_optimized = 1, 
	///<summary><para>Edit</para>
	///<para>Value = 2</para></summary>
	[Description("Edit")]
	Edit = 2
}
public enum eIncomingEmailFilteringMethod
{
	///<summary><para>All email messages</para>
	///<para>Value = 0</para></summary>
	[Description("All email messages")]
	AllEmailMessages = 0, 
	///<summary><para>Email messages in response to Dynamics 365 email</para>
	///<para>Value = 1</para></summary>
	[Description("Email messages in response to Dynamics 365 email")]
	EmailMessagesInResponseToDynamics365Email = 1, 
	///<summary><para>Email messages from Dynamics 365 Leads, Contacts and Accounts</para>
	///<para>Value = 2</para></summary>
	[Description("Email messages from Dynamics 365 Leads, Contacts and Accounts")]
	EmailMessagesFromDynamics365Leads_ContactsAndAccounts = 2, 
	///<summary><para>Email messages from Dynamics 365 records that are email enabled</para>
	///<para>Value = 3</para></summary>
	[Description("Email messages from Dynamics 365 records that are email enabled")]
	EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3
}
public enum eReportScriptErrors
{
	///<summary><para>Ask me for permission to send an error report to Microsoft</para>
	///<para>Value = 1</para></summary>
	[Description("Ask me for permission to send an error report to Microsoft")]
	AskMeForPermissionToSendAnErrorReportToMicrosoft = 1, 
	///<summary><para>Automatically send an error report to Microsoft without asking me for permission</para>
	///<para>Value = 2</para></summary>
	[Description("Automatically send an error report to Microsoft without asking me for permission")]
	AutomaticallySendAnErrorReportToMicrosoftWithoutAskingMeForPermission = 2, 
	///<summary><para>Never send an error report to Microsoft about Microsoft Dynamics 365</para>
	///<para>Value = 3</para></summary>
	[Description("Never send an error report to Microsoft about Microsoft Dynamics 365")]
	NeverSendAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 3
}
public enum eVisualizationPaneLayout
{
	///<summary><para>Top-bottom</para>
	///<para>Value = 0</para></summary>
	[Description("Top-bottom")]
	Top_bottom = 0, 
	///<summary><para>Side-by-side</para>
	///<para>Value = 1</para></summary>
	[Description("Side-by-side")]
	Side_by_side = 1
}


        public static class Properties
{
	/// <summary><para>workdaystarttime</para>
	/// <para>workdaystarttime</para></summary>
	public const string WorkdayStartTime = "workdaystarttime";
	/// <summary><para>uilanguageid</para>
	/// <para>uilanguageid</para></summary>
	public const string UILanguageId = "uilanguageid";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>lastalertsviewedtime</para>
	/// <para>lastalertsviewedtime</para></summary>
	public const string LastAlertsViewedTime = "lastalertsviewedtime";
	/// <summary><para>createdon</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>createdby</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>usecrmformforcontact</para>
	/// <para>usecrmformforcontact</para></summary>
	public const string UseCrmFormForContact = "usecrmformforcontact";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>helplanguageid</para>
	/// <para>helplanguageid</para></summary>
	public const string HelpLanguageId = "helplanguageid";
	/// <summary><para>getstartedpanecontentenabled</para>
	/// <para>getstartedpanecontentenabled</para></summary>
	public const string GetStartedPaneContentEnabled = "getstartedpanecontentenabled";
	/// <summary><para>longdateformatcode</para>
	/// <para>longdateformatcode</para></summary>
	public const string LongDateFormatCode = "longdateformatcode";
	/// <summary><para>splitviewstate</para>
	/// <para>splitviewstate</para></summary>
	public const string SplitViewState = "splitviewstate";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>dateseparator</para>
	/// <para>dateseparator</para></summary>
	public const string DateSeparator = "dateseparator";
	/// <summary><para>defaultcalendarview</para>
	/// <para>defaultcalendarview</para></summary>
	public const string DefaultCalendarView = "defaultcalendarview";
	/// <summary><para>emailpassword</para>
	/// <para>emailpassword</para></summary>
	public const string EmailPassword = "emailpassword";
	/// <summary><para>systemuserid</para>
	/// <para>systemuserid</para></summary>
	public const string SystemUserId = "systemuserid";
	/// <summary><para>outlooksyncinterval</para>
	/// <para>outlooksyncinterval</para></summary>
	public const string OutlookSyncInterval = "outlooksyncinterval";
	/// <summary><para>timezonedaylightday</para>
	/// <para>timezonedaylightday</para></summary>
	public const string TimeZoneDaylightDay = "timezonedaylightday";
	/// <summary><para>calendartype</para>
	/// <para>calendartype</para></summary>
	public const string CalendarType = "calendartype";
	/// <summary><para>timezonestandardmonth</para>
	/// <para>timezonestandardmonth</para></summary>
	public const string TimeZoneStandardMonth = "timezonestandardmonth";
	/// <summary><para>userprofile</para>
	/// <para>userprofile</para></summary>
	public const string UserProfile = "userprofile";
	/// <summary><para>dateformatstring</para>
	/// <para>dateformatstring</para></summary>
	public const string DateFormatString = "dateformatstring";
	/// <summary><para>timezonestandardsecond</para>
	/// <para>timezonestandardsecond</para></summary>
	public const string TimeZoneStandardSecond = "timezonestandardsecond";
	/// <summary><para>personalizationsettings</para>
	/// <para>personalizationsettings</para></summary>
	public const string PersonalizationSettings = "personalizationsettings";
	/// <summary><para>timezonedaylightminute</para>
	/// <para>timezonedaylightminute</para></summary>
	public const string TimeZoneDaylightMinute = "timezonedaylightminute";
	/// <summary><para>pmdesignator</para>
	/// <para>pmdesignator</para></summary>
	public const string PMDesignator = "pmdesignator";
	/// <summary><para>synccontactcompany</para>
	/// <para>synccontactcompany</para></summary>
	public const string SyncContactCompany = "synccontactcompany";
	/// <summary><para>timeseparator</para>
	/// <para>timeseparator</para></summary>
	public const string TimeSeparator = "timeseparator";
	/// <summary><para>pricingdecimalprecision</para>
	/// <para>pricingdecimalprecision</para></summary>
	public const string PricingDecimalPrecision = "pricingdecimalprecision";
	/// <summary><para>allowemailcredentials</para>
	/// <para>allowemailcredentials</para></summary>
	public const string AllowEmailCredentials = "allowemailcredentials";
	/// <summary><para>currencysymbol</para>
	/// <para>currencysymbol</para></summary>
	public const string CurrencySymbol = "currencysymbol";
	/// <summary><para>timezonestandardday</para>
	/// <para>timezonestandardday</para></summary>
	public const string TimeZoneStandardDay = "timezonestandardday";
	/// <summary><para>paginglimit</para>
	/// <para>paginglimit</para></summary>
	public const string PagingLimit = "paginglimit";
	/// <summary><para>issendasallowed</para>
	/// <para>issendasallowed</para></summary>
	public const string IsSendAsAllowed = "issendasallowed";
	/// <summary><para>defaultdashboardid</para>
	/// <para>defaultdashboardid</para></summary>
	public const string DefaultDashboardId = "defaultdashboardid";
	/// <summary><para>negativeformatcode</para>
	/// <para>negativeformatcode</para></summary>
	public const string NegativeFormatCode = "negativeformatcode";
	/// <summary><para>showweeknumber</para>
	/// <para>showweeknumber</para></summary>
	public const string ShowWeekNumber = "showweeknumber";
	/// <summary><para>timezonedaylightsecond</para>
	/// <para>timezonedaylightsecond</para></summary>
	public const string TimeZoneDaylightSecond = "timezonedaylightsecond";
	/// <summary><para>timezonedaylightmonth</para>
	/// <para>timezonedaylightmonth</para></summary>
	public const string TimeZoneDaylightMonth = "timezonedaylightmonth";
	/// <summary><para>timezonecode</para>
	/// <para>timezonecode</para></summary>
	public const string TimeZoneCode = "timezonecode";
	/// <summary><para>numberseparator</para>
	/// <para>numberseparator</para></summary>
	public const string NumberSeparator = "numberseparator";
	/// <summary><para>timezonestandardminute</para>
	/// <para>timezonestandardminute</para></summary>
	public const string TimeZoneStandardMinute = "timezonestandardminute";
	/// <summary><para>numbergroupformat</para>
	/// <para>numbergroupformat</para></summary>
	public const string NumberGroupFormat = "numbergroupformat";
	/// <summary><para>timezonedaylightyear</para>
	/// <para>timezonedaylightyear</para></summary>
	public const string TimeZoneDaylightYear = "timezonedaylightyear";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>autocreatecontactonpromote</para>
	/// <para>autocreatecontactonpromote</para></summary>
	public const string AutoCreateContactOnPromote = "autocreatecontactonpromote";
	/// <summary><para>timeformatcode</para>
	/// <para>timeformatcode</para></summary>
	public const string TimeFormatCode = "timeformatcode";
	/// <summary><para>timezonedaylightbias</para>
	/// <para>timezonedaylightbias</para></summary>
	public const string TimeZoneDaylightBias = "timezonedaylightbias";
	/// <summary><para>timezonestandardyear</para>
	/// <para>timezonestandardyear</para></summary>
	public const string TimeZoneStandardYear = "timezonestandardyear";
	/// <summary><para>homepagearea</para>
	/// <para>homepagearea</para></summary>
	public const string HomepageArea = "homepagearea";
	/// <summary><para>decimalsymbol</para>
	/// <para>decimalsymbol</para></summary>
	public const string DecimalSymbol = "decimalsymbol";
	/// <summary><para>dateformatcode</para>
	/// <para>dateformatcode</para></summary>
	public const string DateFormatCode = "dateformatcode";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>isduplicatedetectionenabledwhengoingonline</para>
	/// <para>isduplicatedetectionenabledwhengoingonline</para></summary>
	public const string IsDuplicateDetectionEnabledWhenGoingOnline = "isduplicatedetectionenabledwhengoingonline";
	/// <summary><para>emailusername</para>
	/// <para>emailusername</para></summary>
	public const string EmailUsername = "emailusername";
	/// <summary><para>modifiedon</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>advancedfindstartupmode</para>
	/// <para>advancedfindstartupmode</para></summary>
	public const string AdvancedFindStartupMode = "advancedfindstartupmode";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>ignoreunsolicitedemail</para>
	/// <para>ignoreunsolicitedemail</para></summary>
	public const string IgnoreUnsolicitedEmail = "ignoreunsolicitedemail";
	/// <summary><para>timezonedaylightdayofweek</para>
	/// <para>timezonedaylightdayofweek</para></summary>
	public const string TimeZoneDaylightDayOfWeek = "timezonedaylightdayofweek";
	/// <summary><para>amdesignator</para>
	/// <para>amdesignator</para></summary>
	public const string AMDesignator = "amdesignator";
	/// <summary><para>homepagelayout</para>
	/// <para>homepagelayout</para></summary>
	public const string HomepageLayout = "homepagelayout";
	/// <summary><para>currencyformatcode</para>
	/// <para>currencyformatcode</para></summary>
	public const string CurrencyFormatCode = "currencyformatcode";
	/// <summary><para>timezonestandardbias</para>
	/// <para>timezonestandardbias</para></summary>
	public const string TimeZoneStandardBias = "timezonestandardbias";
	/// <summary><para>fullnameconventioncode</para>
	/// <para>fullnameconventioncode</para></summary>
	public const string FullNameConventionCode = "fullnameconventioncode";
	/// <summary><para>businessunitidname</para>
	/// <para>businessunitidname</para></summary>
	public const string BusinessUnitIdName = "businessunitidname";
	/// <summary><para>localeid</para>
	/// <para>localeid</para></summary>
	public const string LocaleId = "localeid";
	/// <summary><para>modifiedby</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>trackingtokenid</para>
	/// <para>trackingtokenid</para></summary>
	public const string TrackingTokenId = "trackingtokenid";
	/// <summary><para>isautodatacaptureenabled</para>
	/// <para>isautodatacaptureenabled</para></summary>
	public const string IsAutoDataCaptureEnabled = "isautodatacaptureenabled";
	/// <summary><para>timezonestandarddayofweek</para>
	/// <para>timezonestandarddayofweek</para></summary>
	public const string TimeZoneStandardDayOfWeek = "timezonestandarddayofweek";
	/// <summary><para>nexttrackingnumber</para>
	/// <para>nexttrackingnumber</para></summary>
	public const string NextTrackingNumber = "nexttrackingnumber";
	/// <summary><para>currencydecimalprecision</para>
	/// <para>currencydecimalprecision</para></summary>
	public const string CurrencyDecimalPrecision = "currencydecimalprecision";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>timezonebias</para>
	/// <para>timezonebias</para></summary>
	public const string TimeZoneBias = "timezonebias";
	/// <summary><para>addressbooksyncinterval</para>
	/// <para>addressbooksyncinterval</para></summary>
	public const string AddressBookSyncInterval = "addressbooksyncinterval";
	/// <summary><para>usecrmformforemail</para>
	/// <para>usecrmformforemail</para></summary>
	public const string UseCrmFormForEmail = "usecrmformforemail";
	/// <summary><para>timezonestandardhour</para>
	/// <para>timezonestandardhour</para></summary>
	public const string TimeZoneStandardHour = "timezonestandardhour";
	/// <summary><para>usecrmformforappointment</para>
	/// <para>usecrmformforappointment</para></summary>
	public const string UseCrmFormForAppointment = "usecrmformforappointment";
	/// <summary><para>offlinesyncinterval</para>
	/// <para>offlinesyncinterval</para></summary>
	public const string OfflineSyncInterval = "offlinesyncinterval";
	/// <summary><para>useimagestrips</para>
	/// <para>useimagestrips</para></summary>
	public const string UseImageStrips = "useimagestrips";
	/// <summary><para>timezonedaylighthour</para>
	/// <para>timezonedaylighthour</para></summary>
	public const string TimeZoneDaylightHour = "timezonedaylighthour";
	/// <summary><para>usecrmformfortask</para>
	/// <para>usecrmformfortask</para></summary>
	public const string UseCrmFormForTask = "usecrmformfortask";
	/// <summary><para>negativecurrencyformatcode</para>
	/// <para>negativecurrencyformatcode</para></summary>
	public const string NegativeCurrencyFormatCode = "negativecurrencyformatcode";
	/// <summary><para>timeformatstring</para>
	/// <para>timeformatstring</para></summary>
	public const string TimeFormatString = "timeformatstring";
	/// <summary><para>businessunitid</para>
	/// <para>businessunitid</para></summary>
	public const string BusinessUnitId = "businessunitid";
	/// <summary><para>workdaystoptime</para>
	/// <para>workdaystoptime</para></summary>
	public const string WorkdayStopTime = "workdaystoptime";
	/// <summary><para>homepagesubarea</para>
	/// <para>homepagesubarea</para></summary>
	public const string HomepageSubarea = "homepagesubarea";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Data Validation Mode For Export To Excel</para>
	/// <para>datavalidationmodeforexporttoexcel</para></summary>
	public const string DataValidationModeForExportToExcel = "datavalidationmodeforexporttoexcel";
	/// <summary><para>Default Country Code</para>
	/// <para>defaultcountrycode</para></summary>
	public const string DefaultCountryCode = "defaultcountrycode";
	/// <summary><para>Default Search Experience</para>
	/// <para>defaultsearchexperience</para></summary>
	public const string DefaultSearchExperience = "defaultsearchexperience";
	/// <summary><para>Enable Default Country Code</para>
	/// <para>isdefaultcountrycodecheckenabled</para></summary>
	public const string EnableDefaultCountryCode = "isdefaultcountrycodecheckenabled";
	/// <summary><para>Enable Default Guided Help</para>
	/// <para>isguidedhelpenabled</para></summary>
	public const string EnableDefaultGuidedHelp = "isguidedhelpenabled";
	/// <summary><para>Form Mode</para>
	/// <para>entityformmode</para></summary>
	public const string FormMode = "entityformmode";
	/// <summary><para>Incoming Email Filtering Method</para>
	/// <para>incomingemailfilteringmethod</para></summary>
	public const string IncomingEmailFilteringMethod = "incomingemailfilteringmethod";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Report Script Errors</para>
	/// <para>reportscripterrors</para></summary>
	public const string ReportScriptErrors = "reportscripterrors";
	/// <summary><para>Resource booking synchronization enabled</para>
	/// <para>isresourcebookingexchangesyncenabled</para></summary>
	public const string ResourceBookingSynchronizationEnabled = "isresourcebookingexchangesyncenabled";
	/// <summary><para>Show alert for Apps for 365.</para>
	/// <para>isappsforcrmalertdismissed</para></summary>
	public const string ShowAlertForAppsFor365 = "isappsforcrmalertdismissed";
	/// <summary><para>User resource booking synchronization version</para>
	/// <para>resourcebookingexchangesyncversion</para></summary>
	public const string UserResourceBookingSynchronizationVersion = "resourcebookingexchangesyncversion";
	/// <summary><para>Visualization Pane Layout.</para>
	/// <para>visualizationpanelayout</para></summary>
	public const string VisualizationPaneLayout = "visualizationpanelayout";
}

    }
}
