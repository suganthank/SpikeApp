// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("imagedescriptor")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ImageDescriptor : BaseProxyClass
    {
        public new const string LogicalName = "imagedescriptor";
        public const int ObjectTypeCode = 1007;
        public const string PrimaryIdAttribute = "imagedescriptorid";
        public const string PrimaryNameAttribute = "";
        
        static ImageDescriptor()
        {
            BaseProxyClass.RegisterProxyType(typeof(ImageDescriptor), "imagedescriptor");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ImageDescriptor() : base(new Entity("imagedescriptor")) { }
        public ImageDescriptor(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ImageDescriptor>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: size</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("size")]
public int? Size
{
	get { return this.GetPropertyValue<int?>("size"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: imagedescriptorid</para>
///</summary>
[AttributeLogicalNameAttribute("imagedescriptorid")]
public Guid ImageDescriptorId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: imagetimestamp</para>
///</summary>
[AttributeLogicalNameAttribute("imagetimestamp")]
public int? ImageTimestamp
{
	get { return this.GetPropertyValue<int?>("imagetimestamp"); }
}
///<summary>
///<para>Logical Name: objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("objecttypecode")]
public string ObjectTypeCode2
{
	get { return this.GetPropertyValue<string>("objecttypecode"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string Title
{
	get { return this.GetPropertyValue<string>("title"); }
	set { this.SetPropertyValue("title", value, 200, "Title"); }
}
///<summary>
///<para>Logical Name: objectid</para>
///</summary>
[AttributeLogicalNameAttribute("objectid")]
public Guid ObjectId
{
	get { return this.GetPropertyValue<Guid>("objectid"); }
}
///<summary>
///<para>Logical Name: imageurl</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("imageurl")]
public string ImageURL
{
	get { return this.GetPropertyValue<string>("imageurl"); }
}
///<summary>
///<para>Logical Name: filetype</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("filetype")]
public string FileType
{
	get { return this.GetPropertyValue<string>("filetype"); }
	set { this.SetPropertyValue("filetype", value, 256, "FileType"); }
}


        /// <summary>
/// <para><b>Account (Entity Image Id)</b></para>
/// <para>Schema Name: lk_account_entityimage</para>
/// </summary>
public List<Account> GetAccounts_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(Service, this.Id, "account", "entityimageid", Columns); }
/// <summary>
/// <para><b>Account (Entity Image Id)</b></para>
/// <para>Schema Name: lk_account_entityimage</para>
/// </summary>
public List<Account> GetAccounts_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(Service, this.Id, "account", "entityimageid", Columns); }
/// <summary>
/// <para><b>Campaign (Entity Image Id)</b></para>
/// <para>Schema Name: lk_campaign_entityimage</para>
/// </summary>
public List<Campaign> GetCampaigns_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Campaign>(Service, this.Id, "campaign", "entityimageid", Columns); }
/// <summary>
/// <para><b>Campaign (Entity Image Id)</b></para>
/// <para>Schema Name: lk_campaign_entityimage</para>
/// </summary>
public List<Campaign> GetCampaigns_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Campaign>(Service, this.Id, "campaign", "entityimageid", Columns); }
/// <summary>
/// <para><b>Competitor (Entity Image Id)</b></para>
/// <para>Schema Name: lk_competitor_entityimage</para>
/// </summary>
public List<Competitor> GetCompetitors_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Competitor>(Service, this.Id, "competitor", "entityimageid", Columns); }
/// <summary>
/// <para><b>Competitor (Entity Image Id)</b></para>
/// <para>Schema Name: lk_competitor_entityimage</para>
/// </summary>
public List<Competitor> GetCompetitors_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Competitor>(Service, this.Id, "competitor", "entityimageid", Columns); }
/// <summary>
/// <para><b>Connection (Entity Image Id)</b></para>
/// <para>Schema Name: lk_connection_entityimage</para>
/// </summary>
public List<Connection> GetConnections_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "entityimageid", Columns); }
/// <summary>
/// <para><b>Connection (Entity Image Id)</b></para>
/// <para>Schema Name: lk_connection_entityimage</para>
/// </summary>
public List<Connection> GetConnections_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "entityimageid", Columns); }
/// <summary>
/// <para><b>Contact (Entity Image Id)</b></para>
/// <para>Schema Name: lk_contact_entityimage</para>
/// </summary>
public List<Contact> GetContacts_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contact>(Service, this.Id, "contact", "entityimageid", Columns); }
/// <summary>
/// <para><b>Contact (Entity Image Id)</b></para>
/// <para>Schema Name: lk_contact_entityimage</para>
/// </summary>
public List<Contact> GetContacts_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contact>(Service, this.Id, "contact", "entityimageid", Columns); }
/// <summary>
/// <para><b>Contract (Entity Image Id)</b></para>
/// <para>Schema Name: lk_contract_entityimage</para>
/// </summary>
public List<Contract> GetContracts_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contract>(Service, this.Id, "contract", "entityimageid", Columns); }
/// <summary>
/// <para><b>Contract (Entity Image Id)</b></para>
/// <para>Schema Name: lk_contract_entityimage</para>
/// </summary>
public List<Contract> GetContracts_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contract>(Service, this.Id, "contract", "entityimageid", Columns); }
/// <summary>
/// <para><b>EmailServerProfile (Entity Image Id)</b></para>
/// <para>Schema Name: lk_emailserverprofile_entityimage</para>
/// </summary>
public List<EmailServerProfile> GetEmailServerProfiles_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<EmailServerProfile>(Service, this.Id, "emailserverprofile", "entityimageid", Columns); }
/// <summary>
/// <para><b>EmailServerProfile (Entity Image Id)</b></para>
/// <para>Schema Name: lk_emailserverprofile_entityimage</para>
/// </summary>
public List<EmailServerProfile> GetEmailServerProfiles_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<EmailServerProfile>(Service, this.Id, "emailserverprofile", "entityimageid", Columns); }
/// <summary>
/// <para><b>Goal (Entity Image Id)</b></para>
/// <para>Schema Name: lk_goal_entityimage</para>
/// </summary>
public List<Goal> GetGoals_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Goal>(Service, this.Id, "goal", "entityimageid", Columns); }
/// <summary>
/// <para><b>Goal (Entity Image Id)</b></para>
/// <para>Schema Name: lk_goal_entityimage</para>
/// </summary>
public List<Goal> GetGoals_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Goal>(Service, this.Id, "goal", "entityimageid", Columns); }
/// <summary>
/// <para><b>@Case (Entity Image Id)</b></para>
/// <para>Schema Name: lk_incident_entityimage</para>
/// </summary>
public List<@Case> GetCases_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<@Case>(Service, this.Id, "incident", "entityimageid", Columns); }
/// <summary>
/// <para><b>@Case (Entity Image Id)</b></para>
/// <para>Schema Name: lk_incident_entityimage</para>
/// </summary>
public List<@Case> GetCases_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<@Case>(Service, this.Id, "incident", "entityimageid", Columns); }
/// <summary>
/// <para><b>Invoice (Entity Image Id)</b></para>
/// <para>Schema Name: lk_invoice_entityimage</para>
/// </summary>
public List<Invoice> GetInvoices_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Invoice>(Service, this.Id, "invoice", "entityimageid", Columns); }
/// <summary>
/// <para><b>Invoice (Entity Image Id)</b></para>
/// <para>Schema Name: lk_invoice_entityimage</para>
/// </summary>
public List<Invoice> GetInvoices_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Invoice>(Service, this.Id, "invoice", "entityimageid", Columns); }
/// <summary>
/// <para><b>Article (Entity Image Id)</b></para>
/// <para>Schema Name: lk_kbarticle_entityimage</para>
/// </summary>
public List<Article> GetArticles_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Article>(Service, this.Id, "kbarticle", "entityimageid", Columns); }
/// <summary>
/// <para><b>Article (Entity Image Id)</b></para>
/// <para>Schema Name: lk_kbarticle_entityimage</para>
/// </summary>
public List<Article> GetArticles_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Article>(Service, this.Id, "kbarticle", "entityimageid", Columns); }
/// <summary>
/// <para><b>Lead (Entity Image Id)</b></para>
/// <para>Schema Name: lk_lead_entityimage</para>
/// </summary>
public List<Lead> GetLeads_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Lead>(Service, this.Id, "lead", "entityimageid", Columns); }
/// <summary>
/// <para><b>Lead (Entity Image Id)</b></para>
/// <para>Schema Name: lk_lead_entityimage</para>
/// </summary>
public List<Lead> GetLeads_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Lead>(Service, this.Id, "lead", "entityimageid", Columns); }
/// <summary>
/// <para><b>Mailbox (Entity Image Id)</b></para>
/// <para>Schema Name: lk_mailbox_entityimage</para>
/// </summary>
public List<Mailbox> GetMailboxes_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Mailbox>(Service, this.Id, "mailbox", "entityimageid", Columns); }
/// <summary>
/// <para><b>Mailbox (Entity Image Id)</b></para>
/// <para>Schema Name: lk_mailbox_entityimage</para>
/// </summary>
public List<Mailbox> GetMailboxes_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Mailbox>(Service, this.Id, "mailbox", "entityimageid", Columns); }
/// <summary>
/// <para><b>OpportunityLine (Entity Image Id)</b></para>
/// <para>Schema Name: lk_opportunityproduct_entityimage</para>
/// </summary>
public List<OpportunityLine> GetOpportunityLines_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OpportunityLine>(Service, this.Id, "opportunityproduct", "entityimageid", Columns); }
/// <summary>
/// <para><b>OpportunityLine (Entity Image Id)</b></para>
/// <para>Schema Name: lk_opportunityproduct_entityimage</para>
/// </summary>
public List<OpportunityLine> GetOpportunityLines_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OpportunityLine>(Service, this.Id, "opportunityproduct", "entityimageid", Columns); }
/// <summary>
/// <para><b>Organization (Entity Image Id)</b></para>
/// <para>Schema Name: lk_organization_entityimage</para>
/// </summary>
public List<Organization> GetOrganizations_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Organization>(Service, this.Id, "organization", "entityimageid", Columns); }
/// <summary>
/// <para><b>Organization (Entity Image Id)</b></para>
/// <para>Schema Name: lk_organization_entityimage</para>
/// </summary>
public List<Organization> GetOrganizations_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Organization>(Service, this.Id, "organization", "entityimageid", Columns); }
/// <summary>
/// <para><b>Product (Entity Image Id)</b></para>
/// <para>Schema Name: lk_product_entityimage</para>
/// </summary>
public List<Product> GetProducts_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Product>(Service, this.Id, "product", "entityimageid", Columns); }
/// <summary>
/// <para><b>Product (Entity Image Id)</b></para>
/// <para>Schema Name: lk_product_entityimage</para>
/// </summary>
public List<Product> GetProducts_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Product>(Service, this.Id, "product", "entityimageid", Columns); }
/// <summary>
/// <para><b>Publisher (Entity Image Id)</b></para>
/// <para>Schema Name: lk_publisher_entityimage</para>
/// </summary>
public List<Publisher> GetPublishers_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Publisher>(Service, this.Id, "publisher", "entityimageid", Columns); }
/// <summary>
/// <para><b>Publisher (Entity Image Id)</b></para>
/// <para>Schema Name: lk_publisher_entityimage</para>
/// </summary>
public List<Publisher> GetPublishers_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Publisher>(Service, this.Id, "publisher", "entityimageid", Columns); }
/// <summary>
/// <para><b>Queue (Entity Image Id)</b></para>
/// <para>Schema Name: lk_queue_entityimage</para>
/// </summary>
public List<Queue> GetQueues_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Queue>(Service, this.Id, "queue", "entityimageid", Columns); }
/// <summary>
/// <para><b>Queue (Entity Image Id)</b></para>
/// <para>Schema Name: lk_queue_entityimage</para>
/// </summary>
public List<Queue> GetQueues_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Queue>(Service, this.Id, "queue", "entityimageid", Columns); }
/// <summary>
/// <para><b>Resource (Entity Image Id)</b></para>
/// <para>Schema Name: lk_resource_entityimage</para>
/// </summary>
public List<Resource> GetResources_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Resource>(Service, this.Id, "resource", "entityimageid", Columns); }
/// <summary>
/// <para><b>Resource (Entity Image Id)</b></para>
/// <para>Schema Name: lk_resource_entityimage</para>
/// </summary>
public List<Resource> GetResources_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Resource>(Service, this.Id, "resource", "entityimageid", Columns); }
/// <summary>
/// <para><b>SalesLiterature (Entity Image Id)</b></para>
/// <para>Schema Name: lk_salesliterature_entityimage</para>
/// </summary>
public List<SalesLiterature> GetSalesLiterature_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SalesLiterature>(Service, this.Id, "salesliterature", "entityimageid", Columns); }
/// <summary>
/// <para><b>SalesLiterature (Entity Image Id)</b></para>
/// <para>Schema Name: lk_salesliterature_entityimage</para>
/// </summary>
public List<SalesLiterature> GetSalesLiterature_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SalesLiterature>(Service, this.Id, "salesliterature", "entityimageid", Columns); }
/// <summary>
/// <para><b>Order (Entity Image Id)</b></para>
/// <para>Schema Name: lk_salesorder_entityimage</para>
/// </summary>
public List<Order> GetOrders_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Order>(Service, this.Id, "salesorder", "entityimageid", Columns); }
/// <summary>
/// <para><b>Order (Entity Image Id)</b></para>
/// <para>Schema Name: lk_salesorder_entityimage</para>
/// </summary>
public List<Order> GetOrders_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Order>(Service, this.Id, "salesorder", "entityimageid", Columns); }
/// <summary>
/// <para><b>User (Entity Image Id)</b></para>
/// <para>Schema Name: lk_systemuser_entityimage</para>
/// </summary>
public List<User> GetUsers_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<User>(Service, this.Id, "systemuser", "entityimageid", Columns); }
/// <summary>
/// <para><b>User (Entity Image Id)</b></para>
/// <para>Schema Name: lk_systemuser_entityimage</para>
/// </summary>
public List<User> GetUsers_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<User>(Service, this.Id, "systemuser", "entityimageid", Columns); }
/// <summary>
/// <para><b>Territory (Entity Image Id)</b></para>
/// <para>Schema Name: lk_territory_entityimage</para>
/// </summary>
public List<Territory> GetTerritories_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Territory>(Service, this.Id, "territory", "entityimageid", Columns); }
/// <summary>
/// <para><b>Territory (Entity Image Id)</b></para>
/// <para>Schema Name: lk_territory_entityimage</para>
/// </summary>
public List<Territory> GetTerritories_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Territory>(Service, this.Id, "territory", "entityimageid", Columns); }
/// <summary>
/// <para><b>Currency (Entity Image Id)</b></para>
/// <para>Schema Name: lk_transactioncurrency_entityimage</para>
/// </summary>
public List<Currency> GetCurrencies_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Currency>(Service, this.Id, "transactioncurrency", "entityimageid", Columns); }
/// <summary>
/// <para><b>Currency (Entity Image Id)</b></para>
/// <para>Schema Name: lk_transactioncurrency_entityimage</para>
/// </summary>
public List<Currency> GetCurrencies_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Currency>(Service, this.Id, "transactioncurrency", "entityimageid", Columns); }
/// <summary>
/// <para><b>Process (Entity Image Id)</b></para>
/// <para>Schema Name: workflow_entityimage</para>
/// </summary>
public List<Process> GetProcesses_EntityImageId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Process>(Service, this.Id, "workflow", "entityimageid", Columns); }
/// <summary>
/// <para><b>Process (Entity Image Id)</b></para>
/// <para>Schema Name: workflow_entityimage</para>
/// </summary>
public List<Process> GetProcesses_EntityImageId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Process>(Service, this.Id, "workflow", "entityimageid", Columns); }


        

        

        

        public static class Properties
{
	/// <summary><para>size</para>
	/// <para>size</para></summary>
	public const string Size = "size";
	/// <summary><para>imagedescriptorid</para>
	/// <para>imagedescriptorid</para></summary>
	public const string ImageDescriptorId = "imagedescriptorid";
	/// <summary><para>imagetimestamp</para>
	/// <para>imagetimestamp</para></summary>
	public const string ImageTimestamp = "imagetimestamp";
	/// <summary><para>objecttypecode</para>
	/// <para>objecttypecode</para></summary>
	public const string ObjectTypeCode2 = "objecttypecode";
	/// <summary><para>title</para>
	/// <para>title</para></summary>
	public const string Title = "title";
	/// <summary><para>objectid</para>
	/// <para>objectid</para></summary>
	public const string ObjectId = "objectid";
	/// <summary><para>imageurl</para>
	/// <para>imageurl</para></summary>
	public const string ImageURL = "imageurl";
	/// <summary><para>filetype</para>
	/// <para>filetype</para></summary>
	public const string FileType = "filetype";
}

    }
}
