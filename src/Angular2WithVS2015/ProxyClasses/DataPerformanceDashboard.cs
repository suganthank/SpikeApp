// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("dataperformance")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class DataPerformanceDashboard : BaseProxyClass
    {
        public new const string LogicalName = "dataperformance";
        public const int ObjectTypeCode = 4450;
        public const string PrimaryIdAttribute = "dataperformanceid";
        public const string PrimaryNameAttribute = "";
        
        static DataPerformanceDashboard()
        {
            BaseProxyClass.RegisterProxyType(typeof(DataPerformanceDashboard), "dataperformance");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public DataPerformanceDashboard() : base(new Entity("dataperformance")) { }
        public DataPerformanceDashboard(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<DataPerformanceDashboard>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference OrganizationId
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: anyoptimizationapplied</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("anyoptimizationapplied")]
public bool? AnyOptimizationApplied
{
	get { return this.GetPropertyValue<bool?>("anyoptimizationapplied"); }
}
///<summary>
///<para>Logical Name: anyoptimizationavailable</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("anyoptimizationavailable")]
public bool? AnyOptimizationAvailable
{
	get { return this.GetPropertyValue<bool?>("anyoptimizationavailable"); }
}
///<summary>
///<para>Logical Name: component</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("component")]
public string Component
{
	get { return this.GetPropertyValue<string>("component"); }
}
///<summary>
///<para>Logical Name: count</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("count")]
public int? Count
{
	get { return this.GetPropertyValue<int?>("count"); }
}
///<summary>
///<para>Logical Name: entity</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entity")]
public string Entity
{
	get { return this.GetPropertyValue<string>("entity"); }
}
///<summary>
///<para>Logical Name: estimatedoptimizationimpact</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("estimatedoptimizationimpact")]
public decimal? EstimatedOptimizationImpact
{
	get { return this.GetPropertyValue<decimal?>("estimatedoptimizationimpact"); }
}
///<summary>
///<para>Logical Name: executionperiod</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("executionperiod")]
public string ExecutionPeriod
{
	get { return this.GetPropertyValue<string>("executionperiod"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: dataperformanceid</para>
///</summary>
[AttributeLogicalNameAttribute("dataperformanceid")]
public Guid Id2
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: lastactionresult</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lastactionresult")]
public string LastActionResult
{
	get { return this.GetPropertyValue<string>("lastactionresult"); }
}
///<summary>
///<para>Logical Name: lastoptimizationdate</para>
///</summary>
[AttributeLogicalNameAttribute("lastoptimizationdate")]
public DateTime? LastOptimizationDate
{
	get { return this.GetPropertyValue<DateTime?>("lastoptimizationdate"); }
}
///<summary>
///<para>Logical Name: maxtime</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("maxtime")]
public decimal? MaxTime
{
	get { return this.GetPropertyValue<decimal?>("maxtime"); }
}
///<summary>
///<para>Logical Name: mediantime</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("mediantime")]
public decimal? MedianTime
{
	get { return this.GetPropertyValue<decimal?>("mediantime"); }
}
///<summary>
///<para>Logical Name: mintime</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("mintime")]
public decimal? MinTime
{
	get { return this.GetPropertyValue<decimal?>("mintime"); }
}
///<summary>
///<para>Logical Name: operation</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("operation")]
public string Operation
{
	get { return this.GetPropertyValue<string>("operation"); }
}
///<summary>
///<para>Logical Name: realizedoptimizationimpact</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("realizedoptimizationimpact")]
public string OptimizationImpact
{
	get { return this.GetPropertyValue<string>("realizedoptimizationimpact"); }
}
///<summary>
///<para>Logical Name: optimizationstatus</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("optimizationstatus")]
public string OptimizationStatus
{
	get { return this.GetPropertyValue<string>("optimizationstatus"); }
}
///<summary>
///<para>Logical Name: optimizationstorage</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("optimizationstorage")]
public decimal? OptimizationStorage
{
	get { return this.GetPropertyValue<decimal?>("optimizationstorage"); }
}
///<summary>
///<para>Logical Name: solution</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("solution")]
public string Solution
{
	get { return this.GetPropertyValue<string>("solution"); }
}
///<summary>
///<para>Logical Name: weight</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("weight")]
public decimal? Weight
{
	get { return this.GetPropertyValue<decimal?>("weight"); }
}


        

        

        

        

        public static class Properties
{
	/// <summary><para>organizationid</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>Any Optimization Applied</para>
	/// <para>anyoptimizationapplied</para></summary>
	public const string AnyOptimizationApplied = "anyoptimizationapplied";
	/// <summary><para>Any Optimization Available</para>
	/// <para>anyoptimizationavailable</para></summary>
	public const string AnyOptimizationAvailable = "anyoptimizationavailable";
	/// <summary><para>Component</para>
	/// <para>component</para></summary>
	public const string Component = "component";
	/// <summary><para>Count</para>
	/// <para>count</para></summary>
	public const string Count = "count";
	/// <summary><para>Entity</para>
	/// <para>entity</para></summary>
	public const string Entity = "entity";
	/// <summary><para>Estimated Optimization Impact</para>
	/// <para>estimatedoptimizationimpact</para></summary>
	public const string EstimatedOptimizationImpact = "estimatedoptimizationimpact";
	/// <summary><para>Execution Period</para>
	/// <para>executionperiod</para></summary>
	public const string ExecutionPeriod = "executionperiod";
	/// <summary><para>Id</para>
	/// <para>dataperformanceid</para></summary>
	public const string Id2 = "dataperformanceid";
	/// <summary><para>Last Action Result</para>
	/// <para>lastactionresult</para></summary>
	public const string LastActionResult = "lastactionresult";
	/// <summary><para>Last Optimization Date</para>
	/// <para>lastoptimizationdate</para></summary>
	public const string LastOptimizationDate = "lastoptimizationdate";
	/// <summary><para>Max Time</para>
	/// <para>maxtime</para></summary>
	public const string MaxTime = "maxtime";
	/// <summary><para>Median Time</para>
	/// <para>mediantime</para></summary>
	public const string MedianTime = "mediantime";
	/// <summary><para>Min Time</para>
	/// <para>mintime</para></summary>
	public const string MinTime = "mintime";
	/// <summary><para>Operation</para>
	/// <para>operation</para></summary>
	public const string Operation = "operation";
	/// <summary><para>Optimization Impact (%)</para>
	/// <para>realizedoptimizationimpact</para></summary>
	public const string OptimizationImpact = "realizedoptimizationimpact";
	/// <summary><para>Optimization Status</para>
	/// <para>optimizationstatus</para></summary>
	public const string OptimizationStatus = "optimizationstatus";
	/// <summary><para>Optimization Storage</para>
	/// <para>optimizationstorage</para></summary>
	public const string OptimizationStorage = "optimizationstorage";
	/// <summary><para>Solution</para>
	/// <para>solution</para></summary>
	public const string Solution = "solution";
	/// <summary><para>Weight</para>
	/// <para>weight</para></summary>
	public const string Weight = "weight";
}

    }
}
