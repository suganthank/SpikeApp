// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("mobileofflineprofileitem")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class MobileOfflineProfileItem : BaseProxyClass
    {
        public new const string LogicalName = "mobileofflineprofileitem";
        public const int ObjectTypeCode = 9867;
        public const string PrimaryIdAttribute = "mobileofflineprofileitemid";
        public const string PrimaryNameAttribute = "name";
        
        static MobileOfflineProfileItem()
        {
            BaseProxyClass.RegisterProxyType(typeof(MobileOfflineProfileItem), "mobileofflineprofileitem");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public MobileOfflineProfileItem() : base(new Entity("mobileofflineprofileitem")) { }
        public MobileOfflineProfileItem(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<MobileOfflineProfileItem>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
	set { this.SetPropertyValue("regardingobjectidname", value, 100, "RegardingObjectIdName"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: profileitemrulename</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("profileitemrulename")]
public string ProfileItemRuleName
{
	get { return this.GetPropertyValue<string>("profileitemrulename"); }
	set { this.SetPropertyValue("profileitemrulename", value, 100, "ProfileItemRuleName"); }
}
///<summary>
///<para>Logical Name: canbefollowed</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbefollowed")]
public bool? AllowEntityToFollowRelationship
{
	get { return this.GetPropertyValue<bool?>("canbefollowed"); }
	set { this.SetPropertyValue<bool?>("canbefollowed", value, "AllowEntityToFollowRelationship"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
/// <summary>
///Logical Name: recorddistributioncriteria
/// </summary>
[AttributeLogicalNameAttribute("recorddistributioncriteria")]
public eTheRulesForRecordDownloadInOffline? DataDownloadFilter
{
	get
	{
		if (DataDownloadFilter_OptionSetValue != null) { return (eTheRulesForRecordDownloadInOffline)DataDownloadFilter_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DataDownloadFilter_OptionSetValue = new OptionSetValue((int)value); }
		else this.DataDownloadFilter_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: recorddistributioncriteria</para>
///</summary>
[AttributeLogicalNameAttribute("recorddistributioncriteria")]
public OptionSetValue DataDownloadFilter_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("recorddistributioncriteria"); }
	set { this.SetPropertyValue<OptionSetValue>("recorddistributioncriteria", value, "DataDownloadFilter_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DataDownloadFilter_Text(IOrganizationService Service)
{
	return this.DataDownloadFilter_OptionSetValue.GetOptionSetText(Service, this, "recorddistributioncriteria");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DataDownloadFilter_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DataDownloadFilter_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: recordsownedbymybusinessunit</para>
///<para>True = True</para>
///<para>False = False</para>
///</summary>
[AttributeLogicalNameAttribute("recordsownedbymybusinessunit")]
public bool? DownloadMyBusinessUnitsRecords
{
	get { return this.GetPropertyValue<bool?>("recordsownedbymybusinessunit"); }
	set { this.SetPropertyValue<bool?>("recordsownedbymybusinessunit", value, "DownloadMyBusinessUnitsRecords"); }
}
///<summary>
///<para>Logical Name: recordsownedbyme</para>
///<para>True = True</para>
///<para>False = False</para>
///</summary>
[AttributeLogicalNameAttribute("recordsownedbyme")]
public bool? DownloadMyRecords
{
	get { return this.GetPropertyValue<bool?>("recordsownedbyme"); }
	set { this.SetPropertyValue<bool?>("recordsownedbyme", value, "DownloadMyRecords"); }
}
///<summary>
///<para>Logical Name: recordsownedbymyteam</para>
///<para>True = True</para>
///<para>False = False</para>
///</summary>
[AttributeLogicalNameAttribute("recordsownedbymyteam")]
public bool? DownloadMyTeamsRecords
{
	get { return this.GetPropertyValue<bool?>("recordsownedbymyteam"); }
	set { this.SetPropertyValue<bool?>("recordsownedbymyteam", value, "DownloadMyTeamsRecords"); }
}
///<summary>
///<para>Logical Name: selectedentitytypecode</para>
///</summary>
[AttributeLogicalNameAttribute("selectedentitytypecode")]
public string Entity
{
	get { return this.GetPropertyValue<string>("selectedentitytypecode"); }
	set { this.SetPropertyValue<string>("selectedentitytypecode", value, "Entity"); }
}
///<summary>
///<para>Logical Name: getrelatedentityrecords</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("getrelatedentityrecords")]
public bool? GetRelatedEntities
{
	get { return this.GetPropertyValue<bool?>("getrelatedentityrecords"); }
	set { this.SetPropertyValue<bool?>("getrelatedentityrecords", value, "GetRelatedEntities"); }
}
///<summary>
///<para>Logical Name: relationshipdata</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("relationshipdata")]
public string InternalUseOnly
{
	get { return this.GetPropertyValue<string>("relationshipdata"); }
	set { this.SetPropertyValue("relationshipdata", value, 1073741823, "InternalUseOnly"); }
}
///<summary>
///<para>Logical Name: entityobjecttypecode</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("entityobjecttypecode")]
public int? InternalUseOnly2
{
	get { return this.GetPropertyValue<int?>("entityobjecttypecode"); }
}
///<summary>
///<para>Logical Name: selectedentitymetadata</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("selectedentitymetadata")]
public string InternalUseOnly3
{
	get { return this.GetPropertyValue<string>("selectedentitymetadata"); }
}
///<summary>
///<para>Logical Name: introducedversion</para>
///<para>Max Length: 48 characters</para>
///</summary>
[AttributeLogicalNameAttribute("introducedversion")]
public string IntroducedVersion
{
	get { return this.GetPropertyValue<string>("introducedversion"); }
	set { this.SetPropertyValue("introducedversion", value, 48, "IntroducedVersion"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? IsManaged
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: isvalidated</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isvalidated")]
public bool? IsValidForMobileOffline
{
	get { return this.GetPropertyValue<bool?>("isvalidated"); }
}
///<summary>
///<para>Logical Name: isvisibleingrid</para>
///<para>True = True</para>
///<para>False = False</para>
///</summary>
[AttributeLogicalNameAttribute("isvisibleingrid")]
public bool? IsVisibleInGrid
{
	get { return this.GetPropertyValue<bool?>("isvisibleingrid"); }
	set { this.SetPropertyValue<bool?>("isvisibleingrid", value, "IsVisibleInGrid"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: mobileofflineprofileitemid</para>
///</summary>
[AttributeLogicalNameAttribute("mobileofflineprofileitemid")]
public Guid MobileOfflineProfileItemId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 255 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 255, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public Guid Process
{
	get { return this.GetPropertyValue<Guid>("processid"); }
	set { this.SetPropertyValue<Guid>("processid", value, "Process"); }
}
///<summary>
///<para>Logical Name: stageid</para>
///</summary>
[AttributeLogicalNameAttribute("stageid")]
public Guid ProcessStage
{
	get { return this.GetPropertyValue<Guid>("stageid"); }
	set { this.SetPropertyValue<Guid>("stageid", value, "ProcessStage"); }
}
///<summary>
///<para>Logical Name: profileitementityfilter</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("profileitementityfilter")]
public string ProfileItemEntityFilter
{
	get { return this.GetPropertyValue<string>("profileitementityfilter"); }
	set { this.SetPropertyValue("profileitementityfilter", value, 1073741823, "ProfileItemEntityFilter"); }
}
///<summary>
///<para>Logical Name: publishedon</para>
///</summary>
[AttributeLogicalNameAttribute("publishedon")]
public DateTime? PublishedOn
{
	get { return this.GetPropertyValue<DateTime?>("publishedon"); }
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? RecordOverwriteTime
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string TraversedPath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "TraversedPath"); }
}
///<summary>
///<para>Logical Name: mobileofflineprofileitemidunique</para>
///</summary>
[AttributeLogicalNameAttribute("mobileofflineprofileitemidunique")]
public Guid UniqueId
{
	get { return this.GetPropertyValue<Guid>("mobileofflineprofileitemidunique"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: viewquery</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("viewquery")]
public string ViewQuery
{
	get { return this.GetPropertyValue<string>("viewquery"); }
	set { this.SetPropertyValue("viewquery", value, 1073741823, "ViewQuery"); }
}
///<summary>
///<para>Logical Name: profileitemrule</para>
///</summary>
[AttributeLogicalNameAttribute("profileitemrule")]
public EntityReference ViewToSyncDataToDevice
{
	get { return this.GetPropertyValue<EntityReference>("profileitemrule"); }
	set { this.SetPropertyValue<EntityReference>("profileitemrule", value, "ViewToSyncDataToDevice"); }
}


        /// <summary>
/// <para><b>MobileOfflineProfileItemAssociation (Regarding)</b></para>
/// <para>Schema Name: MobileOfflineProfileItem_MobileOfflineProfileItemAssociation</para>
/// </summary>
public List<MobileOfflineProfileItemAssociation> GetMobileOfflineProfileItemAssociations_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MobileOfflineProfileItemAssociation>(Service, this.Id, "mobileofflineprofileitemassociation", "mobileofflineprofileitemid", Columns); }
/// <summary>
/// <para><b>MobileOfflineProfileItemAssociation (Regarding)</b></para>
/// <para>Schema Name: MobileOfflineProfileItem_MobileOfflineProfileItemAssociation</para>
/// </summary>
public List<MobileOfflineProfileItemAssociation> GetMobileOfflineProfileItemAssociations_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MobileOfflineProfileItemAssociation>(Service, this.Id, "mobileofflineprofileitemassociation", "mobileofflineprofileitemid", Columns); }


        

        

        public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eTheRulesForRecordDownloadInOffline
{
	///<summary><para>Download related data only</para>
	///<para>Value = 0</para></summary>
	[Description("Download related data only")]
	DownloadRelatedDataOnly = 0, 
	///<summary><para>All records</para>
	///<para>Value = 1</para></summary>
	[Description("All records")]
	AllRecords = 1, 
	///<summary><para>Other data filter</para>
	///<para>Value = 2</para></summary>
	[Description("Other data filter")]
	OtherDataFilter = 2, 
	///<summary><para>Custom data filter</para>
	///<para>Value = 3</para></summary>
	[Description("Custom data filter")]
	CustomDataFilter = 3
}


        public static class Properties
{
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>profileitemrulename</para>
	/// <para>profileitemrulename</para></summary>
	public const string ProfileItemRuleName = "profileitemrulename";
	/// <summary><para>Allow Entity to Follow Relationship</para>
	/// <para>canbefollowed</para></summary>
	public const string AllowEntityToFollowRelationship = "canbefollowed";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Data Download Filter</para>
	/// <para>recorddistributioncriteria</para></summary>
	public const string DataDownloadFilter = "recorddistributioncriteria";
	/// <summary><para>Download my business unit's records</para>
	/// <para>recordsownedbymybusinessunit</para></summary>
	public const string DownloadMyBusinessUnitsRecords = "recordsownedbymybusinessunit";
	/// <summary><para>Download my records</para>
	/// <para>recordsownedbyme</para></summary>
	public const string DownloadMyRecords = "recordsownedbyme";
	/// <summary><para>Download my team's records</para>
	/// <para>recordsownedbymyteam</para></summary>
	public const string DownloadMyTeamsRecords = "recordsownedbymyteam";
	/// <summary><para>Entity</para>
	/// <para>selectedentitytypecode</para></summary>
	public const string Entity = "selectedentitytypecode";
	/// <summary><para>Get Related Entities</para>
	/// <para>getrelatedentityrecords</para></summary>
	public const string GetRelatedEntities = "getrelatedentityrecords";
	/// <summary><para>Internal Use Only</para>
	/// <para>relationshipdata</para></summary>
	public const string InternalUseOnly = "relationshipdata";
	/// <summary><para>Internal Use Only</para>
	/// <para>entityobjecttypecode</para></summary>
	public const string InternalUseOnly2 = "entityobjecttypecode";
	/// <summary><para>Internal Use Only</para>
	/// <para>selectedentitymetadata</para></summary>
	public const string InternalUseOnly3 = "selectedentitymetadata";
	/// <summary><para>Introduced Version</para>
	/// <para>introducedversion</para></summary>
	public const string IntroducedVersion = "introducedversion";
	/// <summary><para>Is Managed</para>
	/// <para>ismanaged</para></summary>
	public const string IsManaged = "ismanaged";
	/// <summary><para>Is Valid For Mobile Offline</para>
	/// <para>isvalidated</para></summary>
	public const string IsValidForMobileOffline = "isvalidated";
	/// <summary><para>Is Visible In Grid</para>
	/// <para>isvisibleingrid</para></summary>
	public const string IsVisibleInGrid = "isvisibleingrid";
	/// <summary><para>Mobile Offline Profile Item</para>
	/// <para>mobileofflineprofileitemid</para></summary>
	public const string MobileOfflineProfileItemId = "mobileofflineprofileitemid";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Process</para>
	/// <para>processid</para></summary>
	public const string Process = "processid";
	/// <summary><para>Process Stage</para>
	/// <para>stageid</para></summary>
	public const string ProcessStage = "stageid";
	/// <summary><para>Profile item entity filter</para>
	/// <para>profileitementityfilter</para></summary>
	public const string ProfileItemEntityFilter = "profileitementityfilter";
	/// <summary><para>Published On</para>
	/// <para>publishedon</para></summary>
	public const string PublishedOn = "publishedon";
	/// <summary><para>Record Overwrite Time</para>
	/// <para>overwritetime</para></summary>
	public const string RecordOverwriteTime = "overwritetime";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
	/// <summary><para>Traversed Path</para>
	/// <para>traversedpath</para></summary>
	public const string TraversedPath = "traversedpath";
	/// <summary><para>Unique Id</para>
	/// <para>mobileofflineprofileitemidunique</para></summary>
	public const string UniqueId = "mobileofflineprofileitemidunique";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>View Query</para>
	/// <para>viewquery</para></summary>
	public const string ViewQuery = "viewquery";
	/// <summary><para>View to sync data to device</para>
	/// <para>profileitemrule</para></summary>
	public const string ViewToSyncDataToDevice = "profileitemrule";
}

    }
}
