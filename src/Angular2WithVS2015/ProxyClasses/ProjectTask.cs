// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("msdyn_projecttask")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ProjectTask : BaseProxyClass
    {
        public new const string LogicalName = "msdyn_projecttask";
        public const int ObjectTypeCode = 10069;
        public const string PrimaryIdAttribute = "msdyn_projecttaskid";
        public const string PrimaryNameAttribute = "msdyn_subject";
        
        static ProjectTask()
        {
            BaseProxyClass.RegisterProxyType(typeof(ProjectTask), "msdyn_projecttask");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ProjectTask() : base(new Entity("msdyn_projecttask")) { }
        public ProjectTask(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ProjectTask>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_resourceorganizationalunitidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_resourceorganizationalunitidname")]
public string Msdyn_ResourceOrganizationalUnitIdName
{
	get { return this.GetPropertyValue<string>("msdyn_resourceorganizationalunitidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: msdyn_assignedteammembersname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_assignedteammembersname")]
public string Msdyn_AssignedTeamMembersName
{
	get { return this.GetPropertyValue<string>("msdyn_assignedteammembersname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: msdyn_resourcecategoryname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_resourcecategoryname")]
public string Msdyn_resourcecategoryName
{
	get { return this.GetPropertyValue<string>("msdyn_resourcecategoryname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: msdyn_projectname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_projectname")]
public string Msdyn_projectName
{
	get { return this.GetPropertyValue<string>("msdyn_projectname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_parenttaskname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_parenttaskname")]
public string Msdyn_parenttaskName
{
	get { return this.GetPropertyValue<string>("msdyn_parenttaskname"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: msdyn_transactioncategoryname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_transactioncategoryname")]
public string Msdyn_transactioncategoryName
{
	get { return this.GetPropertyValue<string>("msdyn_transactioncategoryname"); }
}
///<summary>
///<para>Logical Name: msdyn_actualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualCost
{
	get
	{
		if (ActualCostMoney != null) { return ActualCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualCostMoney = new Money(value.Value); }
		else this.ActualCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualcost")]
public Money ActualCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actualcost"); }
	set { this.SetPropertyValue("msdyn_actualcost", (Money)value, (decimal)0, (decimal)922337203685477, "ActualCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actualcost_base</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualCost_Base
{
	get
	{
		if (ActualCost_BaseMoney != null) { return ActualCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actualcost_base</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualcost_base")]
public Money ActualCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actualcost_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actualdurationminutes</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualdurationminutes")]
public int? ActualDuration
{
	get { return this.GetPropertyValue<int?>("msdyn_actualdurationminutes"); }
	set { this.SetPropertyValue("msdyn_actualdurationminutes", (int?)value, (int)0, (int)2147483647, "ActualDuration"); }
}
///<summary>
///<para>Logical Name: msdyn_actualend</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualend")]
public DateTime? ActualEndDate_Time
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_actualend"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_actualend", value, "ActualEndDate_Time"); }
}
///<summary>
///<para>Logical Name: msdyn_actualeffort</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualeffort")]
public double? ActualHours
{
	get { return this.GetPropertyValue<double?>("msdyn_actualeffort"); }
	set { this.SetPropertyValue("msdyn_actualeffort", (double?)value, (double)0, (double)1000000000, "ActualHours"); }
}
///<summary>
///<para>Logical Name: msdyn_actualsales</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualSales
{
	get
	{
		if (ActualSalesMoney != null) { return ActualSalesMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualSalesMoney = new Money(value.Value); }
		else this.ActualSalesMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actualsales</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualsales")]
public Money ActualSalesMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actualsales"); }
	set { this.SetPropertyValue("msdyn_actualsales", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualSalesMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actualsales_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualSales_Base
{
	get
	{
		if (ActualSales_BaseMoney != null) { return ActualSales_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actualsales_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualsales_base")]
public Money ActualSales_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actualsales_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actualstart</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actualstart")]
public DateTime? ActualStart
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_actualstart"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_actualstart", value, "ActualStart"); }
}
/// <summary>
///Logical Name: msdyn_aggregationdirection
/// </summary>
[AttributeLogicalNameAttribute("msdyn_aggregationdirection")]
public eAggregationDirection? AggregationDirection
{
	get
	{
		if (AggregationDirection_OptionSetValue != null) { return (eAggregationDirection)AggregationDirection_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AggregationDirection_OptionSetValue = new OptionSetValue((int)value); }
		else this.AggregationDirection_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_aggregationdirection</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_aggregationdirection")]
public OptionSetValue AggregationDirection_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_aggregationdirection"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_aggregationdirection", value, "AggregationDirection_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AggregationDirection_Text(IOrganizationService Service)
{
	return this.AggregationDirection_OptionSetValue.GetOptionSetText(Service, this, "msdyn_aggregationdirection");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AggregationDirection_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AggregationDirection_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_assignedresources</para>
///<para>Max Length: 300 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_assignedresources")]
public string AssignedResources
{
	get { return this.GetPropertyValue<string>("msdyn_assignedresources"); }
	set { this.SetPropertyValue("msdyn_assignedresources", value, 300, "AssignedResources"); }
}
///<summary>
///<para>Logical Name: msdyn_assignedteammembers</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_assignedteammembers")]
public EntityReference AssignedTeamMembers
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_assignedteammembers"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_assignedteammembers", value, "AssignedTeamMembers"); }
}
///<summary>
///<para>Logical Name: msdyn_autoscheduling</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_autoscheduling")]
public bool? AutoScheduling
{
	get { return this.GetPropertyValue<bool?>("msdyn_autoscheduling"); }
	set { this.SetPropertyValue<bool?>("msdyn_autoscheduling", value, "AutoScheduling"); }
}
///<summary>
///<para>Logical Name: msdyn_transactioncategory</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_transactioncategory")]
public EntityReference Category
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_transactioncategory"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_transactioncategory", value, "Category"); }
}
///<summary>
///<para>Logical Name: msdyn_costconsumptionpercentage</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_costconsumptionpercentage")]
public decimal? CostConsumption
{
	get { return this.GetPropertyValue<decimal?>("msdyn_costconsumptionpercentage"); }
}
///<summary>
///<para>Logical Name: msdyn_costatcompleteestimate</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CostEstimateAtComplete_EAC
{
	get
	{
		if (CostEstimateAtComplete_EACMoney != null) { return CostEstimateAtComplete_EACMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_costatcompleteestimate</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_costatcompleteestimate")]
public Money CostEstimateAtComplete_EACMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_costatcompleteestimate"); }
}
///<summary>
///<para>Logical Name: msdyn_costatcompleteestimate_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CostEstimateAtCompletion_EAC_Base
{
	get
	{
		if (CostEstimateAtCompletion_EAC_BaseMoney != null) { return CostEstimateAtCompletion_EAC_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_costatcompleteestimate_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_costatcompleteestimate_base")]
public Money CostEstimateAtCompletion_EAC_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_costatcompleteestimate_base"); }
}
///<summary>
///<para>Logical Name: msdyn_varianceofcost</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CostVariance
{
	get
	{
		if (CostVarianceMoney != null) { return CostVarianceMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_varianceofcost</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_varianceofcost")]
public Money CostVarianceMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_varianceofcost"); }
}
///<summary>
///<para>Logical Name: msdyn_varianceofcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CostVariance_Base
{
	get
	{
		if (CostVariance_BaseMoney != null) { return CostVariance_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_varianceofcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_varianceofcost_base")]
public Money CostVariance_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_varianceofcost_base"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: msdyn_description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_description")]
public string Description
{
	get { return this.GetPropertyValue<string>("msdyn_description"); }
	set { this.SetPropertyValue("msdyn_description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: msdyn_scheduledend</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_scheduledend")]
public DateTime? DueDate
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_scheduledend"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_scheduledend", value, "DueDate"); }
}
///<summary>
///<para>Logical Name: msdyn_duration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_duration")]
public double? Duration
{
	get { return this.GetPropertyValue<double?>("msdyn_duration"); }
	set { this.SetPropertyValue("msdyn_duration", (double?)value, (double)0, (double)1000000000, "Duration"); }
}
///<summary>
///<para>Logical Name: msdyn_effortestimateatcomplete</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_effortestimateatcomplete")]
public double? EffortEstimateAtComplete_EAC
{
	get { return this.GetPropertyValue<double?>("msdyn_effortestimateatcomplete"); }
	set { this.SetPropertyValue("msdyn_effortestimateatcomplete", (double?)value, (double)0, (double)1000000000, "EffortEstimateAtComplete_EAC"); }
}
///<summary>
///<para>Logical Name: msdyn_plannedcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedCost
{
	get
	{
		if (EstimatedCostMoney != null) { return EstimatedCostMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_plannedcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_plannedcost_base")]
public Money EstimatedCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_plannedcost_base"); }
}
///<summary>
///<para>Logical Name: msdyn_effort</para>
///<para>Minimum Value: 0.01</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_effort")]
public double? EstimatedEffort
{
	get { return this.GetPropertyValue<double?>("msdyn_effort"); }
	set { this.SetPropertyValue("msdyn_effort", (double?)value, (double)0.01, (double)1000000000, "EstimatedEffort"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_ismilestone</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_ismilestone")]
public bool? IsMilestone
{
	get { return this.GetPropertyValue<bool?>("msdyn_ismilestone"); }
	set { this.SetPropertyValue<bool?>("msdyn_ismilestone", value, "IsMilestone"); }
}
///<summary>
///<para>Logical Name: msdyn_islinetask</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_islinetask")]
public bool? IsLineTask
{
	get { return this.GetPropertyValue<bool?>("msdyn_islinetask"); }
	set { this.SetPropertyValue<bool?>("msdyn_islinetask", value, "IsLineTask"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: msdyn_msprojectclientid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_msprojectclientid")]
public string MSProjectClientId
{
	get { return this.GetPropertyValue<string>("msdyn_msprojectclientid"); }
	set { this.SetPropertyValue("msdyn_msprojectclientid", value, 100, "MSProjectClientId"); }
}
///<summary>
///<para>Logical Name: msdyn_numberofresources</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_numberofresources")]
public int? NumberOfResources
{
	get { return this.GetPropertyValue<int?>("msdyn_numberofresources"); }
	set { this.SetPropertyValue("msdyn_numberofresources", (int?)value, (int)0, (int)2147483647, "NumberOfResources"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: msdyn_parenttask</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_parenttask")]
public EntityReference ParentTask
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_parenttask"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_parenttask", value, "ParentTask"); }
}
///<summary>
///<para>Logical Name: msdyn_plannedcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? PlannedCost
{
	get
	{
		if (PlannedCostMoney != null) { return PlannedCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PlannedCostMoney = new Money(value.Value); }
		else this.PlannedCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_plannedcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_plannedcost")]
public Money PlannedCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_plannedcost"); }
	set { this.SetPropertyValue("msdyn_plannedcost", (Money)value, (decimal)0, (decimal)922337203685477, "PlannedCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_plannedsales</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? PlannedSales
{
	get
	{
		if (PlannedSalesMoney != null) { return PlannedSalesMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PlannedSalesMoney = new Money(value.Value); }
		else this.PlannedSalesMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_plannedsales</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_plannedsales")]
public Money PlannedSalesMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_plannedsales"); }
	set { this.SetPropertyValue("msdyn_plannedsales", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "PlannedSalesMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_plannedsales_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? PlannedSales_Base
{
	get
	{
		if (PlannedSales_BaseMoney != null) { return PlannedSales_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_plannedsales_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_plannedsales_base")]
public Money PlannedSales_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_plannedsales_base"); }
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public Guid ProcessId
{
	get { return this.GetPropertyValue<Guid>("processid"); }
	set { this.SetPropertyValue<Guid>("processid", value, "ProcessId"); }
}
///<summary>
///<para>Logical Name: stageid</para>
///</summary>
[AttributeLogicalNameAttribute("stageid")]
public Guid ProcessStage
{
	get { return this.GetPropertyValue<Guid>("stageid"); }
	set { this.SetPropertyValue<Guid>("stageid", value, "ProcessStage"); }
}
///<summary>
///<para>Logical Name: msdyn_progress</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_progress")]
public decimal? Progress
{
	get { return this.GetPropertyValue<decimal?>("msdyn_progress"); }
	set { this.SetPropertyValue("msdyn_progress", (decimal?)value, (decimal)0, (decimal)100, "Progress"); }
}
///<summary>
///<para>Logical Name: msdyn_project</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_project")]
public EntityReference Project
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_project"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_project", value, "Project"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: msdyn_projecttaskid</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_projecttaskid")]
public Guid ProjectTaskId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: msdyn_subject</para>
///<para>Max Length: 450 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_subject")]
public string ProjectTaskName
{
	get { return this.GetPropertyValue<string>("msdyn_subject"); }
	set { this.SetPropertyValue("msdyn_subject", value, 450, "ProjectTaskName"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? ProjectTaskStatus
{
	get
	{
		if (ProjectTaskStatus_OptionSetValue != null) { return (eStatus)ProjectTaskStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ProjectTaskStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.ProjectTaskStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue ProjectTaskStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "ProjectTaskStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ProjectTaskStatus_Text(IOrganizationService Service)
{
	return this.ProjectTaskStatus_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ProjectTaskStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ProjectTaskStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: msdyn_remainingcost</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? RemainingCost
{
	get
	{
		if (RemainingCostMoney != null) { return RemainingCostMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RemainingCostMoney = new Money(value.Value); }
		else this.RemainingCostMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_remainingcost</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_remainingcost")]
public Money RemainingCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_remainingcost"); }
	set { this.SetPropertyValue("msdyn_remainingcost", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "RemainingCostMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_remainingcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? RemainingCost_Base
{
	get
	{
		if (RemainingCost_BaseMoney != null) { return RemainingCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_remainingcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_remainingcost_base")]
public Money RemainingCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_remainingcost_base"); }
}
///<summary>
///<para>Logical Name: msdyn_remaininghours</para>
///<para>Minimum Value: -1000000000</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_remaininghours")]
public double? RemainingHours
{
	get { return this.GetPropertyValue<double?>("msdyn_remaininghours"); }
	set { this.SetPropertyValue("msdyn_remaininghours", (double?)value, (double)-1000000000, (double)1000000000, "RemainingHours"); }
}
///<summary>
///<para>Logical Name: msdyn_remainingsales</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? RemainingSales
{
	get
	{
		if (RemainingSalesMoney != null) { return RemainingSalesMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RemainingSalesMoney = new Money(value.Value); }
		else this.RemainingSalesMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_remainingsales</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_remainingsales")]
public Money RemainingSalesMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_remainingsales"); }
	set { this.SetPropertyValue("msdyn_remainingsales", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "RemainingSalesMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_remainingsales_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? RemainingSales_Base
{
	get
	{
		if (RemainingSales_BaseMoney != null) { return RemainingSales_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_remainingsales_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_remainingsales_base")]
public Money RemainingSales_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_remainingsales_base"); }
}
///<summary>
///<para>Logical Name: msdyn_requestedhours</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_requestedhours")]
public double? RequestedHours
{
	get { return this.GetPropertyValue<double?>("msdyn_requestedhours"); }
	set { this.SetPropertyValue("msdyn_requestedhours", (double?)value, (double)0, (double)1000000000, "RequestedHours"); }
}
///<summary>
///<para>Logical Name: msdyn_resourceutilization</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_resourceutilization")]
public decimal? ResourceUtilization
{
	get { return this.GetPropertyValue<decimal?>("msdyn_resourceutilization"); }
	set { this.SetPropertyValue("msdyn_resourceutilization", (decimal?)value, (decimal)0, (decimal)100000000000, "ResourceUtilization"); }
}
///<summary>
///<para>Logical Name: msdyn_resourceorganizationalunitid</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_resourceorganizationalunitid")]
public EntityReference ResourcingUnit
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_resourceorganizationalunitid"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_resourceorganizationalunitid", value, "ResourcingUnit"); }
}
///<summary>
///<para>Logical Name: msdyn_resourcecategory</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_resourcecategory")]
public EntityReference Role
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_resourcecategory"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_resourcecategory", value, "Role"); }
}
///<summary>
///<para>Logical Name: msdyn_salesconsumptionpercentage</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salesconsumptionpercentage")]
public decimal? SalesConsumption
{
	get { return this.GetPropertyValue<decimal?>("msdyn_salesconsumptionpercentage"); }
}
///<summary>
///<para>Logical Name: msdyn_salesestimateatcomplete</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? SalesEstimateAtComplete_EAC
{
	get
	{
		if (SalesEstimateAtComplete_EACMoney != null) { return SalesEstimateAtComplete_EACMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_salesestimateatcomplete</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salesestimateatcomplete")]
public Money SalesEstimateAtComplete_EACMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_salesestimateatcomplete"); }
}
///<summary>
///<para>Logical Name: msdyn_salesestimateatcomplete_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? SalesEstimateAtComplete_EAC_Base
{
	get
	{
		if (SalesEstimateAtComplete_EAC_BaseMoney != null) { return SalesEstimateAtComplete_EAC_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_salesestimateatcomplete_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salesestimateatcomplete_base")]
public Money SalesEstimateAtComplete_EAC_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_salesestimateatcomplete_base"); }
}
///<summary>
///<para>Logical Name: msdyn_salesvariance</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? SalesVariance
{
	get
	{
		if (SalesVarianceMoney != null) { return SalesVarianceMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_salesvariance</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salesvariance")]
public Money SalesVarianceMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_salesvariance"); }
}
///<summary>
///<para>Logical Name: msdyn_salesvariance_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? SalesVariance_Base
{
	get
	{
		if (SalesVariance_BaseMoney != null) { return SalesVariance_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_salesvariance_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salesvariance_base")]
public Money SalesVariance_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_salesvariance_base"); }
}
///<summary>
///<para>Logical Name: msdyn_schedulevariance</para>
///<para>Minimum Value: -1000000000</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_schedulevariance")]
public double? ScheduleVariance
{
	get { return this.GetPropertyValue<double?>("msdyn_schedulevariance"); }
	set { this.SetPropertyValue("msdyn_schedulevariance", (double?)value, (double)-1000000000, (double)1000000000, "ScheduleVariance"); }
}
///<summary>
///<para>Logical Name: msdyn_scheduleddurationminutes</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_scheduleddurationminutes")]
public int? ScheduledDuration
{
	get { return this.GetPropertyValue<int?>("msdyn_scheduleddurationminutes"); }
	set { this.SetPropertyValue("msdyn_scheduleddurationminutes", (int?)value, (int)0, (int)2147483647, "ScheduledDuration"); }
}
///<summary>
///<para>Logical Name: msdyn_scheduledhours</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_scheduledhours")]
public double? ScheduledHours
{
	get { return this.GetPropertyValue<double?>("msdyn_scheduledhours"); }
	set { this.SetPropertyValue("msdyn_scheduledhours", (double?)value, (double)0, (double)1000000000, "ScheduledHours"); }
}
///<summary>
///<para>Logical Name: msdyn_skipupdateestimateline</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_skipupdateestimateline")]
public bool? SkipUpdateEstimateLine
{
	get { return this.GetPropertyValue<bool?>("msdyn_skipupdateestimateline"); }
	set { this.SetPropertyValue<bool?>("msdyn_skipupdateestimateline", value, "SkipUpdateEstimateLine"); }
}
///<summary>
///<para>Logical Name: msdyn_scheduledstart</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_scheduledstart")]
public DateTime? StartDate
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_scheduledstart"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_scheduledstart", value, "StartDate"); }
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string TraversedPath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "TraversedPath"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: msdyn_wbsid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_wbsid")]
public string WBSID
{
	get { return this.GetPropertyValue<string>("msdyn_wbsid"); }
	set { this.SetPropertyValue("msdyn_wbsid", value, 100, "WBSID"); }
}


        /// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: msdyn_projecttask_Annotations</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: msdyn_projecttask_Annotations</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_projecttask_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_projecttask_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_projecttask_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_projecttask_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: msdyn_projecttask_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: msdyn_projecttask_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: msdyn_projecttask_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: msdyn_projecttask_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_projecttask_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_projecttask_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Actual (Task ID)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_actual_Task</para>
/// </summary>
public List<Actual> GetActuals_TaskID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Actual>(Service, this.Id, "msdyn_actual", "msdyn_task", Columns); }
/// <summary>
/// <para><b>Actual (Task ID)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_actual_Task</para>
/// </summary>
public List<Actual> GetActuals_TaskID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Actual>(Service, this.Id, "msdyn_actual", "msdyn_task", Columns); }
/// <summary>
/// <para><b>ProjectContractLineMilestone (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_contractlinescheduleofvalue_projecttask</para>
/// </summary>
public List<ProjectContractLineMilestone> GetProjectContractLineMilestones_ProjectTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectContractLineMilestone>(Service, this.Id, "msdyn_contractlinescheduleofvalue", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>ProjectContractLineMilestone (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_contractlinescheduleofvalue_projecttask</para>
/// </summary>
public List<ProjectContractLineMilestone> GetProjectContractLineMilestones_ProjectTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectContractLineMilestone>(Service, this.Id, "msdyn_contractlinescheduleofvalue", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>EstimateLine (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_estimateline_Task</para>
/// </summary>
public List<EstimateLine> GetEstimateLines_Task (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<EstimateLine>(Service, this.Id, "msdyn_estimateline", "msdyn_task", Columns); }
/// <summary>
/// <para><b>EstimateLine (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_estimateline_Task</para>
/// </summary>
public List<EstimateLine> GetEstimateLines_Task (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<EstimateLine>(Service, this.Id, "msdyn_estimateline", "msdyn_task", Columns); }
/// <summary>
/// <para><b>Fact (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_fact_Task</para>
/// </summary>
public List<Fact> GetFacts_Task (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fact>(Service, this.Id, "msdyn_fact", "msdyn_task", Columns); }
/// <summary>
/// <para><b>Fact (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_fact_Task</para>
/// </summary>
public List<Fact> GetFacts_Task (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fact>(Service, this.Id, "msdyn_fact", "msdyn_task", Columns); }
/// <summary>
/// <para><b>InvoiceLineDetail (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_invoicelinetransaction_Task</para>
/// </summary>
public List<InvoiceLineDetail> GetInvoiceLineDetails_Task (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<InvoiceLineDetail>(Service, this.Id, "msdyn_invoicelinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>InvoiceLineDetail (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_invoicelinetransaction_Task</para>
/// </summary>
public List<InvoiceLineDetail> GetInvoiceLineDetails_Task (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<InvoiceLineDetail>(Service, this.Id, "msdyn_invoicelinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>JournalLine (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_journalline_Task</para>
/// </summary>
public List<JournalLine> GetJournalLines_Task (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<JournalLine>(Service, this.Id, "msdyn_journalline", "msdyn_task", Columns); }
/// <summary>
/// <para><b>JournalLine (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_journalline_Task</para>
/// </summary>
public List<JournalLine> GetJournalLines_Task (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<JournalLine>(Service, this.Id, "msdyn_journalline", "msdyn_task", Columns); }
/// <summary>
/// <para><b>OpportunityLineDetail (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_opportunitylinetransaction_Task</para>
/// </summary>
public List<OpportunityLineDetail> GetOpportunityLineDetails_Task (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OpportunityLineDetail>(Service, this.Id, "msdyn_opportunitylinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>OpportunityLineDetail (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_opportunitylinetransaction_Task</para>
/// </summary>
public List<OpportunityLineDetail> GetOpportunityLineDetails_Task (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OpportunityLineDetail>(Service, this.Id, "msdyn_opportunitylinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>ProjectContractLineDetail (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_orderlinetransaction_Task</para>
/// </summary>
public List<ProjectContractLineDetail> GetProjectContractLineDetails_Task (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectContractLineDetail>(Service, this.Id, "msdyn_orderlinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>ProjectContractLineDetail (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_orderlinetransaction_Task</para>
/// </summary>
public List<ProjectContractLineDetail> GetProjectContractLineDetails_Task (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectContractLineDetail>(Service, this.Id, "msdyn_orderlinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>ProjectApproval (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projectapproval_ProjectTask</para>
/// </summary>
public List<ProjectApproval> GetProjectApproval_ProjectTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectApproval>(Service, this.Id, "msdyn_projectapproval", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>ProjectApproval (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projectapproval_ProjectTask</para>
/// </summary>
public List<ProjectApproval> GetProjectApproval_ProjectTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectApproval>(Service, this.Id, "msdyn_projectapproval", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>ProjectTask (Parent Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttask_parenttask</para>
/// </summary>
public List<ProjectTask> GetProjectTasks_ParentTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTask>(Service, this.Id, "msdyn_projecttask", "msdyn_parenttask", Columns); }
/// <summary>
/// <para><b>ProjectTask (Parent Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttask_parenttask</para>
/// </summary>
public List<ProjectTask> GetProjectTasks_ParentTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTask>(Service, this.Id, "msdyn_projecttask", "msdyn_parenttask", Columns); }
/// <summary>
/// <para><b>ProjectTaskDependency (Predecessor Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttaskdependency_PredecessorTask</para>
/// </summary>
public List<ProjectTaskDependency> GetProjectTaskDependencies_PredecessorTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTaskDependency>(Service, this.Id, "msdyn_projecttaskdependency", "msdyn_predecessortask", Columns); }
/// <summary>
/// <para><b>ProjectTaskDependency (Predecessor Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttaskdependency_PredecessorTask</para>
/// </summary>
public List<ProjectTaskDependency> GetProjectTaskDependencies_PredecessorTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTaskDependency>(Service, this.Id, "msdyn_projecttaskdependency", "msdyn_predecessortask", Columns); }
/// <summary>
/// <para><b>ProjectTaskDependency (Successor Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttaskdependency_SuccessorTask</para>
/// </summary>
public List<ProjectTaskDependency> GetProjectTaskDependencies_SuccessorTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTaskDependency>(Service, this.Id, "msdyn_projecttaskdependency", "msdyn_successortask", Columns); }
/// <summary>
/// <para><b>ProjectTaskDependency (Successor Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttaskdependency_SuccessorTask</para>
/// </summary>
public List<ProjectTaskDependency> GetProjectTaskDependencies_SuccessorTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTaskDependency>(Service, this.Id, "msdyn_projecttaskdependency", "msdyn_successortask", Columns); }
/// <summary>
/// <para><b>ProjectTaskStatusUser (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttaskstatususer</para>
/// </summary>
public List<ProjectTaskStatusUser> GetProjectTaskStatusUser_ProjectTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTaskStatusUser>(Service, this.Id, "msdyn_projecttaskstatususer", "msdyn_projecttaskid", Columns); }
/// <summary>
/// <para><b>ProjectTaskStatusUser (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_projecttaskstatususer</para>
/// </summary>
public List<ProjectTaskStatusUser> GetProjectTaskStatusUser_ProjectTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProjectTaskStatusUser>(Service, this.Id, "msdyn_projecttaskstatususer", "msdyn_projecttaskid", Columns); }
/// <summary>
/// <para><b>QuoteLineMilestone (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_quotelinescheduleofvalue_projecttask</para>
/// </summary>
public List<QuoteLineMilestone> GetQuoteLineMilestones_ProjectTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuoteLineMilestone>(Service, this.Id, "msdyn_quotelinescheduleofvalue", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>QuoteLineMilestone (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_quotelinescheduleofvalue_projecttask</para>
/// </summary>
public List<QuoteLineMilestone> GetQuoteLineMilestones_ProjectTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuoteLineMilestone>(Service, this.Id, "msdyn_quotelinescheduleofvalue", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>QuoteLineDetail (Project task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_quotelinetransaction_Task</para>
/// </summary>
public List<QuoteLineDetail> GetQuoteLineDetail_ProjectTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuoteLineDetail>(Service, this.Id, "msdyn_quotelinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>QuoteLineDetail (Project task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_quotelinetransaction_Task</para>
/// </summary>
public List<QuoteLineDetail> GetQuoteLineDetail_ProjectTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuoteLineDetail>(Service, this.Id, "msdyn_quotelinetransaction", "msdyn_task", Columns); }
/// <summary>
/// <para><b>ResourceAssignment (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_resourceassignment_taskid</para>
/// </summary>
public List<ResourceAssignment> GetResourceAssignments_Task (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ResourceAssignment>(Service, this.Id, "msdyn_resourceassignment", "msdyn_taskid", Columns); }
/// <summary>
/// <para><b>ResourceAssignment (Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_resourceassignment_taskid</para>
/// </summary>
public List<ResourceAssignment> GetResourceAssignments_Task (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ResourceAssignment>(Service, this.Id, "msdyn_resourceassignment", "msdyn_taskid", Columns); }
/// <summary>
/// <para><b>TimeEntry (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_timeentry_projectTask</para>
/// </summary>
public List<TimeEntry> GetTimeEntries_ProjectTask (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TimeEntry>(Service, this.Id, "msdyn_timeentry", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>TimeEntry (Project Task)</b></para>
/// <para>Schema Name: msdyn_msdyn_projecttask_msdyn_timeentry_projectTask</para>
/// </summary>
public List<TimeEntry> GetTimeEntries_ProjectTask (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TimeEntry>(Service, this.Id, "msdyn_timeentry", "msdyn_projecttask", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_projecttask_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_projecttask_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_projecttask_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_projecttask_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: msdyn_projecttask_QueueItems</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: msdyn_projecttask_QueueItems</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_projecttask_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_projecttask_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_projecttask_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_projecttask_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eAggregationDirection
{
	///<summary><para>Upstream</para>
	///<para>Value = 0</para></summary>
	[Description("Upstream")]
	Upstream = 0, 
	///<summary><para>Downstream</para>
	///<para>Value = 1</para></summary>
	[Description("Downstream")]
	Downstream = 1, 
	///<summary><para>Both</para>
	///<para>Value = 2</para></summary>
	[Description("Both")]
	Both = 2
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>msdyn_resourceorganizationalunitidname</para>
	/// <para>msdyn_resourceorganizationalunitidname</para></summary>
	public const string Msdyn_ResourceOrganizationalUnitIdName = "msdyn_resourceorganizationalunitidname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>msdyn_assignedteammembersname</para>
	/// <para>msdyn_assignedteammembersname</para></summary>
	public const string Msdyn_AssignedTeamMembersName = "msdyn_assignedteammembersname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>msdyn_resourcecategoryname</para>
	/// <para>msdyn_resourcecategoryname</para></summary>
	public const string Msdyn_resourcecategoryName = "msdyn_resourcecategoryname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>msdyn_projectname</para>
	/// <para>msdyn_projectname</para></summary>
	public const string Msdyn_projectName = "msdyn_projectname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>msdyn_parenttaskname</para>
	/// <para>msdyn_parenttaskname</para></summary>
	public const string Msdyn_parenttaskName = "msdyn_parenttaskname";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>msdyn_transactioncategoryname</para>
	/// <para>msdyn_transactioncategoryname</para></summary>
	public const string Msdyn_transactioncategoryName = "msdyn_transactioncategoryname";
	/// <summary><para>Actual Cost</para>
	/// <para>msdyn_actualcost</para></summary>
	public const string ActualCost = "msdyn_actualcost";
	/// <summary><para>Actual Cost (Base)</para>
	/// <para>msdyn_actualcost_base</para></summary>
	public const string ActualCost_Base = "msdyn_actualcost_base";
	/// <summary><para>Actual Duration</para>
	/// <para>msdyn_actualdurationminutes</para></summary>
	public const string ActualDuration = "msdyn_actualdurationminutes";
	/// <summary><para>Actual End Date/Time</para>
	/// <para>msdyn_actualend</para></summary>
	public const string ActualEndDate_Time = "msdyn_actualend";
	/// <summary><para>Actual Hours</para>
	/// <para>msdyn_actualeffort</para></summary>
	public const string ActualHours = "msdyn_actualeffort";
	/// <summary><para>Actual Sales</para>
	/// <para>msdyn_actualsales</para></summary>
	public const string ActualSales = "msdyn_actualsales";
	/// <summary><para>Actual Sales (Base)</para>
	/// <para>msdyn_actualsales_base</para></summary>
	public const string ActualSales_Base = "msdyn_actualsales_base";
	/// <summary><para>Actual Start</para>
	/// <para>msdyn_actualstart</para></summary>
	public const string ActualStart = "msdyn_actualstart";
	/// <summary><para>Aggregation Direction</para>
	/// <para>msdyn_aggregationdirection</para></summary>
	public const string AggregationDirection = "msdyn_aggregationdirection";
	/// <summary><para>Assigned Resources</para>
	/// <para>msdyn_assignedresources</para></summary>
	public const string AssignedResources = "msdyn_assignedresources";
	/// <summary><para>Assigned Team Members</para>
	/// <para>msdyn_assignedteammembers</para></summary>
	public const string AssignedTeamMembers = "msdyn_assignedteammembers";
	/// <summary><para>Auto Scheduling</para>
	/// <para>msdyn_autoscheduling</para></summary>
	public const string AutoScheduling = "msdyn_autoscheduling";
	/// <summary><para>Category</para>
	/// <para>msdyn_transactioncategory</para></summary>
	public const string Category = "msdyn_transactioncategory";
	/// <summary><para>Cost Consumption %</para>
	/// <para>msdyn_costconsumptionpercentage</para></summary>
	public const string CostConsumption = "msdyn_costconsumptionpercentage";
	/// <summary><para>Cost estimate at complete (EAC)</para>
	/// <para>msdyn_costatcompleteestimate</para></summary>
	public const string CostEstimateAtComplete_EAC = "msdyn_costatcompleteestimate";
	/// <summary><para>Cost estimate at completion (EAC) (Base)</para>
	/// <para>msdyn_costatcompleteestimate_base</para></summary>
	public const string CostEstimateAtCompletion_EAC_Base = "msdyn_costatcompleteestimate_base";
	/// <summary><para>Cost Variance</para>
	/// <para>msdyn_varianceofcost</para></summary>
	public const string CostVariance = "msdyn_varianceofcost";
	/// <summary><para>Cost Variance (Base)</para>
	/// <para>msdyn_varianceofcost_base</para></summary>
	public const string CostVariance_Base = "msdyn_varianceofcost_base";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Description</para>
	/// <para>msdyn_description</para></summary>
	public const string Description = "msdyn_description";
	/// <summary><para>Due Date</para>
	/// <para>msdyn_scheduledend</para></summary>
	public const string DueDate = "msdyn_scheduledend";
	/// <summary><para>Duration</para>
	/// <para>msdyn_duration</para></summary>
	public const string Duration = "msdyn_duration";
	/// <summary><para>Effort estimate at complete (EAC)</para>
	/// <para>msdyn_effortestimateatcomplete</para></summary>
	public const string EffortEstimateAtComplete_EAC = "msdyn_effortestimateatcomplete";
	/// <summary><para>Estimated cost</para>
	/// <para>msdyn_plannedcost_base</para></summary>
	public const string EstimatedCost = "msdyn_plannedcost_base";
	/// <summary><para>Estimated Effort</para>
	/// <para>msdyn_effort</para></summary>
	public const string EstimatedEffort = "msdyn_effort";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Is Milestone</para>
	/// <para>msdyn_ismilestone</para></summary>
	public const string IsMilestone = "msdyn_ismilestone";
	/// <summary><para>IsLineTask</para>
	/// <para>msdyn_islinetask</para></summary>
	public const string IsLineTask = "msdyn_islinetask";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>MS Project Client Id</para>
	/// <para>msdyn_msprojectclientid</para></summary>
	public const string MSProjectClientId = "msdyn_msprojectclientid";
	/// <summary><para>Number of resources</para>
	/// <para>msdyn_numberofresources</para></summary>
	public const string NumberOfResources = "msdyn_numberofresources";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Parent Task</para>
	/// <para>msdyn_parenttask</para></summary>
	public const string ParentTask = "msdyn_parenttask";
	/// <summary><para>Planned cost</para>
	/// <para>msdyn_plannedcost</para></summary>
	public const string PlannedCost = "msdyn_plannedcost";
	/// <summary><para>Planned Sales</para>
	/// <para>msdyn_plannedsales</para></summary>
	public const string PlannedSales = "msdyn_plannedsales";
	/// <summary><para>Planned Sales (Base)</para>
	/// <para>msdyn_plannedsales_base</para></summary>
	public const string PlannedSales_Base = "msdyn_plannedsales_base";
	/// <summary><para>Process Id</para>
	/// <para>processid</para></summary>
	public const string ProcessId = "processid";
	/// <summary><para>Process Stage</para>
	/// <para>stageid</para></summary>
	public const string ProcessStage = "stageid";
	/// <summary><para>Progress %</para>
	/// <para>msdyn_progress</para></summary>
	public const string Progress = "msdyn_progress";
	/// <summary><para>Project</para>
	/// <para>msdyn_project</para></summary>
	public const string Project = "msdyn_project";
	/// <summary><para>Project task</para>
	/// <para>msdyn_projecttaskid</para></summary>
	public const string ProjectTaskId = "msdyn_projecttaskid";
	/// <summary><para>Project Task Name</para>
	/// <para>msdyn_subject</para></summary>
	public const string ProjectTaskName = "msdyn_subject";
	/// <summary><para>Project Task Status</para>
	/// <para>statecode</para></summary>
	public const string ProjectTaskStatus = "statecode";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Remaining Cost</para>
	/// <para>msdyn_remainingcost</para></summary>
	public const string RemainingCost = "msdyn_remainingcost";
	/// <summary><para>Remaining Cost (Base)</para>
	/// <para>msdyn_remainingcost_base</para></summary>
	public const string RemainingCost_Base = "msdyn_remainingcost_base";
	/// <summary><para>Remaining Hours</para>
	/// <para>msdyn_remaininghours</para></summary>
	public const string RemainingHours = "msdyn_remaininghours";
	/// <summary><para>Remaining Sales</para>
	/// <para>msdyn_remainingsales</para></summary>
	public const string RemainingSales = "msdyn_remainingsales";
	/// <summary><para>Remaining Sales (Base)</para>
	/// <para>msdyn_remainingsales_base</para></summary>
	public const string RemainingSales_Base = "msdyn_remainingsales_base";
	/// <summary><para>Requested Hours</para>
	/// <para>msdyn_requestedhours</para></summary>
	public const string RequestedHours = "msdyn_requestedhours";
	/// <summary><para>ResourceUtilization</para>
	/// <para>msdyn_resourceutilization</para></summary>
	public const string ResourceUtilization = "msdyn_resourceutilization";
	/// <summary><para>Resourcing unit</para>
	/// <para>msdyn_resourceorganizationalunitid</para></summary>
	public const string ResourcingUnit = "msdyn_resourceorganizationalunitid";
	/// <summary><para>Role</para>
	/// <para>msdyn_resourcecategory</para></summary>
	public const string Role = "msdyn_resourcecategory";
	/// <summary><para>Sales Consumption %</para>
	/// <para>msdyn_salesconsumptionpercentage</para></summary>
	public const string SalesConsumption = "msdyn_salesconsumptionpercentage";
	/// <summary><para>Sales Estimate At Complete (EAC)</para>
	/// <para>msdyn_salesestimateatcomplete</para></summary>
	public const string SalesEstimateAtComplete_EAC = "msdyn_salesestimateatcomplete";
	/// <summary><para>Sales Estimate At Complete (EAC) (Base)</para>
	/// <para>msdyn_salesestimateatcomplete_base</para></summary>
	public const string SalesEstimateAtComplete_EAC_Base = "msdyn_salesestimateatcomplete_base";
	/// <summary><para>Sales Variance</para>
	/// <para>msdyn_salesvariance</para></summary>
	public const string SalesVariance = "msdyn_salesvariance";
	/// <summary><para>Sales Variance (Base)</para>
	/// <para>msdyn_salesvariance_base</para></summary>
	public const string SalesVariance_Base = "msdyn_salesvariance_base";
	/// <summary><para>Schedule Variance</para>
	/// <para>msdyn_schedulevariance</para></summary>
	public const string ScheduleVariance = "msdyn_schedulevariance";
	/// <summary><para>Scheduled Duration</para>
	/// <para>msdyn_scheduleddurationminutes</para></summary>
	public const string ScheduledDuration = "msdyn_scheduleddurationminutes";
	/// <summary><para>Scheduled Hours</para>
	/// <para>msdyn_scheduledhours</para></summary>
	public const string ScheduledHours = "msdyn_scheduledhours";
	/// <summary><para>Skip Update Estimate Line</para>
	/// <para>msdyn_skipupdateestimateline</para></summary>
	public const string SkipUpdateEstimateLine = "msdyn_skipupdateestimateline";
	/// <summary><para>Start Date</para>
	/// <para>msdyn_scheduledstart</para></summary>
	public const string StartDate = "msdyn_scheduledstart";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Traversed Path</para>
	/// <para>traversedpath</para></summary>
	public const string TraversedPath = "traversedpath";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>WBS ID</para>
	/// <para>msdyn_wbsid</para></summary>
	public const string WBSID = "msdyn_wbsid";
}

    }
}
