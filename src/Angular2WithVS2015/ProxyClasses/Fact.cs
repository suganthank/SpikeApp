// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("msdyn_fact")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Fact : BaseProxyClass
    {
        public new const string LogicalName = "msdyn_fact";
        public const int ObjectTypeCode = 10042;
        public const string PrimaryIdAttribute = "msdyn_factid";
        public const string PrimaryNameAttribute = "msdyn_name";
        
        static Fact()
        {
            BaseProxyClass.RegisterProxyType(typeof(Fact), "msdyn_fact");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Fact() : base(new Entity("msdyn_fact")) { }
        public Fact(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Fact>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: msdyn_estimatename</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatename")]
public string Msdyn_EstimateName
{
	get { return this.GetPropertyValue<string>("msdyn_estimatename"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: msdyn_accountcustomeryominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_accountcustomeryominame")]
public string Msdyn_AccountCustomerYomiName
{
	get { return this.GetPropertyValue<string>("msdyn_accountcustomeryominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatelineidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatelineidname")]
public string Msdyn_estimatelineidName
{
	get { return this.GetPropertyValue<string>("msdyn_estimatelineidname"); }
}
///<summary>
///<para>Logical Name: msdyn_resourcecategoryname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_resourcecategoryname")]
public string Msdyn_ResourceCategoryName
{
	get { return this.GetPropertyValue<string>("msdyn_resourcecategoryname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: msdyn_contactcustomeryominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_contactcustomeryominame")]
public string Msdyn_ContactCustomerYomiName
{
	get { return this.GetPropertyValue<string>("msdyn_contactcustomeryominame"); }
}
///<summary>
///<para>Logical Name: msdyn_taskname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_taskname")]
public string Msdyn_TaskName
{
	get { return this.GetPropertyValue<string>("msdyn_taskname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: msdyn_contactvendoryominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_contactvendoryominame")]
public string Msdyn_ContactVendorYomiName
{
	get { return this.GetPropertyValue<string>("msdyn_contactvendoryominame"); }
}
///<summary>
///<para>Logical Name: msdyn_projectname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_projectname")]
public string Msdyn_ProjectName
{
	get { return this.GetPropertyValue<string>("msdyn_projectname"); }
}
///<summary>
///<para>Logical Name: msdyn_productname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_productname")]
public string Msdyn_ProductName
{
	get { return this.GetPropertyValue<string>("msdyn_productname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: msdyn_accountvendoryominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_accountvendoryominame")]
public string Msdyn_AccountVendorYomiName
{
	get { return this.GetPropertyValue<string>("msdyn_accountvendoryominame"); }
}
///<summary>
///<para>Logical Name: msdyn_salescontractname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salescontractname")]
public string Msdyn_SalesContractName
{
	get { return this.GetPropertyValue<string>("msdyn_salescontractname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: msdyn_accountvendorname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_accountvendorname")]
public string Msdyn_AccountVendorName
{
	get { return this.GetPropertyValue<string>("msdyn_accountvendorname"); }
}
///<summary>
///<para>Logical Name: msdyn_accountcustomername</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_accountcustomername")]
public string Msdyn_AccountCustomerName
{
	get { return this.GetPropertyValue<string>("msdyn_accountcustomername"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_bookableresourcename</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_bookableresourcename")]
public string Msdyn_bookableresourceName
{
	get { return this.GetPropertyValue<string>("msdyn_bookableresourcename"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_contactcustomername</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_contactcustomername")]
public string Msdyn_ContactCustomerName
{
	get { return this.GetPropertyValue<string>("msdyn_contactcustomername"); }
}
///<summary>
///<para>Logical Name: msdyn_transactioncategoryname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_transactioncategoryname")]
public string Msdyn_TransactionCategoryName
{
	get { return this.GetPropertyValue<string>("msdyn_transactioncategoryname"); }
}
///<summary>
///<para>Logical Name: msdyn_contactvendorname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_contactvendorname")]
public string Msdyn_ContactVendorName
{
	get { return this.GetPropertyValue<string>("msdyn_contactvendorname"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeablebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualChargeableBilledSalesAmount
{
	get
	{
		if (ActualChargeableBilledSalesAmountMoney != null) { return ActualChargeableBilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualChargeableBilledSalesAmountMoney = new Money(value.Value); }
		else this.ActualChargeableBilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actchargeablebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeablebilledsalesamount")]
public Money ActualChargeableBilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actchargeablebilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_actchargeablebilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualChargeableBilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeablebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualChargeableBilledSalesAmount_Base
{
	get
	{
		if (ActualChargeableBilledSalesAmount_BaseMoney != null) { return ActualChargeableBilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actchargeablebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeablebilledsalesamount_base")]
public Money ActualChargeableBilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actchargeablebilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeablebilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeablebilledsalesquantity")]
public decimal? ActualChargeableBilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actchargeablebilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_actchargeablebilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualChargeableBilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualChargeableCostAmount
{
	get
	{
		if (ActualChargeableCostAmountMoney != null) { return ActualChargeableCostAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualChargeableCostAmountMoney = new Money(value.Value); }
		else this.ActualChargeableCostAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeablecostamount")]
public Money ActualChargeableCostAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actchargeablecostamount"); }
	set { this.SetPropertyValue("msdyn_actchargeablecostamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualChargeableCostAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualChargeableCostAmount_Base
{
	get
	{
		if (ActualChargeableCostAmount_BaseMoney != null) { return ActualChargeableCostAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeablecostamount_base")]
public Money ActualChargeableCostAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actchargeablecostamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeablecostquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeablecostquantity")]
public decimal? ActualChargeableCostQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actchargeablecostquantity"); }
	set { this.SetPropertyValue("msdyn_actchargeablecostquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualChargeableCostQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualChargeableUnbilledSalesAmount
{
	get
	{
		if (ActualChargeableUnbilledSalesAmountMoney != null) { return ActualChargeableUnbilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualChargeableUnbilledSalesAmountMoney = new Money(value.Value); }
		else this.ActualChargeableUnbilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeableunbilledsalesamount")]
public Money ActualChargeableUnbilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actchargeableunbilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_actchargeableunbilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualChargeableUnbilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualChargeableUnbilledSalesAmount_Base
{
	get
	{
		if (ActualChargeableUnbilledSalesAmount_BaseMoney != null) { return ActualChargeableUnbilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeableunbilledsalesamount_base")]
public Money ActualChargeableUnbilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actchargeableunbilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actchargeableunbilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actchargeableunbilledsalesquantity")]
public decimal? ActualChargeableUnbilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actchargeableunbilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_actchargeableunbilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualChargeableUnbilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNoChargeBilledSalesAmount
{
	get
	{
		if (ActualNoChargeBilledSalesAmountMoney != null) { return ActualNoChargeBilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualNoChargeBilledSalesAmountMoney = new Money(value.Value); }
		else this.ActualNoChargeBilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnochargebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargebilledsalesamount")]
public Money ActualNoChargeBilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnochargebilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_actnochargebilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualNoChargeBilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNoChargeBilledSalesAmount_Base
{
	get
	{
		if (ActualNoChargeBilledSalesAmount_BaseMoney != null) { return ActualNoChargeBilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnochargebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargebilledsalesamount_base")]
public Money ActualNoChargeBilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnochargebilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargebilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargebilledsalesquantity")]
public decimal? ActualNoChargeBilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actnochargebilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_actnochargebilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualNoChargeBilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNoChargeCostAmount
{
	get
	{
		if (ActualNoChargeCostAmountMoney != null) { return ActualNoChargeCostAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualNoChargeCostAmountMoney = new Money(value.Value); }
		else this.ActualNoChargeCostAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnochargecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargecostamount")]
public Money ActualNoChargeCostAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnochargecostamount"); }
	set { this.SetPropertyValue("msdyn_actnochargecostamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualNoChargeCostAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNoChargeCostAmount_Base
{
	get
	{
		if (ActualNoChargeCostAmount_BaseMoney != null) { return ActualNoChargeCostAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnochargecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargecostamount_base")]
public Money ActualNoChargeCostAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnochargecostamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargecostquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargecostquantity")]
public decimal? ActualNoChargeCostQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actnochargecostquantity"); }
	set { this.SetPropertyValue("msdyn_actnochargecostquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualNoChargeCostQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargeunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNoChargeUnbilledSalesAmount
{
	get
	{
		if (ActualNoChargeUnbilledSalesAmountMoney != null) { return ActualNoChargeUnbilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualNoChargeUnbilledSalesAmountMoney = new Money(value.Value); }
		else this.ActualNoChargeUnbilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnochargeunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargeunbilledsalesamount")]
public Money ActualNoChargeUnbilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnochargeunbilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_actnochargeunbilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualNoChargeUnbilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargeunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNoChargeUnbilledSalesAmount_Base
{
	get
	{
		if (ActualNoChargeUnbilledSalesAmount_BaseMoney != null) { return ActualNoChargeUnbilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnochargeunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargeunbilledsalesamount_base")]
public Money ActualNoChargeUnbilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnochargeunbilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actnochargeunbilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnochargeunbilledsalesquantity")]
public decimal? ActualNoChargeUnbilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actnochargeunbilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_actnochargeunbilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualNoChargeUnbilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNonChargeableCostAmount
{
	get
	{
		if (ActualNonChargeableCostAmountMoney != null) { return ActualNonChargeableCostAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualNonChargeableCostAmountMoney = new Money(value.Value); }
		else this.ActualNonChargeableCostAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnonchargeablecostamount")]
public Money ActualNonChargeableCostAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnonchargeablecostamount"); }
	set { this.SetPropertyValue("msdyn_actnonchargeablecostamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualNonChargeableCostAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNonChargeableCostAmount_Base
{
	get
	{
		if (ActualNonChargeableCostAmount_BaseMoney != null) { return ActualNonChargeableCostAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnonchargeablecostamount_base")]
public Money ActualNonChargeableCostAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnonchargeablecostamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeablecostquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnonchargeablecostquantity")]
public decimal? ActualNonChargeableCostQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actnonchargeablecostquantity"); }
	set { this.SetPropertyValue("msdyn_actnonchargeablecostquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualNonChargeableCostQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNonChargeableUnbilledSalesAmount
{
	get
	{
		if (ActualNonChargeableUnbilledSalesAmountMoney != null) { return ActualNonChargeableUnbilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActualNonChargeableUnbilledSalesAmountMoney = new Money(value.Value); }
		else this.ActualNonChargeableUnbilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnonchargeableunbilledsalesamount")]
public Money ActualNonChargeableUnbilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnonchargeableunbilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_actnonchargeableunbilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ActualNonChargeableUnbilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ActualNonChargeableUnbilledSalesAmount_Base
{
	get
	{
		if (ActualNonChargeableUnbilledSalesAmount_BaseMoney != null) { return ActualNonChargeableUnbilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnonchargeableunbilledsalesamount_base")]
public Money ActualNonChargeableUnbilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_actnonchargeableunbilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_actnonchargeableunbilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_actnonchargeableunbilledsalesquantity")]
public decimal? ActualNonChargeableUnbilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_actnonchargeableunbilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_actnonchargeableunbilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "ActualNonChargeableUnbilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_bookableresource</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_bookableresource")]
public EntityReference BookableResource
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_bookableresource"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_bookableresource", value, "BookableResource"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: msdyn_contactcustomer</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_contactcustomer")]
public EntityReference Customer
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_contactcustomer"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_contactcustomer", value, "Customer"); }
}
///<summary>
///<para>Logical Name: msdyn_accountcustomer</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_accountcustomer")]
public EntityReference Customer2
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_accountcustomer"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_accountcustomer", value, "Customer2"); }
}
/// <summary>
///Logical Name: msdyn_customertype
/// </summary>
[AttributeLogicalNameAttribute("msdyn_customertype")]
public ePartyType? CustomerType
{
	get
	{
		if (CustomerType_OptionSetValue != null) { return (ePartyType)CustomerType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CustomerType_OptionSetValue = new OptionSetValue((int)value); }
		else this.CustomerType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_customertype</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_customertype")]
public OptionSetValue CustomerType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_customertype"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_customertype", value, "CustomerType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string CustomerType_Text(IOrganizationService Service)
{
	return this.CustomerType_OptionSetValue.GetOptionSetText(Service, this, "msdyn_customertype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string CustomerType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.CustomerType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_documentdate</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_documentdate")]
public DateTime? DocumentDate
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_documentdate"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_documentdate", value, "DocumentDate"); }
}
///<summary>
///<para>Logical Name: msdyn_earnedrevenue</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EarnedRevenue
{
	get
	{
		if (EarnedRevenueMoney != null) { return EarnedRevenueMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_earnedrevenue</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_earnedrevenue")]
public Money EarnedRevenueMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_earnedrevenue"); }
}
///<summary>
///<para>Logical Name: msdyn_earnedrevenue_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EarnedRevenue_Base
{
	get
	{
		if (EarnedRevenue_BaseMoney != null) { return EarnedRevenue_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_earnedrevenue_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_earnedrevenue_base")]
public Money EarnedRevenue_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_earnedrevenue_base"); }
}
///<summary>
///<para>Logical Name: msdyn_enddate</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_enddate")]
public DateTime? EndDate
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_enddate"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_enddate", value, "EndDate"); }
}
///<summary>
///<para>Logical Name: msdyn_estimate</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimate")]
public EntityReference Estimate
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_estimate"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_estimate", value, "Estimate"); }
}
///<summary>
///<para>Logical Name: msdyn_estimatelineid</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estimatelineid")]
public EntityReference EstimateLine
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_estimatelineid"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_estimatelineid", value, "EstimateLine"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeablebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedChargeableBilledSalesAmount
{
	get
	{
		if (EstimatedChargeableBilledSalesAmountMoney != null) { return EstimatedChargeableBilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedChargeableBilledSalesAmountMoney = new Money(value.Value); }
		else this.EstimatedChargeableBilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estchargeablebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeablebilledsalesamount")]
public Money EstimatedChargeableBilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estchargeablebilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_estchargeablebilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedChargeableBilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeablebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedChargeableBilledSalesAmount_Base
{
	get
	{
		if (EstimatedChargeableBilledSalesAmount_BaseMoney != null) { return EstimatedChargeableBilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estchargeablebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeablebilledsalesamount_base")]
public Money EstimatedChargeableBilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estchargeablebilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeablebilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeablebilledsalesquantity")]
public decimal? EstimatedChargeableBilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estchargeablebilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_estchargeablebilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedChargeableBilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedChargeableCostAmount
{
	get
	{
		if (EstimatedChargeableCostAmountMoney != null) { return EstimatedChargeableCostAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedChargeableCostAmountMoney = new Money(value.Value); }
		else this.EstimatedChargeableCostAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeablecostamount")]
public Money EstimatedChargeableCostAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estchargeablecostamount"); }
	set { this.SetPropertyValue("msdyn_estchargeablecostamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedChargeableCostAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedChargeableCostAmount_Base
{
	get
	{
		if (EstimatedChargeableCostAmount_BaseMoney != null) { return EstimatedChargeableCostAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeablecostamount_base")]
public Money EstimatedChargeableCostAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estchargeablecostamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeablecostquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeablecostquantity")]
public decimal? EstimatedChargeableCostQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estchargeablecostquantity"); }
	set { this.SetPropertyValue("msdyn_estchargeablecostquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedChargeableCostQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedChargeableUnbilledSalesAmount
{
	get
	{
		if (EstimatedChargeableUnbilledSalesAmountMoney != null) { return EstimatedChargeableUnbilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedChargeableUnbilledSalesAmountMoney = new Money(value.Value); }
		else this.EstimatedChargeableUnbilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeableunbilledsalesamount")]
public Money EstimatedChargeableUnbilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estchargeableunbilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_estchargeableunbilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedChargeableUnbilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedChargeableUnbilledSalesAmount_Base
{
	get
	{
		if (EstimatedChargeableUnbilledSalesAmount_BaseMoney != null) { return EstimatedChargeableUnbilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeableunbilledsalesamount_base")]
public Money EstimatedChargeableUnbilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estchargeableunbilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estchargeableunbilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estchargeableunbilledsalesquantity")]
public decimal? EstimatedChargeableUnbilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estchargeableunbilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_estchargeableunbilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedChargeableUnbilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNoChargeBilledSalesAmount
{
	get
	{
		if (EstimatedNoChargeBilledSalesAmountMoney != null) { return EstimatedNoChargeBilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedNoChargeBilledSalesAmountMoney = new Money(value.Value); }
		else this.EstimatedNoChargeBilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnochargebilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargebilledsalesamount")]
public Money EstimatedNoChargeBilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnochargebilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_estnochargebilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedNoChargeBilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNoChargeBilledSalesAmount_Base
{
	get
	{
		if (EstimatedNoChargeBilledSalesAmount_BaseMoney != null) { return EstimatedNoChargeBilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnochargebilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargebilledsalesamount_base")]
public Money EstimatedNoChargeBilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnochargebilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargebilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargebilledsalesquantity")]
public decimal? EstimatedNoChargeBilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estnochargebilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_estnochargebilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedNoChargeBilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNoChargeCostAmount
{
	get
	{
		if (EstimatedNoChargeCostAmountMoney != null) { return EstimatedNoChargeCostAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedNoChargeCostAmountMoney = new Money(value.Value); }
		else this.EstimatedNoChargeCostAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnochargecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargecostamount")]
public Money EstimatedNoChargeCostAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnochargecostamount"); }
	set { this.SetPropertyValue("msdyn_estnochargecostamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedNoChargeCostAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNoChargeCostAmount_Base
{
	get
	{
		if (EstimatedNoChargeCostAmount_BaseMoney != null) { return EstimatedNoChargeCostAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnochargecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargecostamount_base")]
public Money EstimatedNoChargeCostAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnochargecostamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargecostquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargecostquantity")]
public decimal? EstimatedNoChargeCostQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estnochargecostquantity"); }
	set { this.SetPropertyValue("msdyn_estnochargecostquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedNoChargeCostQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargeunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNoChargeUnbilledSalesAmount
{
	get
	{
		if (EstimatedNoChargeUnbilledSalesAmountMoney != null) { return EstimatedNoChargeUnbilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedNoChargeUnbilledSalesAmountMoney = new Money(value.Value); }
		else this.EstimatedNoChargeUnbilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnochargeunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargeunbilledsalesamount")]
public Money EstimatedNoChargeUnbilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnochargeunbilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_estnochargeunbilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedNoChargeUnbilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargeunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNoChargeUnbilledSalesAmount_Base
{
	get
	{
		if (EstimatedNoChargeUnbilledSalesAmount_BaseMoney != null) { return EstimatedNoChargeUnbilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnochargeunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargeunbilledsalesamount_base")]
public Money EstimatedNoChargeUnbilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnochargeunbilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estnochargeunbilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnochargeunbilledsalesquantity")]
public decimal? EstimatedNoChargeUnbilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estnochargeunbilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_estnochargeunbilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedNoChargeUnbilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNonChargeableCostAmount
{
	get
	{
		if (EstimatedNonChargeableCostAmountMoney != null) { return EstimatedNonChargeableCostAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedNonChargeableCostAmountMoney = new Money(value.Value); }
		else this.EstimatedNonChargeableCostAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeablecostamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnonchargeablecostamount")]
public Money EstimatedNonChargeableCostAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnonchargeablecostamount"); }
	set { this.SetPropertyValue("msdyn_estnonchargeablecostamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedNonChargeableCostAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNonChargeableCostAmount_Base
{
	get
	{
		if (EstimatedNonChargeableCostAmount_BaseMoney != null) { return EstimatedNonChargeableCostAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeablecostamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnonchargeablecostamount_base")]
public Money EstimatedNonChargeableCostAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnonchargeablecostamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeablecostquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnonchargeablecostquantity")]
public decimal? EstimatedNonChargeableCostQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estnonchargeablecostquantity"); }
	set { this.SetPropertyValue("msdyn_estnonchargeablecostquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedNonChargeableCostQuantity"); }
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNonChargeableUnbilledSalesAmount
{
	get
	{
		if (EstimatedNonChargeableUnbilledSalesAmountMoney != null) { return EstimatedNonChargeableUnbilledSalesAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedNonChargeableUnbilledSalesAmountMoney = new Money(value.Value); }
		else this.EstimatedNonChargeableUnbilledSalesAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeableunbilledsalesamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnonchargeableunbilledsalesamount")]
public Money EstimatedNonChargeableUnbilledSalesAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnonchargeableunbilledsalesamount"); }
	set { this.SetPropertyValue("msdyn_estnonchargeableunbilledsalesamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "EstimatedNonChargeableUnbilledSalesAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? EstimatedNonChargeableUnbilledSalesAmount_Base
{
	get
	{
		if (EstimatedNonChargeableUnbilledSalesAmount_BaseMoney != null) { return EstimatedNonChargeableUnbilledSalesAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeableunbilledsalesamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnonchargeableunbilledsalesamount_base")]
public Money EstimatedNonChargeableUnbilledSalesAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_estnonchargeableunbilledsalesamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_estnonchargeableunbilledsalesquantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_estnonchargeableunbilledsalesquantity")]
public decimal? EstimatedNonChargeableUnbilledSalesQuantity
{
	get { return this.GetPropertyValue<decimal?>("msdyn_estnonchargeableunbilledsalesquantity"); }
	set { this.SetPropertyValue("msdyn_estnonchargeableunbilledsalesquantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "EstimatedNonChargeableUnbilledSalesQuantity"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: msdyn_factid</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_factid")]
public Guid FactId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
/// <summary>
///Logical Name: msdyn_facttype
/// </summary>
[AttributeLogicalNameAttribute("msdyn_facttype")]
public eFactType? FactType
{
	get
	{
		if (FactType_OptionSetValue != null) { return (eFactType)FactType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FactType_OptionSetValue = new OptionSetValue((int)value); }
		else this.FactType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_facttype</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_facttype")]
public OptionSetValue FactType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_facttype"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_facttype", value, "FactType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FactType_Text(IOrganizationService Service)
{
	return this.FactType_OptionSetValue.GetOptionSetText(Service, this, "msdyn_facttype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FactType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FactType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_grossmargin</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? GrossMargin
{
	get
	{
		if (GrossMarginMoney != null) { return GrossMarginMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_grossmargin</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_grossmargin")]
public Money GrossMarginMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_grossmargin"); }
}
///<summary>
///<para>Logical Name: msdyn_grossmargin_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? GrossMargin_Base
{
	get
	{
		if (GrossMargin_BaseMoney != null) { return GrossMargin_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_grossmargin_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_grossmargin_base")]
public Money GrossMargin_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_grossmargin_base"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: msdyn_name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_name")]
public string Name
{
	get { return this.GetPropertyValue<string>("msdyn_name"); }
	set { this.SetPropertyValue("msdyn_name", value, 100, "Name"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: msdyn_product</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_product")]
public EntityReference Product
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_product"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_product", value, "Product"); }
}
///<summary>
///<para>Logical Name: msdyn_project</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_project")]
public EntityReference Project
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_project"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_project", value, "Project"); }
}
///<summary>
///<para>Logical Name: msdyn_salescontract</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salescontract")]
public EntityReference ProjectContract
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_salescontract"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_salescontract", value, "ProjectContract"); }
}
///<summary>
///<para>Logical Name: msdyn_salescontractline</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_salescontractline")]
public string ProjectContractLine
{
	get { return this.GetPropertyValue<string>("msdyn_salescontractline"); }
	set { this.SetPropertyValue("msdyn_salescontractline", value, 100, "ProjectContractLine"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: msdyn_resourcecategory</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_resourcecategory")]
public EntityReference Role
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_resourcecategory"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_resourcecategory", value, "Role"); }
}
///<summary>
///<para>Logical Name: msdyn_startdate</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_startdate")]
public DateTime? StartDate
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_startdate"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_startdate", value, "StartDate"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_task</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_task")]
public EntityReference Task
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_task"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_task", value, "Task"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_totalcost</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalCost
{
	get
	{
		if (TotalCostMoney != null) { return TotalCostMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_totalcost</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_totalcost")]
public Money TotalCostMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_totalcost"); }
}
///<summary>
///<para>Logical Name: msdyn_totalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalCost_Base
{
	get
	{
		if (TotalCost_BaseMoney != null) { return TotalCost_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_totalcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_totalcost_base")]
public Money TotalCost_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_totalcost_base"); }
}
///<summary>
///<para>Logical Name: msdyn_totalhours</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_totalhours")]
public decimal? TotalHours
{
	get { return this.GetPropertyValue<decimal?>("msdyn_totalhours"); }
}
///<summary>
///<para>Logical Name: msdyn_transactioncategory</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_transactioncategory")]
public EntityReference TransactionCategory
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_transactioncategory"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_transactioncategory", value, "TransactionCategory"); }
}
/// <summary>
///Logical Name: msdyn_transactionclassification
/// </summary>
[AttributeLogicalNameAttribute("msdyn_transactionclassification")]
public eTransactionClassification? TransactionClassification
{
	get
	{
		if (TransactionClassification_OptionSetValue != null) { return (eTransactionClassification)TransactionClassification_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.TransactionClassification_OptionSetValue = new OptionSetValue((int)value); }
		else this.TransactionClassification_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_transactionclassification</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_transactionclassification")]
public OptionSetValue TransactionClassification_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_transactionclassification"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_transactionclassification", value, "TransactionClassification_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string TransactionClassification_Text(IOrganizationService Service)
{
	return this.TransactionClassification_OptionSetValue.GetOptionSetText(Service, this, "msdyn_transactionclassification");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string TransactionClassification_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.TransactionClassification_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: msdyn_accountvendor</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_accountvendor")]
public EntityReference Vendor
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_accountvendor"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_accountvendor", value, "Vendor"); }
}
///<summary>
///<para>Logical Name: msdyn_contactvendor</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_contactvendor")]
public EntityReference Vendor2
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_contactvendor"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_contactvendor", value, "Vendor2"); }
}
/// <summary>
///Logical Name: msdyn_vendortype
/// </summary>
[AttributeLogicalNameAttribute("msdyn_vendortype")]
public ePartyType? VendorType
{
	get
	{
		if (VendorType_OptionSetValue != null) { return (ePartyType)VendorType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.VendorType_OptionSetValue = new OptionSetValue((int)value); }
		else this.VendorType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_vendortype</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_vendortype")]
public OptionSetValue VendorType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_vendortype"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_vendortype", value, "VendorType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string VendorType_Text(IOrganizationService Service)
{
	return this.VendorType_OptionSetValue.GetOptionSetText(Service, this, "msdyn_vendortype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string VendorType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.VendorType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: msdyn_fact_Annotations</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: msdyn_fact_Annotations</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_fact_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: msdyn_fact_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_fact_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: msdyn_fact_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: msdyn_fact_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: msdyn_fact_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: msdyn_fact_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: msdyn_fact_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_fact_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: msdyn_fact_MailboxTrackingFolders</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_fact_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: msdyn_fact_PrincipalObjectAttributeAccesses</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_fact_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: msdyn_fact_ProcessSession</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_fact_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: msdyn_fact_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_fact_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: msdyn_fact_UserEntityInstanceDatas</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum ePartyType
{
	///<summary><para>Account</para>
	///<para>Value = 192350001</para></summary>
	[Description("Account")]
	Account = 192350001, 
	///<summary><para>Contact</para>
	///<para>Value = 192350002</para></summary>
	[Description("Contact")]
	Contact = 192350002
}
public enum eFactType
{
	///<summary><para>Actual</para>
	///<para>Value = 192350000</para></summary>
	[Description("Actual")]
	Actual = 192350000, 
	///<summary><para>Estimate</para>
	///<para>Value = 192350001</para></summary>
	[Description("Estimate")]
	Estimate = 192350001
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public enum eTransactionClassification
{
	///<summary><para>Commission</para>
	///<para>Value = 690970000</para></summary>
	[Description("Commission")]
	Commission = 690970000, 
	///<summary><para>Additional</para>
	///<para>Value = 690970001</para></summary>
	[Description("Additional")]
	Additional = 690970001, 
	///<summary><para>Tax</para>
	///<para>Value = 690970002</para></summary>
	[Description("Tax")]
	Tax = 690970002, 
	///<summary><para>Time</para>
	///<para>Value = 192350000</para></summary>
	[Description("Time")]
	Time = 192350000, 
	///<summary><para>Expense</para>
	///<para>Value = 192350001</para></summary>
	[Description("Expense")]
	Expense = 192350001, 
	///<summary><para>Material</para>
	///<para>Value = 192350002</para></summary>
	[Description("Material")]
	Material = 192350002, 
	///<summary><para>Milestone</para>
	///<para>Value = 192350003</para></summary>
	[Description("Milestone")]
	Milestone = 192350003, 
	///<summary><para>Fee</para>
	///<para>Value = 192350004</para></summary>
	[Description("Fee")]
	Fee = 192350004
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>msdyn_estimatename</para>
	/// <para>msdyn_estimatename</para></summary>
	public const string Msdyn_EstimateName = "msdyn_estimatename";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>msdyn_accountcustomeryominame</para>
	/// <para>msdyn_accountcustomeryominame</para></summary>
	public const string Msdyn_AccountCustomerYomiName = "msdyn_accountcustomeryominame";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>msdyn_estimatelineidname</para>
	/// <para>msdyn_estimatelineidname</para></summary>
	public const string Msdyn_estimatelineidName = "msdyn_estimatelineidname";
	/// <summary><para>msdyn_resourcecategoryname</para>
	/// <para>msdyn_resourcecategoryname</para></summary>
	public const string Msdyn_ResourceCategoryName = "msdyn_resourcecategoryname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>msdyn_contactcustomeryominame</para>
	/// <para>msdyn_contactcustomeryominame</para></summary>
	public const string Msdyn_ContactCustomerYomiName = "msdyn_contactcustomeryominame";
	/// <summary><para>msdyn_taskname</para>
	/// <para>msdyn_taskname</para></summary>
	public const string Msdyn_TaskName = "msdyn_taskname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>msdyn_contactvendoryominame</para>
	/// <para>msdyn_contactvendoryominame</para></summary>
	public const string Msdyn_ContactVendorYomiName = "msdyn_contactvendoryominame";
	/// <summary><para>msdyn_projectname</para>
	/// <para>msdyn_projectname</para></summary>
	public const string Msdyn_ProjectName = "msdyn_projectname";
	/// <summary><para>msdyn_productname</para>
	/// <para>msdyn_productname</para></summary>
	public const string Msdyn_ProductName = "msdyn_productname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>msdyn_accountvendoryominame</para>
	/// <para>msdyn_accountvendoryominame</para></summary>
	public const string Msdyn_AccountVendorYomiName = "msdyn_accountvendoryominame";
	/// <summary><para>msdyn_salescontractname</para>
	/// <para>msdyn_salescontractname</para></summary>
	public const string Msdyn_SalesContractName = "msdyn_salescontractname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>msdyn_accountvendorname</para>
	/// <para>msdyn_accountvendorname</para></summary>
	public const string Msdyn_AccountVendorName = "msdyn_accountvendorname";
	/// <summary><para>msdyn_accountcustomername</para>
	/// <para>msdyn_accountcustomername</para></summary>
	public const string Msdyn_AccountCustomerName = "msdyn_accountcustomername";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>msdyn_bookableresourcename</para>
	/// <para>msdyn_bookableresourcename</para></summary>
	public const string Msdyn_bookableresourceName = "msdyn_bookableresourcename";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>msdyn_contactcustomername</para>
	/// <para>msdyn_contactcustomername</para></summary>
	public const string Msdyn_ContactCustomerName = "msdyn_contactcustomername";
	/// <summary><para>msdyn_transactioncategoryname</para>
	/// <para>msdyn_transactioncategoryname</para></summary>
	public const string Msdyn_TransactionCategoryName = "msdyn_transactioncategoryname";
	/// <summary><para>msdyn_contactvendorname</para>
	/// <para>msdyn_contactvendorname</para></summary>
	public const string Msdyn_ContactVendorName = "msdyn_contactvendorname";
	/// <summary><para>Actual Chargeable Billed Sales Amount</para>
	/// <para>msdyn_actchargeablebilledsalesamount</para></summary>
	public const string ActualChargeableBilledSalesAmount = "msdyn_actchargeablebilledsalesamount";
	/// <summary><para>Actual Chargeable Billed Sales Amount (Base)</para>
	/// <para>msdyn_actchargeablebilledsalesamount_base</para></summary>
	public const string ActualChargeableBilledSalesAmount_Base = "msdyn_actchargeablebilledsalesamount_base";
	/// <summary><para>Actual Chargeable Billed Sales Quantity</para>
	/// <para>msdyn_actchargeablebilledsalesquantity</para></summary>
	public const string ActualChargeableBilledSalesQuantity = "msdyn_actchargeablebilledsalesquantity";
	/// <summary><para>Actual Chargeable Cost Amount</para>
	/// <para>msdyn_actchargeablecostamount</para></summary>
	public const string ActualChargeableCostAmount = "msdyn_actchargeablecostamount";
	/// <summary><para>Actual Chargeable Cost Amount (Base)</para>
	/// <para>msdyn_actchargeablecostamount_base</para></summary>
	public const string ActualChargeableCostAmount_Base = "msdyn_actchargeablecostamount_base";
	/// <summary><para>Actual Chargeable Cost Quantity</para>
	/// <para>msdyn_actchargeablecostquantity</para></summary>
	public const string ActualChargeableCostQuantity = "msdyn_actchargeablecostquantity";
	/// <summary><para>Actual Chargeable Unbilled Sales Amount</para>
	/// <para>msdyn_actchargeableunbilledsalesamount</para></summary>
	public const string ActualChargeableUnbilledSalesAmount = "msdyn_actchargeableunbilledsalesamount";
	/// <summary><para>Actual Chargeable Unbilled Sales Amount (Base)</para>
	/// <para>msdyn_actchargeableunbilledsalesamount_base</para></summary>
	public const string ActualChargeableUnbilledSalesAmount_Base = "msdyn_actchargeableunbilledsalesamount_base";
	/// <summary><para>Actual Chargeable Unbilled Sales Quantity</para>
	/// <para>msdyn_actchargeableunbilledsalesquantity</para></summary>
	public const string ActualChargeableUnbilledSalesQuantity = "msdyn_actchargeableunbilledsalesquantity";
	/// <summary><para>Actual No Charge Billed Sales Amount</para>
	/// <para>msdyn_actnochargebilledsalesamount</para></summary>
	public const string ActualNoChargeBilledSalesAmount = "msdyn_actnochargebilledsalesamount";
	/// <summary><para>Actual No Charge Billed Sales Amount (Base)</para>
	/// <para>msdyn_actnochargebilledsalesamount_base</para></summary>
	public const string ActualNoChargeBilledSalesAmount_Base = "msdyn_actnochargebilledsalesamount_base";
	/// <summary><para>Actual No Charge Billed Sales Quantity</para>
	/// <para>msdyn_actnochargebilledsalesquantity</para></summary>
	public const string ActualNoChargeBilledSalesQuantity = "msdyn_actnochargebilledsalesquantity";
	/// <summary><para>Actual No Charge Cost Amount</para>
	/// <para>msdyn_actnochargecostamount</para></summary>
	public const string ActualNoChargeCostAmount = "msdyn_actnochargecostamount";
	/// <summary><para>Actual No Charge Cost Amount (Base)</para>
	/// <para>msdyn_actnochargecostamount_base</para></summary>
	public const string ActualNoChargeCostAmount_Base = "msdyn_actnochargecostamount_base";
	/// <summary><para>Actual No Charge Cost Quantity</para>
	/// <para>msdyn_actnochargecostquantity</para></summary>
	public const string ActualNoChargeCostQuantity = "msdyn_actnochargecostquantity";
	/// <summary><para>Actual No Charge Unbilled Sales Amount</para>
	/// <para>msdyn_actnochargeunbilledsalesamount</para></summary>
	public const string ActualNoChargeUnbilledSalesAmount = "msdyn_actnochargeunbilledsalesamount";
	/// <summary><para>Actual No Charge Unbilled Sales Amount (Base)</para>
	/// <para>msdyn_actnochargeunbilledsalesamount_base</para></summary>
	public const string ActualNoChargeUnbilledSalesAmount_Base = "msdyn_actnochargeunbilledsalesamount_base";
	/// <summary><para>Actual No Charge Unbilled Sales Quantity</para>
	/// <para>msdyn_actnochargeunbilledsalesquantity</para></summary>
	public const string ActualNoChargeUnbilledSalesQuantity = "msdyn_actnochargeunbilledsalesquantity";
	/// <summary><para>Actual Non Chargeable Cost Amount</para>
	/// <para>msdyn_actnonchargeablecostamount</para></summary>
	public const string ActualNonChargeableCostAmount = "msdyn_actnonchargeablecostamount";
	/// <summary><para>Actual Non Chargeable Cost Amount (Base)</para>
	/// <para>msdyn_actnonchargeablecostamount_base</para></summary>
	public const string ActualNonChargeableCostAmount_Base = "msdyn_actnonchargeablecostamount_base";
	/// <summary><para>Actual Non Chargeable Cost Quantity</para>
	/// <para>msdyn_actnonchargeablecostquantity</para></summary>
	public const string ActualNonChargeableCostQuantity = "msdyn_actnonchargeablecostquantity";
	/// <summary><para>Actual Non Chargeable Unbilled Sales Amount</para>
	/// <para>msdyn_actnonchargeableunbilledsalesamount</para></summary>
	public const string ActualNonChargeableUnbilledSalesAmount = "msdyn_actnonchargeableunbilledsalesamount";
	/// <summary><para>Actual Non Chargeable Unbilled Sales Amount (Base)</para>
	/// <para>msdyn_actnonchargeableunbilledsalesamount_base</para></summary>
	public const string ActualNonChargeableUnbilledSalesAmount_Base = "msdyn_actnonchargeableunbilledsalesamount_base";
	/// <summary><para>Actual Non Chargeable Unbilled Sales Quantity</para>
	/// <para>msdyn_actnonchargeableunbilledsalesquantity</para></summary>
	public const string ActualNonChargeableUnbilledSalesQuantity = "msdyn_actnonchargeableunbilledsalesquantity";
	/// <summary><para>Bookable Resource</para>
	/// <para>msdyn_bookableresource</para></summary>
	public const string BookableResource = "msdyn_bookableresource";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Customer</para>
	/// <para>msdyn_contactcustomer</para></summary>
	public const string Customer = "msdyn_contactcustomer";
	/// <summary><para>Customer</para>
	/// <para>msdyn_accountcustomer</para></summary>
	public const string Customer2 = "msdyn_accountcustomer";
	/// <summary><para>Customer Type</para>
	/// <para>msdyn_customertype</para></summary>
	public const string CustomerType = "msdyn_customertype";
	/// <summary><para>Document Date</para>
	/// <para>msdyn_documentdate</para></summary>
	public const string DocumentDate = "msdyn_documentdate";
	/// <summary><para>Earned Revenue</para>
	/// <para>msdyn_earnedrevenue</para></summary>
	public const string EarnedRevenue = "msdyn_earnedrevenue";
	/// <summary><para>Earned Revenue (Base)</para>
	/// <para>msdyn_earnedrevenue_base</para></summary>
	public const string EarnedRevenue_Base = "msdyn_earnedrevenue_base";
	/// <summary><para>End Date</para>
	/// <para>msdyn_enddate</para></summary>
	public const string EndDate = "msdyn_enddate";
	/// <summary><para>Estimate</para>
	/// <para>msdyn_estimate</para></summary>
	public const string Estimate = "msdyn_estimate";
	/// <summary><para>Estimate Line</para>
	/// <para>msdyn_estimatelineid</para></summary>
	public const string EstimateLine = "msdyn_estimatelineid";
	/// <summary><para>Estimated Chargeable Billed Sales Amount</para>
	/// <para>msdyn_estchargeablebilledsalesamount</para></summary>
	public const string EstimatedChargeableBilledSalesAmount = "msdyn_estchargeablebilledsalesamount";
	/// <summary><para>Estimated Chargeable Billed Sales Amount (Base)</para>
	/// <para>msdyn_estchargeablebilledsalesamount_base</para></summary>
	public const string EstimatedChargeableBilledSalesAmount_Base = "msdyn_estchargeablebilledsalesamount_base";
	/// <summary><para>Estimated Chargeable Billed Sales Quantity</para>
	/// <para>msdyn_estchargeablebilledsalesquantity</para></summary>
	public const string EstimatedChargeableBilledSalesQuantity = "msdyn_estchargeablebilledsalesquantity";
	/// <summary><para>Estimated Chargeable Cost Amount</para>
	/// <para>msdyn_estchargeablecostamount</para></summary>
	public const string EstimatedChargeableCostAmount = "msdyn_estchargeablecostamount";
	/// <summary><para>Estimated Chargeable Cost Amount (Base)</para>
	/// <para>msdyn_estchargeablecostamount_base</para></summary>
	public const string EstimatedChargeableCostAmount_Base = "msdyn_estchargeablecostamount_base";
	/// <summary><para>Estimated Chargeable Cost Quantity</para>
	/// <para>msdyn_estchargeablecostquantity</para></summary>
	public const string EstimatedChargeableCostQuantity = "msdyn_estchargeablecostquantity";
	/// <summary><para>Estimated Chargeable Unbilled Sales Amount</para>
	/// <para>msdyn_estchargeableunbilledsalesamount</para></summary>
	public const string EstimatedChargeableUnbilledSalesAmount = "msdyn_estchargeableunbilledsalesamount";
	/// <summary><para>Estimated Chargeable Unbilled Sales Amount (Base)</para>
	/// <para>msdyn_estchargeableunbilledsalesamount_base</para></summary>
	public const string EstimatedChargeableUnbilledSalesAmount_Base = "msdyn_estchargeableunbilledsalesamount_base";
	/// <summary><para>Estimated Chargeable Unbilled Sales Quantity</para>
	/// <para>msdyn_estchargeableunbilledsalesquantity</para></summary>
	public const string EstimatedChargeableUnbilledSalesQuantity = "msdyn_estchargeableunbilledsalesquantity";
	/// <summary><para>Estimated No Charge Billed Sales Amount</para>
	/// <para>msdyn_estnochargebilledsalesamount</para></summary>
	public const string EstimatedNoChargeBilledSalesAmount = "msdyn_estnochargebilledsalesamount";
	/// <summary><para>Estimated No Charge Billed Sales Amount (Base)</para>
	/// <para>msdyn_estnochargebilledsalesamount_base</para></summary>
	public const string EstimatedNoChargeBilledSalesAmount_Base = "msdyn_estnochargebilledsalesamount_base";
	/// <summary><para>Estimated No Charge Billed Sales Quantity</para>
	/// <para>msdyn_estnochargebilledsalesquantity</para></summary>
	public const string EstimatedNoChargeBilledSalesQuantity = "msdyn_estnochargebilledsalesquantity";
	/// <summary><para>Estimated No Charge Cost Amount</para>
	/// <para>msdyn_estnochargecostamount</para></summary>
	public const string EstimatedNoChargeCostAmount = "msdyn_estnochargecostamount";
	/// <summary><para>Estimated No Charge Cost Amount (Base)</para>
	/// <para>msdyn_estnochargecostamount_base</para></summary>
	public const string EstimatedNoChargeCostAmount_Base = "msdyn_estnochargecostamount_base";
	/// <summary><para>Estimated No Charge Cost Quantity</para>
	/// <para>msdyn_estnochargecostquantity</para></summary>
	public const string EstimatedNoChargeCostQuantity = "msdyn_estnochargecostquantity";
	/// <summary><para>Estimated No Charge Unbilled Sales Amount</para>
	/// <para>msdyn_estnochargeunbilledsalesamount</para></summary>
	public const string EstimatedNoChargeUnbilledSalesAmount = "msdyn_estnochargeunbilledsalesamount";
	/// <summary><para>Estimated No Charge Unbilled Sales Amount (Base)</para>
	/// <para>msdyn_estnochargeunbilledsalesamount_base</para></summary>
	public const string EstimatedNoChargeUnbilledSalesAmount_Base = "msdyn_estnochargeunbilledsalesamount_base";
	/// <summary><para>Estimated No Charge Unbilled Sales Quantity</para>
	/// <para>msdyn_estnochargeunbilledsalesquantity</para></summary>
	public const string EstimatedNoChargeUnbilledSalesQuantity = "msdyn_estnochargeunbilledsalesquantity";
	/// <summary><para>Estimated Non Chargeable Cost Amount</para>
	/// <para>msdyn_estnonchargeablecostamount</para></summary>
	public const string EstimatedNonChargeableCostAmount = "msdyn_estnonchargeablecostamount";
	/// <summary><para>Estimated Non Chargeable Cost Amount (Base)</para>
	/// <para>msdyn_estnonchargeablecostamount_base</para></summary>
	public const string EstimatedNonChargeableCostAmount_Base = "msdyn_estnonchargeablecostamount_base";
	/// <summary><para>Estimated Non Chargeable Cost Quantity</para>
	/// <para>msdyn_estnonchargeablecostquantity</para></summary>
	public const string EstimatedNonChargeableCostQuantity = "msdyn_estnonchargeablecostquantity";
	/// <summary><para>Estimated Non Chargeable Unbilled Sales Amount</para>
	/// <para>msdyn_estnonchargeableunbilledsalesamount</para></summary>
	public const string EstimatedNonChargeableUnbilledSalesAmount = "msdyn_estnonchargeableunbilledsalesamount";
	/// <summary><para>Estimated Non Chargeable Unbilled Sales Amount (Base)</para>
	/// <para>msdyn_estnonchargeableunbilledsalesamount_base</para></summary>
	public const string EstimatedNonChargeableUnbilledSalesAmount_Base = "msdyn_estnonchargeableunbilledsalesamount_base";
	/// <summary><para>Estimated Non Chargeable Unbilled Sales Quantity</para>
	/// <para>msdyn_estnonchargeableunbilledsalesquantity</para></summary>
	public const string EstimatedNonChargeableUnbilledSalesQuantity = "msdyn_estnonchargeableunbilledsalesquantity";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Fact</para>
	/// <para>msdyn_factid</para></summary>
	public const string FactId = "msdyn_factid";
	/// <summary><para>Fact Type</para>
	/// <para>msdyn_facttype</para></summary>
	public const string FactType = "msdyn_facttype";
	/// <summary><para>Gross Margin</para>
	/// <para>msdyn_grossmargin</para></summary>
	public const string GrossMargin = "msdyn_grossmargin";
	/// <summary><para>Gross Margin (Base)</para>
	/// <para>msdyn_grossmargin_base</para></summary>
	public const string GrossMargin_Base = "msdyn_grossmargin_base";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>msdyn_name</para></summary>
	public const string Name = "msdyn_name";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Product</para>
	/// <para>msdyn_product</para></summary>
	public const string Product = "msdyn_product";
	/// <summary><para>Project</para>
	/// <para>msdyn_project</para></summary>
	public const string Project = "msdyn_project";
	/// <summary><para>Project Contract</para>
	/// <para>msdyn_salescontract</para></summary>
	public const string ProjectContract = "msdyn_salescontract";
	/// <summary><para>Project Contract Line</para>
	/// <para>msdyn_salescontractline</para></summary>
	public const string ProjectContractLine = "msdyn_salescontractline";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Role</para>
	/// <para>msdyn_resourcecategory</para></summary>
	public const string Role = "msdyn_resourcecategory";
	/// <summary><para>Start Date</para>
	/// <para>msdyn_startdate</para></summary>
	public const string StartDate = "msdyn_startdate";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Task</para>
	/// <para>msdyn_task</para></summary>
	public const string Task = "msdyn_task";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Total Cost</para>
	/// <para>msdyn_totalcost</para></summary>
	public const string TotalCost = "msdyn_totalcost";
	/// <summary><para>Total Cost (Base)</para>
	/// <para>msdyn_totalcost_base</para></summary>
	public const string TotalCost_Base = "msdyn_totalcost_base";
	/// <summary><para>Total Hours</para>
	/// <para>msdyn_totalhours</para></summary>
	public const string TotalHours = "msdyn_totalhours";
	/// <summary><para>Transaction Category</para>
	/// <para>msdyn_transactioncategory</para></summary>
	public const string TransactionCategory = "msdyn_transactioncategory";
	/// <summary><para>Transaction Classification</para>
	/// <para>msdyn_transactionclassification</para></summary>
	public const string TransactionClassification = "msdyn_transactionclassification";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Vendor</para>
	/// <para>msdyn_accountvendor</para></summary>
	public const string Vendor = "msdyn_accountvendor";
	/// <summary><para>Vendor</para>
	/// <para>msdyn_contactvendor</para></summary>
	public const string Vendor2 = "msdyn_contactvendor";
	/// <summary><para>Vendor Type</para>
	/// <para>msdyn_vendortype</para></summary>
	public const string VendorType = "msdyn_vendortype";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
