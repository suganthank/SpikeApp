// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("transformationparametermapping")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class TransformationParameterMapping : BaseProxyClass
    {
        public new const string LogicalName = "transformationparametermapping";
        public const int ObjectTypeCode = 4427;
        public const string PrimaryIdAttribute = "transformationparametermappingid";
        public const string PrimaryNameAttribute = "data";
        
        static TransformationParameterMapping()
        {
            BaseProxyClass.RegisterProxyType(typeof(TransformationParameterMapping), "transformationparametermapping");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public TransformationParameterMapping() : base(new Entity("transformationparametermapping")) { }
        public TransformationParameterMapping(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<TransformationParameterMapping>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: transformationmappingidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transformationmappingidname")]
public string TransformationMappingIdName
{
	get { return this.GetPropertyValue<string>("transformationmappingidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: transformationparametermappingid</para>
///</summary>
[AttributeLogicalNameAttribute("transformationparametermappingid")]
public Guid TransformationParameterMappingId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: data</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("data")]
public string Data
{
	get { return this.GetPropertyValue<string>("data"); }
	set { this.SetPropertyValue("data", value, 500, "Data"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: parameterarrayindex</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("parameterarrayindex")]
public int? ParameterArrayIndex
{
	get { return this.GetPropertyValue<int?>("parameterarrayindex"); }
	set { this.SetPropertyValue("parameterarrayindex", (int?)value, (int)0, (int)2147483647, "ParameterArrayIndex"); }
}
/// <summary>
///Logical Name: datatypecode
/// </summary>
[AttributeLogicalNameAttribute("datatypecode")]
public eParameterDataType? ParameterDataType
{
	get
	{
		if (ParameterDataType_OptionSetValue != null) { return (eParameterDataType)ParameterDataType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ParameterDataType_OptionSetValue = new OptionSetValue((int)value); }
		else this.ParameterDataType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: datatypecode</para>
///</summary>
[AttributeLogicalNameAttribute("datatypecode")]
public OptionSetValue ParameterDataType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("datatypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("datatypecode", value, "ParameterDataType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ParameterDataType_Text(IOrganizationService Service)
{
	return this.ParameterDataType_OptionSetValue.GetOptionSetText(Service, this, "datatypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ParameterDataType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ParameterDataType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: parametersequence</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("parametersequence")]
public int? ParameterSequence
{
	get { return this.GetPropertyValue<int?>("parametersequence"); }
	set { this.SetPropertyValue("parametersequence", (int?)value, (int)1, (int)2147483647, "ParameterSequence"); }
}
/// <summary>
///Logical Name: parametertypecode
/// </summary>
[AttributeLogicalNameAttribute("parametertypecode")]
public eParameterType? ParameterType
{
	get
	{
		if (ParameterType_OptionSetValue != null) { return (eParameterType)ParameterType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ParameterType_OptionSetValue = new OptionSetValue((int)value); }
		else this.ParameterType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: parametertypecode</para>
///</summary>
[AttributeLogicalNameAttribute("parametertypecode")]
public OptionSetValue ParameterType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("parametertypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("parametertypecode", value, "ParameterType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ParameterType_Text(IOrganizationService Service)
{
	return this.ParameterType_OptionSetValue.GetOptionSetText(Service, this, "parametertypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ParameterType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ParameterType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: transformationmappingid</para>
///</summary>
[AttributeLogicalNameAttribute("transformationmappingid")]
public EntityReference TransformationMappingId
{
	get { return this.GetPropertyValue<EntityReference>("transformationmappingid"); }
	set { this.SetPropertyValue<EntityReference>("transformationmappingid", value, "TransformationMappingId"); }
}


        /// <summary>
/// <para><b>LookupMapping (Transformation Parameter Mapping Id)</b></para>
/// <para>Schema Name: LookUpMapping_TransformationParameterMapping</para>
/// </summary>
public List<LookupMapping> GetLookupMappings_TransformationParameterMappingId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<LookupMapping>(Service, this.Id, "lookupmapping", "transformationparametermappingid", Columns); }
/// <summary>
/// <para><b>LookupMapping (Transformation Parameter Mapping Id)</b></para>
/// <para>Schema Name: LookUpMapping_TransformationParameterMapping</para>
/// </summary>
public List<LookupMapping> GetLookupMappings_TransformationParameterMappingId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<LookupMapping>(Service, this.Id, "lookupmapping", "transformationparametermappingid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_transformationparametermapping</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_transformationparametermapping</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eParameterDataType
{
	///<summary><para>Reference</para>
	///<para>Value = 0</para></summary>
	[Description("Reference")]
	Reference = 0, 
	///<summary><para>Value</para>
	///<para>Value = 1</para></summary>
	[Description("Value")]
	@Value = 1
}
public enum eParameterType
{
	///<summary><para>Input</para>
	///<para>Value = 0</para></summary>
	[Description("Input")]
	Input = 0, 
	///<summary><para>Output</para>
	///<para>Value = 1</para></summary>
	[Description("Output")]
	Output = 1
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>transformationmappingidname</para>
	/// <para>transformationmappingidname</para></summary>
	public const string TransformationMappingIdName = "transformationmappingidname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>transformationparametermappingid</para>
	/// <para>transformationparametermappingid</para></summary>
	public const string TransformationParameterMappingId = "transformationparametermappingid";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Data</para>
	/// <para>data</para></summary>
	public const string Data = "data";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Parameter Array Index</para>
	/// <para>parameterarrayindex</para></summary>
	public const string ParameterArrayIndex = "parameterarrayindex";
	/// <summary><para>Parameter Data Type</para>
	/// <para>datatypecode</para></summary>
	public const string ParameterDataType = "datatypecode";
	/// <summary><para>Parameter Sequence</para>
	/// <para>parametersequence</para></summary>
	public const string ParameterSequence = "parametersequence";
	/// <summary><para>Parameter Type</para>
	/// <para>parametertypecode</para></summary>
	public const string ParameterType = "parametertypecode";
	/// <summary><para>Transformation Mapping Id</para>
	/// <para>transformationmappingid</para></summary>
	public const string TransformationMappingId = "transformationmappingid";
}

    }
}
