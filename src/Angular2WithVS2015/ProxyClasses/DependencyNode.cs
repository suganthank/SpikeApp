// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("dependencynode")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class DependencyNode : BaseProxyClass
    {
        public new const string LogicalName = "dependencynode";
        public const int ObjectTypeCode = 7106;
        public const string PrimaryIdAttribute = "dependencynodeid";
        public const string PrimaryNameAttribute = "";
        
        static DependencyNode()
        {
            BaseProxyClass.RegisterProxyType(typeof(DependencyNode), "dependencynode");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public DependencyNode() : base(new Entity("dependencynode")) { }
        public DependencyNode(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<DependencyNode>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: basesolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("basesolutionid")]
public EntityReference BaseSolution
{
	get { return this.GetPropertyValue<EntityReference>("basesolutionid"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: dependencynodeid</para>
///</summary>
[AttributeLogicalNameAttribute("dependencynodeid")]
public Guid DependencyNodeIdentifierId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: introducedversion</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("introducedversion")]
public double? IntroducedVersion
{
	get { return this.GetPropertyValue<double?>("introducedversion"); }
	set { this.SetPropertyValue("introducedversion", (double?)value, (double)0, (double)100, "IntroducedVersion"); }
}
///<summary>
///<para>Logical Name: parentid</para>
///</summary>
[AttributeLogicalNameAttribute("parentid")]
public Guid ParentEntity
{
	get { return this.GetPropertyValue<Guid>("parentid"); }
}
///<summary>
///<para>Logical Name: objectid</para>
///</summary>
[AttributeLogicalNameAttribute("objectid")]
public Guid Regarding
{
	get { return this.GetPropertyValue<Guid>("objectid"); }
	set { this.SetPropertyValue<Guid>("objectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: issharedcomponent</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("issharedcomponent")]
public bool? SharedComponent
{
	get { return this.GetPropertyValue<bool?>("issharedcomponent"); }
}
///<summary>
///<para>Logical Name: topsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("topsolutionid")]
public EntityReference TopSolution
{
	get { return this.GetPropertyValue<EntityReference>("topsolutionid"); }
}
/// <summary>
///Logical Name: componenttype
/// </summary>
[AttributeLogicalNameAttribute("componenttype")]
public eComponentType? TypeCode
{
	get
	{
		if (TypeCode_OptionSetValue != null) { return (eComponentType)TypeCode_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componenttype</para>
///</summary>
[AttributeLogicalNameAttribute("componenttype")]
public OptionSetValue TypeCode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componenttype"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string TypeCode_Text(IOrganizationService Service)
{
	return this.TypeCode_OptionSetValue.GetOptionSetText(Service, this, "componenttype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string TypeCode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.TypeCode_OptionSetValue.Value);
}


        /// <summary>
/// <para><b>Dependency (Required Component)</b></para>
/// <para>Schema Name: dependencynode_ancestor_dependency</para>
/// </summary>
public List<Dependency> GetDependency_RequiredComponent (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Dependency>(Service, this.Id, "dependency", "requiredcomponentnodeid", Columns); }
/// <summary>
/// <para><b>Dependency (Required Component)</b></para>
/// <para>Schema Name: dependencynode_ancestor_dependency</para>
/// </summary>
public List<Dependency> GetDependency_RequiredComponent (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Dependency>(Service, this.Id, "dependency", "requiredcomponentnodeid", Columns); }
/// <summary>
/// <para><b>Dependency (Dependent Component)</b></para>
/// <para>Schema Name: dependencynode_descendent_dependency</para>
/// </summary>
public List<Dependency> GetDependency_DependentComponent (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Dependency>(Service, this.Id, "dependency", "dependentcomponentnodeid", Columns); }
/// <summary>
/// <para><b>Dependency (Dependent Component)</b></para>
/// <para>Schema Name: dependencynode_descendent_dependency</para>
/// </summary>
public List<Dependency> GetDependency_DependentComponent (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Dependency>(Service, this.Id, "dependency", "dependentcomponentnodeid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_dependencynode</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_dependencynode</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eComponentType
{
	///<summary><para>Entity</para>
	///<para>Value = 1</para></summary>
	[Description("Entity")]
	Entity = 1, 
	///<summary><para>Attribute</para>
	///<para>Value = 2</para></summary>
	[Description("Attribute")]
	Attribute = 2, 
	///<summary><para>Relationship</para>
	///<para>Value = 3</para></summary>
	[Description("Relationship")]
	Relationship = 3, 
	///<summary><para>Attribute Picklist Value</para>
	///<para>Value = 4</para></summary>
	[Description("Attribute Picklist Value")]
	AttributePicklistValue = 4, 
	///<summary><para>Attribute Lookup Value</para>
	///<para>Value = 5</para></summary>
	[Description("Attribute Lookup Value")]
	AttributeLookupValue = 5, 
	///<summary><para>View Attribute</para>
	///<para>Value = 6</para></summary>
	[Description("View Attribute")]
	ViewAttribute = 6, 
	///<summary><para>Localized Label</para>
	///<para>Value = 7</para></summary>
	[Description("Localized Label")]
	LocalizedLabel = 7, 
	///<summary><para>Relationship Extra Condition</para>
	///<para>Value = 8</para></summary>
	[Description("Relationship Extra Condition")]
	RelationshipExtraCondition = 8, 
	///<summary><para>Option Set</para>
	///<para>Value = 9</para></summary>
	[Description("Option Set")]
	OptionSet = 9, 
	///<summary><para>Entity Relationship</para>
	///<para>Value = 10</para></summary>
	[Description("Entity Relationship")]
	EntityRelationship = 10, 
	///<summary><para>Entity Relationship Role</para>
	///<para>Value = 11</para></summary>
	[Description("Entity Relationship Role")]
	EntityRelationshipRole = 11, 
	///<summary><para>Entity Relationship Relationships</para>
	///<para>Value = 12</para></summary>
	[Description("Entity Relationship Relationships")]
	EntityRelationshipRelationships = 12, 
	///<summary><para>Managed Property</para>
	///<para>Value = 13</para></summary>
	[Description("Managed Property")]
	ManagedProperty = 13, 
	///<summary><para>Entity Key</para>
	///<para>Value = 14</para></summary>
	[Description("Entity Key")]
	EntityKey = 14, 
	///<summary><para>Role</para>
	///<para>Value = 20</para></summary>
	[Description("Role")]
	Role = 20, 
	///<summary><para>Role Privilege</para>
	///<para>Value = 21</para></summary>
	[Description("Role Privilege")]
	RolePrivilege = 21, 
	///<summary><para>Display String</para>
	///<para>Value = 22</para></summary>
	[Description("Display String")]
	DisplayString = 22, 
	///<summary><para>Display String Map</para>
	///<para>Value = 23</para></summary>
	[Description("Display String Map")]
	DisplayStringMap = 23, 
	///<summary><para>Form</para>
	///<para>Value = 24</para></summary>
	[Description("Form")]
	Form = 24, 
	///<summary><para>Organization</para>
	///<para>Value = 25</para></summary>
	[Description("Organization")]
	Organization = 25, 
	///<summary><para>Saved Query</para>
	///<para>Value = 26</para></summary>
	[Description("Saved Query")]
	SavedQuery = 26, 
	///<summary><para>Workflow</para>
	///<para>Value = 29</para></summary>
	[Description("Workflow")]
	Workflow = 29, 
	///<summary><para>Report</para>
	///<para>Value = 31</para></summary>
	[Description("Report")]
	Report = 31, 
	///<summary><para>Report Entity</para>
	///<para>Value = 32</para></summary>
	[Description("Report Entity")]
	ReportEntity = 32, 
	///<summary><para>Report Category</para>
	///<para>Value = 33</para></summary>
	[Description("Report Category")]
	ReportCategory = 33, 
	///<summary><para>Report Visibility</para>
	///<para>Value = 34</para></summary>
	[Description("Report Visibility")]
	ReportVisibility = 34, 
	///<summary><para>Attachment</para>
	///<para>Value = 35</para></summary>
	[Description("Attachment")]
	Attachment = 35, 
	///<summary><para>Email Template</para>
	///<para>Value = 36</para></summary>
	[Description("Email Template")]
	EmailTemplate = 36, 
	///<summary><para>Contract Template</para>
	///<para>Value = 37</para></summary>
	[Description("Contract Template")]
	ContractTemplate = 37, 
	///<summary><para>KB Article Template</para>
	///<para>Value = 38</para></summary>
	[Description("KB Article Template")]
	KBArticleTemplate = 38, 
	///<summary><para>Mail Merge Template</para>
	///<para>Value = 39</para></summary>
	[Description("Mail Merge Template")]
	MailMergeTemplate = 39, 
	///<summary><para>Duplicate Rule</para>
	///<para>Value = 44</para></summary>
	[Description("Duplicate Rule")]
	DuplicateRule = 44, 
	///<summary><para>Duplicate Rule Condition</para>
	///<para>Value = 45</para></summary>
	[Description("Duplicate Rule Condition")]
	DuplicateRuleCondition = 45, 
	///<summary><para>Entity Map</para>
	///<para>Value = 46</para></summary>
	[Description("Entity Map")]
	EntityMap = 46, 
	///<summary><para>Attribute Map</para>
	///<para>Value = 47</para></summary>
	[Description("Attribute Map")]
	AttributeMap = 47, 
	///<summary><para>Ribbon Command</para>
	///<para>Value = 48</para></summary>
	[Description("Ribbon Command")]
	RibbonCommand = 48, 
	///<summary><para>Ribbon Context Group</para>
	///<para>Value = 49</para></summary>
	[Description("Ribbon Context Group")]
	RibbonContextGroup = 49, 
	///<summary><para>Ribbon Customization</para>
	///<para>Value = 50</para></summary>
	[Description("Ribbon Customization")]
	RibbonCustomization = 50, 
	///<summary><para>Ribbon Rule</para>
	///<para>Value = 52</para></summary>
	[Description("Ribbon Rule")]
	RibbonRule = 52, 
	///<summary><para>Ribbon Tab To Command Map</para>
	///<para>Value = 53</para></summary>
	[Description("Ribbon Tab To Command Map")]
	RibbonTabToCommandMap = 53, 
	///<summary><para>Ribbon Diff</para>
	///<para>Value = 55</para></summary>
	[Description("Ribbon Diff")]
	RibbonDiff = 55, 
	///<summary><para>Saved Query Visualization</para>
	///<para>Value = 59</para></summary>
	[Description("Saved Query Visualization")]
	SavedQueryVisualization = 59, 
	///<summary><para>System Form</para>
	///<para>Value = 60</para></summary>
	[Description("System Form")]
	SystemForm = 60, 
	///<summary><para>Web Resource</para>
	///<para>Value = 61</para></summary>
	[Description("Web Resource")]
	WebResource = 61, 
	///<summary><para>Site Map</para>
	///<para>Value = 62</para></summary>
	[Description("Site Map")]
	SiteMap = 62, 
	///<summary><para>Connection Role</para>
	///<para>Value = 63</para></summary>
	[Description("Connection Role")]
	ConnectionRole = 63, 
	///<summary><para>Field Security Profile</para>
	///<para>Value = 70</para></summary>
	[Description("Field Security Profile")]
	FieldSecurityProfile = 70, 
	///<summary><para>Field Permission</para>
	///<para>Value = 71</para></summary>
	[Description("Field Permission")]
	FieldPermission = 71, 
	///<summary><para>Plugin Type</para>
	///<para>Value = 90</para></summary>
	[Description("Plugin Type")]
	PluginType = 90, 
	///<summary><para>Plugin Assembly</para>
	///<para>Value = 91</para></summary>
	[Description("Plugin Assembly")]
	PluginAssembly = 91, 
	///<summary><para>SDK Message Processing Step</para>
	///<para>Value = 92</para></summary>
	[Description("SDK Message Processing Step")]
	SDKMessageProcessingStep = 92, 
	///<summary><para>SDK Message Processing Step Image</para>
	///<para>Value = 93</para></summary>
	[Description("SDK Message Processing Step Image")]
	SDKMessageProcessingStepImage = 93, 
	///<summary><para>Service Endpoint</para>
	///<para>Value = 95</para></summary>
	[Description("Service Endpoint")]
	ServiceEndpoint = 95, 
	///<summary><para>Routing Rule</para>
	///<para>Value = 150</para></summary>
	[Description("Routing Rule")]
	RoutingRule = 150, 
	///<summary><para>Routing Rule Item</para>
	///<para>Value = 151</para></summary>
	[Description("Routing Rule Item")]
	RoutingRuleItem = 151, 
	///<summary><para>SLA</para>
	///<para>Value = 152</para></summary>
	[Description("SLA")]
	SLA = 152, 
	///<summary><para>SLA Item</para>
	///<para>Value = 153</para></summary>
	[Description("SLA Item")]
	SLAItem = 153, 
	///<summary><para>Convert Rule</para>
	///<para>Value = 154</para></summary>
	[Description("Convert Rule")]
	ConvertRule = 154, 
	///<summary><para>Convert Rule Item</para>
	///<para>Value = 155</para></summary>
	[Description("Convert Rule Item")]
	ConvertRuleItem = 155, 
	///<summary><para>Hierarchy Rule</para>
	///<para>Value = 65</para></summary>
	[Description("Hierarchy Rule")]
	HierarchyRule = 65, 
	///<summary><para>Mobile Offline Profile</para>
	///<para>Value = 161</para></summary>
	[Description("Mobile Offline Profile")]
	MobileOfflineProfile = 161, 
	///<summary><para>Mobile Offline Profile Item</para>
	///<para>Value = 162</para></summary>
	[Description("Mobile Offline Profile Item")]
	MobileOfflineProfileItem = 162, 
	///<summary><para>Similarity Rule</para>
	///<para>Value = 165</para></summary>
	[Description("Similarity Rule")]
	SimilarityRule = 165, 
	///<summary><para>Custom Control</para>
	///<para>Value = 66</para></summary>
	[Description("Custom Control")]
	CustomControl = 66, 
	///<summary><para>Custom Control Default Config</para>
	///<para>Value = 68</para></summary>
	[Description("Custom Control Default Config")]
	CustomControlDefaultConfig = 68
}


        public static class Properties
{
	/// <summary><para>Base Solution</para>
	/// <para>basesolutionid</para></summary>
	public const string BaseSolution = "basesolutionid";
	/// <summary><para>Dependency Node Identifier</para>
	/// <para>dependencynodeid</para></summary>
	public const string DependencyNodeIdentifierId = "dependencynodeid";
	/// <summary><para>Introduced Version</para>
	/// <para>introducedversion</para></summary>
	public const string IntroducedVersion = "introducedversion";
	/// <summary><para>Parent Entity</para>
	/// <para>parentid</para></summary>
	public const string ParentEntity = "parentid";
	/// <summary><para>Regarding</para>
	/// <para>objectid</para></summary>
	public const string Regarding = "objectid";
	/// <summary><para>Shared Component</para>
	/// <para>issharedcomponent</para></summary>
	public const string SharedComponent = "issharedcomponent";
	/// <summary><para>Top Solution</para>
	/// <para>topsolutionid</para></summary>
	public const string TopSolution = "topsolutionid";
	/// <summary><para>Type Code</para>
	/// <para>componenttype</para></summary>
	public const string TypeCode = "componenttype";
}

    }
}
