// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("service")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Service : BaseProxyClass
    {
        public new const string LogicalName = "service";
        public const int ObjectTypeCode = 4001;
        public const string PrimaryIdAttribute = "serviceid";
        public const string PrimaryNameAttribute = "name";
        
        static Service()
        {
            BaseProxyClass.RegisterProxyType(typeof(Service), "service");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Service() : base(new Entity("service")) { }
        public Service(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Service>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: resourcespecidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("resourcespecidname")]
public string ResourceSpecIdName
{
	get { return this.GetPropertyValue<string>("resourcespecidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: anchoroffset</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1440</para>
///</summary>
[AttributeLogicalNameAttribute("anchoroffset")]
public int? AnchorOffset
{
	get { return this.GetPropertyValue<int?>("anchoroffset"); }
	set { this.SetPropertyValue("anchoroffset", (int?)value, (int)0, (int)1440, "AnchorOffset"); }
}
///<summary>
///<para>Logical Name: calendarid</para>
///</summary>
[AttributeLogicalNameAttribute("calendarid")]
public Guid Calendar
{
	get { return this.GetPropertyValue<Guid>("calendarid"); }
	set { this.SetPropertyValue<Guid>("calendarid", value, "Calendar"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: duration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("duration")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("duration"); }
	set { this.SetPropertyValue("duration", (int?)value, (int)0, (int)2147483647, "Duration"); }
}
///<summary>
///<para>Logical Name: granularity</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("granularity")]
public string Granularity
{
	get { return this.GetPropertyValue<string>("granularity"); }
	set { this.SetPropertyValue("granularity", value, 100, "Granularity"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
/// <summary>
///Logical Name: initialstatuscode
/// </summary>
[AttributeLogicalNameAttribute("initialstatuscode")]
public eInitialStatusReason? InitialStatusReason
{
	get
	{
		if (InitialStatusReason_OptionSetValue != null) { return (eInitialStatusReason)InitialStatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.InitialStatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.InitialStatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: initialstatuscode</para>
///</summary>
[AttributeLogicalNameAttribute("initialstatuscode")]
public OptionSetValue InitialStatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("initialstatuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("initialstatuscode", value, "InitialStatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string InitialStatusReason_Text(IOrganizationService Service)
{
	return this.InitialStatusReason_OptionSetValue.GetOptionSetText(Service, this, "initialstatuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string InitialStatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.InitialStatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: isvisible</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isvisible")]
public bool? IsVisible
{
	get { return this.GetPropertyValue<bool?>("isvisible"); }
	set { this.SetPropertyValue<bool?>("isvisible", value, "IsVisible"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 160, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: resourcespecid</para>
///</summary>
[AttributeLogicalNameAttribute("resourcespecid")]
public EntityReference RequiredResources
{
	get { return this.GetPropertyValue<EntityReference>("resourcespecid"); }
	set { this.SetPropertyValue<EntityReference>("resourcespecid", value, "RequiredResources"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: serviceid</para>
///</summary>
[AttributeLogicalNameAttribute("serviceid")]
public Guid ServiceId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: showresources</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("showresources")]
public bool? ShowResources
{
	get { return this.GetPropertyValue<bool?>("showresources"); }
	set { this.SetPropertyValue<bool?>("showresources", value, "ShowResources"); }
}
///<summary>
///<para>Logical Name: isschedulable</para>
///<para>True = Active</para>
///<para>False = Inactive</para>
///</summary>
[AttributeLogicalNameAttribute("isschedulable")]
public bool? Status
{
	get { return this.GetPropertyValue<bool?>("isschedulable"); }
	set { this.SetPropertyValue<bool?>("isschedulable", value, "Status"); }
}
///<summary>
///<para>Logical Name: strategyid</para>
///</summary>
[AttributeLogicalNameAttribute("strategyid")]
public EntityReference Strategy
{
	get { return this.GetPropertyValue<EntityReference>("strategyid"); }
	set { this.SetPropertyValue<EntityReference>("strategyid", value, "Strategy"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Account (Preferred Service)</b></para>
/// <para>Schema Name: service_accounts</para>
/// </summary>
public List<Account> GetAccounts_PreferredService (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(Service, this.Id, "account", "preferredserviceid", Columns); }
/// <summary>
/// <para><b>Account (Preferred Service)</b></para>
/// <para>Schema Name: service_accounts</para>
/// </summary>
public List<Account> GetAccounts_PreferredService (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Account>(Service, this.Id, "account", "preferredserviceid", Columns); }
/// <summary>
/// <para><b>Activity (Service)</b></para>
/// <para>Schema Name: service_activity_pointers</para>
/// </summary>
public List<Activity> GetActivities_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "serviceid", Columns); }
/// <summary>
/// <para><b>Activity (Service)</b></para>
/// <para>Schema Name: service_activity_pointers</para>
/// </summary>
public List<Activity> GetActivities_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "serviceid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Service_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Service_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Appointment (Service)</b></para>
/// <para>Schema Name: service_appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "serviceid", Columns); }
/// <summary>
/// <para><b>Appointment (Service)</b></para>
/// <para>Schema Name: service_appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "serviceid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Service_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Service_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Service_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Service_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>CalendarRule (Service)</b></para>
/// <para>Schema Name: service_calendar_rules</para>
/// </summary>
public List<CalendarRule> GetCalendarRules_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CalendarRule>(Service, this.Id, "calendarrule", "serviceid", Columns); }
/// <summary>
/// <para><b>CalendarRule (Service)</b></para>
/// <para>Schema Name: service_calendar_rules</para>
/// </summary>
public List<CalendarRule> GetCalendarRules_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CalendarRule>(Service, this.Id, "calendarrule", "serviceid", Columns); }
/// <summary>
/// <para><b>Contact (Preferred Service)</b></para>
/// <para>Schema Name: service_contacts</para>
/// </summary>
public List<Contact> GetContacts_PreferredService (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contact>(Service, this.Id, "contact", "preferredserviceid", Columns); }
/// <summary>
/// <para><b>Contact (Preferred Service)</b></para>
/// <para>Schema Name: service_contacts</para>
/// </summary>
public List<Contact> GetContacts_PreferredService (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Contact>(Service, this.Id, "contact", "preferredserviceid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Service_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Service_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Service_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Service_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Email (Service)</b></para>
/// <para>Schema Name: service_emails</para>
/// </summary>
public List<Email> GetEmailMessages_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "serviceid", Columns); }
/// <summary>
/// <para><b>Email (Service)</b></para>
/// <para>Schema Name: service_emails</para>
/// </summary>
public List<Email> GetEmailMessages_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "serviceid", Columns); }
/// <summary>
/// <para><b>Fax (Service)</b></para>
/// <para>Schema Name: service_faxes</para>
/// </summary>
public List<Fax> GetFaxes_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "serviceid", Columns); }
/// <summary>
/// <para><b>Fax (Service)</b></para>
/// <para>Schema Name: service_faxes</para>
/// </summary>
public List<Fax> GetFaxes_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "serviceid", Columns); }
/// <summary>
/// <para><b>CaseResolution (Service)</b></para>
/// <para>Schema Name: service_incidentresolutions</para>
/// </summary>
public List<CaseResolution> GetCaseResolutions_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CaseResolution>(Service, this.Id, "incidentresolution", "serviceid", Columns); }
/// <summary>
/// <para><b>CaseResolution (Service)</b></para>
/// <para>Schema Name: service_incidentresolutions</para>
/// </summary>
public List<CaseResolution> GetCaseResolutions_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CaseResolution>(Service, this.Id, "incidentresolution", "serviceid", Columns); }
/// <summary>
/// <para><b>Letter (Service)</b></para>
/// <para>Schema Name: service_letters</para>
/// </summary>
public List<Letter> GetLetters_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "serviceid", Columns); }
/// <summary>
/// <para><b>Letter (Service)</b></para>
/// <para>Schema Name: service_letters</para>
/// </summary>
public List<Letter> GetLetters_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "serviceid", Columns); }
/// <summary>
/// <para><b>Approval (Service)</b></para>
/// <para>Schema Name: msdyn_approval_service_serviceid</para>
/// </summary>
public List<Approval> GetApprovals_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "serviceid", Columns); }
/// <summary>
/// <para><b>Approval (Service)</b></para>
/// <para>Schema Name: msdyn_approval_service_serviceid</para>
/// </summary>
public List<Approval> GetApprovals_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "serviceid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Service)</b></para>
/// <para>Schema Name: msdyn_bookingalert_service_serviceid</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "serviceid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Service)</b></para>
/// <para>Schema Name: msdyn_bookingalert_service_serviceid</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "serviceid", Columns); }
/// <summary>
/// <para><b>OpportunityClose (Service)</b></para>
/// <para>Schema Name: service_opportunityclose</para>
/// </summary>
public List<OpportunityClose> GetOpportunityCloseActivities_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OpportunityClose>(Service, this.Id, "opportunityclose", "serviceid", Columns); }
/// <summary>
/// <para><b>OpportunityClose (Service)</b></para>
/// <para>Schema Name: service_opportunityclose</para>
/// </summary>
public List<OpportunityClose> GetOpportunityCloseActivities_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OpportunityClose>(Service, this.Id, "opportunityclose", "serviceid", Columns); }
/// <summary>
/// <para><b>OrderClose (Service)</b></para>
/// <para>Schema Name: service_orderclose</para>
/// </summary>
public List<OrderClose> GetOrderCloseActivities_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OrderClose>(Service, this.Id, "orderclose", "serviceid", Columns); }
/// <summary>
/// <para><b>OrderClose (Service)</b></para>
/// <para>Schema Name: service_orderclose</para>
/// </summary>
public List<OrderClose> GetOrderCloseActivities_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OrderClose>(Service, this.Id, "orderclose", "serviceid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Service)</b></para>
/// <para>Schema Name: service_phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "serviceid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Service)</b></para>
/// <para>Schema Name: service_phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "serviceid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Service_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Service_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QuoteClose (Service)</b></para>
/// <para>Schema Name: service_quoteclose</para>
/// </summary>
public List<QuoteClose> GetQuoteCloseActivities_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuoteClose>(Service, this.Id, "quoteclose", "serviceid", Columns); }
/// <summary>
/// <para><b>QuoteClose (Service)</b></para>
/// <para>Schema Name: service_quoteclose</para>
/// </summary>
public List<QuoteClose> GetQuoteCloseActivities_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QuoteClose>(Service, this.Id, "quoteclose", "serviceid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Service)</b></para>
/// <para>Schema Name: service_recurringappointmentmasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "serviceid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Service)</b></para>
/// <para>Schema Name: service_recurringappointmentmasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "serviceid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Service)</b></para>
/// <para>Schema Name: service_service_appointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "serviceid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Service)</b></para>
/// <para>Schema Name: service_service_appointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "serviceid", Columns); }
/// <summary>
/// <para><b>SocialActivity (Service)</b></para>
/// <para>Schema Name: service_socialactivities</para>
/// </summary>
public List<SocialActivity> GetSocialActivities_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialActivity>(Service, this.Id, "socialactivity", "serviceid", Columns); }
/// <summary>
/// <para><b>SocialActivity (Service)</b></para>
/// <para>Schema Name: service_socialactivities</para>
/// </summary>
public List<SocialActivity> GetSocialActivities_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialActivity>(Service, this.Id, "socialactivity", "serviceid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Service_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Service_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Service)</b></para>
/// <para>Schema Name: service_tasks</para>
/// </summary>
public List<Task> GetTasks_Service (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "serviceid", Columns); }
/// <summary>
/// <para><b>Task (Service)</b></para>
/// <para>Schema Name: service_tasks</para>
/// </summary>
public List<Task> GetTasks_Service (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "serviceid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_service</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_service</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eInitialStatusReason
{
	///<summary><para>Requested</para>
	///<para>Value = 1</para></summary>
	[Description("Requested")]
	Requested = 1, 
	///<summary><para>Tentative</para>
	///<para>Value = 2</para></summary>
	[Description("Tentative")]
	Tentative = 2, 
	///<summary><para>Pending</para>
	///<para>Value = 3</para></summary>
	[Description("Pending")]
	Pending = 3, 
	///<summary><para>Reserved</para>
	///<para>Value = 4</para></summary>
	[Description("Reserved")]
	Reserved = 4, 
	///<summary><para>In Progress</para>
	///<para>Value = 6</para></summary>
	[Description("In Progress")]
	InProgress = 6, 
	///<summary><para>Arrived</para>
	///<para>Value = 7</para></summary>
	[Description("Arrived")]
	Arrived = 7, 
	///<summary><para>Completed</para>
	///<para>Value = 8</para></summary>
	[Description("Completed")]
	Completed = 8, 
	///<summary><para>Canceled</para>
	///<para>Value = 9</para></summary>
	[Description("Canceled")]
	Canceled = 9, 
	///<summary><para>No Show</para>
	///<para>Value = 10</para></summary>
	[Description("No Show")]
	NoShow = 10
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>resourcespecidname</para>
	/// <para>resourcespecidname</para></summary>
	public const string ResourceSpecIdName = "resourcespecidname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Anchor Offset</para>
	/// <para>anchoroffset</para></summary>
	public const string AnchorOffset = "anchoroffset";
	/// <summary><para>Calendar</para>
	/// <para>calendarid</para></summary>
	public const string Calendar = "calendarid";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Duration</para>
	/// <para>duration</para></summary>
	public const string Duration = "duration";
	/// <summary><para>Granularity</para>
	/// <para>granularity</para></summary>
	public const string Granularity = "granularity";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Initial Status Reason</para>
	/// <para>initialstatuscode</para></summary>
	public const string InitialStatusReason = "initialstatuscode";
	/// <summary><para>Is Visible</para>
	/// <para>isvisible</para></summary>
	public const string IsVisible = "isvisible";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Required Resources</para>
	/// <para>resourcespecid</para></summary>
	public const string RequiredResources = "resourcespecid";
	/// <summary><para>Service</para>
	/// <para>serviceid</para></summary>
	public const string ServiceId = "serviceid";
	/// <summary><para>Show Resources</para>
	/// <para>showresources</para></summary>
	public const string ShowResources = "showresources";
	/// <summary><para>Status</para>
	/// <para>isschedulable</para></summary>
	public const string Status = "isschedulable";
	/// <summary><para>Strategy</para>
	/// <para>strategyid</para></summary>
	public const string Strategy = "strategyid";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
