// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("solutioncomponent")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class SolutionComponent : BaseProxyClass
    {
        public new const string LogicalName = "solutioncomponent";
        public const int ObjectTypeCode = 7103;
        public const string PrimaryIdAttribute = "solutioncomponentid";
        public const string PrimaryNameAttribute = "";
        
        static SolutionComponent()
        {
            BaseProxyClass.RegisterProxyType(typeof(SolutionComponent), "solutioncomponent");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public SolutionComponent() : base(new Entity("solutioncomponent")) { }
        public SolutionComponent(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<SolutionComponent>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: solutionidname</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("solutionidname")]
public string SolutionIdName
{
	get { return this.GetPropertyValue<string>("solutionidname"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: ismetadata</para>
///<para>True = Metadata</para>
///<para>False = Data</para>
///</summary>
[AttributeLogicalNameAttribute("ismetadata")]
public bool? IsThisComponentMetadata
{
	get { return this.GetPropertyValue<bool?>("ismetadata"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
/// <summary>
///Logical Name: componenttype
/// </summary>
[AttributeLogicalNameAttribute("componenttype")]
public eComponentType? ObjectTypeCode2
{
	get
	{
		if (ObjectTypeCode2_OptionSetValue != null) { return (eComponentType)ObjectTypeCode2_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componenttype</para>
///</summary>
[AttributeLogicalNameAttribute("componenttype")]
public OptionSetValue ObjectTypeCode2_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componenttype"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ObjectTypeCode2_Text(IOrganizationService Service)
{
	return this.ObjectTypeCode2_OptionSetValue.GetOptionSetText(Service, this, "componenttype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ObjectTypeCode2_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ObjectTypeCode2_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: objectid</para>
///</summary>
[AttributeLogicalNameAttribute("objectid")]
public Guid Regarding
{
	get { return this.GetPropertyValue<Guid>("objectid"); }
}
/// <summary>
///Logical Name: rootcomponentbehavior
/// </summary>
[AttributeLogicalNameAttribute("rootcomponentbehavior")]
public eIncludeBehavior? RootComponentBehavior
{
	get
	{
		if (RootComponentBehavior_OptionSetValue != null) { return (eIncludeBehavior)RootComponentBehavior_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: rootcomponentbehavior</para>
///</summary>
[AttributeLogicalNameAttribute("rootcomponentbehavior")]
public OptionSetValue RootComponentBehavior_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("rootcomponentbehavior"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string RootComponentBehavior_Text(IOrganizationService Service)
{
	return this.RootComponentBehavior_OptionSetValue.GetOptionSetText(Service, this, "rootcomponentbehavior");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string RootComponentBehavior_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.RootComponentBehavior_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: rootsolutioncomponentid</para>
///</summary>
[AttributeLogicalNameAttribute("rootsolutioncomponentid")]
public Guid RootSolutionComponentID
{
	get { return this.GetPropertyValue<Guid>("rootsolutioncomponentid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public EntityReference Solution
{
	get { return this.GetPropertyValue<EntityReference>("solutionid"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: solutioncomponentid</para>
///</summary>
[AttributeLogicalNameAttribute("solutioncomponentid")]
public Guid SolutionComponentIdentifierId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}


        /// <summary>
/// <para><b>SolutionComponent (Root Solution Component ID)</b></para>
/// <para>Schema Name: solutioncomponent_parent_solutioncomponent</para>
/// </summary>
public List<SolutionComponent> GetSolutionComponents_RootSolutionComponentID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SolutionComponent>(Service, this.Id, "solutioncomponent", "rootsolutioncomponentid", Columns); }
/// <summary>
/// <para><b>SolutionComponent (Root Solution Component ID)</b></para>
/// <para>Schema Name: solutioncomponent_parent_solutioncomponent</para>
/// </summary>
public List<SolutionComponent> GetSolutionComponents_RootSolutionComponentID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SolutionComponent>(Service, this.Id, "solutioncomponent", "rootsolutioncomponentid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_solutioncomponent</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_solutioncomponent</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eComponentType
{
	///<summary><para>Entity</para>
	///<para>Value = 1</para></summary>
	[Description("Entity")]
	Entity = 1, 
	///<summary><para>Attribute</para>
	///<para>Value = 2</para></summary>
	[Description("Attribute")]
	Attribute = 2, 
	///<summary><para>Relationship</para>
	///<para>Value = 3</para></summary>
	[Description("Relationship")]
	Relationship = 3, 
	///<summary><para>Attribute Picklist Value</para>
	///<para>Value = 4</para></summary>
	[Description("Attribute Picklist Value")]
	AttributePicklistValue = 4, 
	///<summary><para>Attribute Lookup Value</para>
	///<para>Value = 5</para></summary>
	[Description("Attribute Lookup Value")]
	AttributeLookupValue = 5, 
	///<summary><para>View Attribute</para>
	///<para>Value = 6</para></summary>
	[Description("View Attribute")]
	ViewAttribute = 6, 
	///<summary><para>Localized Label</para>
	///<para>Value = 7</para></summary>
	[Description("Localized Label")]
	LocalizedLabel = 7, 
	///<summary><para>Relationship Extra Condition</para>
	///<para>Value = 8</para></summary>
	[Description("Relationship Extra Condition")]
	RelationshipExtraCondition = 8, 
	///<summary><para>Option Set</para>
	///<para>Value = 9</para></summary>
	[Description("Option Set")]
	OptionSet = 9, 
	///<summary><para>Entity Relationship</para>
	///<para>Value = 10</para></summary>
	[Description("Entity Relationship")]
	EntityRelationship = 10, 
	///<summary><para>Entity Relationship Role</para>
	///<para>Value = 11</para></summary>
	[Description("Entity Relationship Role")]
	EntityRelationshipRole = 11, 
	///<summary><para>Entity Relationship Relationships</para>
	///<para>Value = 12</para></summary>
	[Description("Entity Relationship Relationships")]
	EntityRelationshipRelationships = 12, 
	///<summary><para>Managed Property</para>
	///<para>Value = 13</para></summary>
	[Description("Managed Property")]
	ManagedProperty = 13, 
	///<summary><para>Entity Key</para>
	///<para>Value = 14</para></summary>
	[Description("Entity Key")]
	EntityKey = 14, 
	///<summary><para>Role</para>
	///<para>Value = 20</para></summary>
	[Description("Role")]
	Role = 20, 
	///<summary><para>Role Privilege</para>
	///<para>Value = 21</para></summary>
	[Description("Role Privilege")]
	RolePrivilege = 21, 
	///<summary><para>Display String</para>
	///<para>Value = 22</para></summary>
	[Description("Display String")]
	DisplayString = 22, 
	///<summary><para>Display String Map</para>
	///<para>Value = 23</para></summary>
	[Description("Display String Map")]
	DisplayStringMap = 23, 
	///<summary><para>Form</para>
	///<para>Value = 24</para></summary>
	[Description("Form")]
	Form = 24, 
	///<summary><para>Organization</para>
	///<para>Value = 25</para></summary>
	[Description("Organization")]
	Organization = 25, 
	///<summary><para>Saved Query</para>
	///<para>Value = 26</para></summary>
	[Description("Saved Query")]
	SavedQuery = 26, 
	///<summary><para>Workflow</para>
	///<para>Value = 29</para></summary>
	[Description("Workflow")]
	Workflow = 29, 
	///<summary><para>Report</para>
	///<para>Value = 31</para></summary>
	[Description("Report")]
	Report = 31, 
	///<summary><para>Report Entity</para>
	///<para>Value = 32</para></summary>
	[Description("Report Entity")]
	ReportEntity = 32, 
	///<summary><para>Report Category</para>
	///<para>Value = 33</para></summary>
	[Description("Report Category")]
	ReportCategory = 33, 
	///<summary><para>Report Visibility</para>
	///<para>Value = 34</para></summary>
	[Description("Report Visibility")]
	ReportVisibility = 34, 
	///<summary><para>Attachment</para>
	///<para>Value = 35</para></summary>
	[Description("Attachment")]
	Attachment = 35, 
	///<summary><para>Email Template</para>
	///<para>Value = 36</para></summary>
	[Description("Email Template")]
	EmailTemplate = 36, 
	///<summary><para>Contract Template</para>
	///<para>Value = 37</para></summary>
	[Description("Contract Template")]
	ContractTemplate = 37, 
	///<summary><para>KB Article Template</para>
	///<para>Value = 38</para></summary>
	[Description("KB Article Template")]
	KBArticleTemplate = 38, 
	///<summary><para>Mail Merge Template</para>
	///<para>Value = 39</para></summary>
	[Description("Mail Merge Template")]
	MailMergeTemplate = 39, 
	///<summary><para>Duplicate Rule</para>
	///<para>Value = 44</para></summary>
	[Description("Duplicate Rule")]
	DuplicateRule = 44, 
	///<summary><para>Duplicate Rule Condition</para>
	///<para>Value = 45</para></summary>
	[Description("Duplicate Rule Condition")]
	DuplicateRuleCondition = 45, 
	///<summary><para>Entity Map</para>
	///<para>Value = 46</para></summary>
	[Description("Entity Map")]
	EntityMap = 46, 
	///<summary><para>Attribute Map</para>
	///<para>Value = 47</para></summary>
	[Description("Attribute Map")]
	AttributeMap = 47, 
	///<summary><para>Ribbon Command</para>
	///<para>Value = 48</para></summary>
	[Description("Ribbon Command")]
	RibbonCommand = 48, 
	///<summary><para>Ribbon Context Group</para>
	///<para>Value = 49</para></summary>
	[Description("Ribbon Context Group")]
	RibbonContextGroup = 49, 
	///<summary><para>Ribbon Customization</para>
	///<para>Value = 50</para></summary>
	[Description("Ribbon Customization")]
	RibbonCustomization = 50, 
	///<summary><para>Ribbon Rule</para>
	///<para>Value = 52</para></summary>
	[Description("Ribbon Rule")]
	RibbonRule = 52, 
	///<summary><para>Ribbon Tab To Command Map</para>
	///<para>Value = 53</para></summary>
	[Description("Ribbon Tab To Command Map")]
	RibbonTabToCommandMap = 53, 
	///<summary><para>Ribbon Diff</para>
	///<para>Value = 55</para></summary>
	[Description("Ribbon Diff")]
	RibbonDiff = 55, 
	///<summary><para>Saved Query Visualization</para>
	///<para>Value = 59</para></summary>
	[Description("Saved Query Visualization")]
	SavedQueryVisualization = 59, 
	///<summary><para>System Form</para>
	///<para>Value = 60</para></summary>
	[Description("System Form")]
	SystemForm = 60, 
	///<summary><para>Web Resource</para>
	///<para>Value = 61</para></summary>
	[Description("Web Resource")]
	WebResource = 61, 
	///<summary><para>Site Map</para>
	///<para>Value = 62</para></summary>
	[Description("Site Map")]
	SiteMap = 62, 
	///<summary><para>Connection Role</para>
	///<para>Value = 63</para></summary>
	[Description("Connection Role")]
	ConnectionRole = 63, 
	///<summary><para>Field Security Profile</para>
	///<para>Value = 70</para></summary>
	[Description("Field Security Profile")]
	FieldSecurityProfile = 70, 
	///<summary><para>Field Permission</para>
	///<para>Value = 71</para></summary>
	[Description("Field Permission")]
	FieldPermission = 71, 
	///<summary><para>Plugin Type</para>
	///<para>Value = 90</para></summary>
	[Description("Plugin Type")]
	PluginType = 90, 
	///<summary><para>Plugin Assembly</para>
	///<para>Value = 91</para></summary>
	[Description("Plugin Assembly")]
	PluginAssembly = 91, 
	///<summary><para>SDK Message Processing Step</para>
	///<para>Value = 92</para></summary>
	[Description("SDK Message Processing Step")]
	SDKMessageProcessingStep = 92, 
	///<summary><para>SDK Message Processing Step Image</para>
	///<para>Value = 93</para></summary>
	[Description("SDK Message Processing Step Image")]
	SDKMessageProcessingStepImage = 93, 
	///<summary><para>Service Endpoint</para>
	///<para>Value = 95</para></summary>
	[Description("Service Endpoint")]
	ServiceEndpoint = 95, 
	///<summary><para>Routing Rule</para>
	///<para>Value = 150</para></summary>
	[Description("Routing Rule")]
	RoutingRule = 150, 
	///<summary><para>Routing Rule Item</para>
	///<para>Value = 151</para></summary>
	[Description("Routing Rule Item")]
	RoutingRuleItem = 151, 
	///<summary><para>SLA</para>
	///<para>Value = 152</para></summary>
	[Description("SLA")]
	SLA = 152, 
	///<summary><para>SLA Item</para>
	///<para>Value = 153</para></summary>
	[Description("SLA Item")]
	SLAItem = 153, 
	///<summary><para>Convert Rule</para>
	///<para>Value = 154</para></summary>
	[Description("Convert Rule")]
	ConvertRule = 154, 
	///<summary><para>Convert Rule Item</para>
	///<para>Value = 155</para></summary>
	[Description("Convert Rule Item")]
	ConvertRuleItem = 155, 
	///<summary><para>Hierarchy Rule</para>
	///<para>Value = 65</para></summary>
	[Description("Hierarchy Rule")]
	HierarchyRule = 65, 
	///<summary><para>Mobile Offline Profile</para>
	///<para>Value = 161</para></summary>
	[Description("Mobile Offline Profile")]
	MobileOfflineProfile = 161, 
	///<summary><para>Mobile Offline Profile Item</para>
	///<para>Value = 162</para></summary>
	[Description("Mobile Offline Profile Item")]
	MobileOfflineProfileItem = 162, 
	///<summary><para>Similarity Rule</para>
	///<para>Value = 165</para></summary>
	[Description("Similarity Rule")]
	SimilarityRule = 165, 
	///<summary><para>Custom Control</para>
	///<para>Value = 66</para></summary>
	[Description("Custom Control")]
	CustomControl = 66, 
	///<summary><para>Custom Control Default Config</para>
	///<para>Value = 68</para></summary>
	[Description("Custom Control Default Config")]
	CustomControlDefaultConfig = 68
}
public enum eIncludeBehavior
{
	///<summary><para>Include Subcomponents</para>
	///<para>Value = 0</para></summary>
	[Description("Include Subcomponents")]
	IncludeSubcomponents = 0, 
	///<summary><para>Do not include subcomponents</para>
	///<para>Value = 1</para></summary>
	[Description("Do not include subcomponents")]
	DoNotIncludeSubcomponents = 1, 
	///<summary><para>Include As Shell Only</para>
	///<para>Value = 2</para></summary>
	[Description("Include As Shell Only")]
	IncludeAsShellOnly = 2
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>solutionidname</para>
	/// <para>solutionidname</para></summary>
	public const string SolutionIdName = "solutionidname";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Is this component metadata</para>
	/// <para>ismetadata</para></summary>
	public const string IsThisComponentMetadata = "ismetadata";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Object Type Code</para>
	/// <para>componenttype</para></summary>
	public const string ObjectTypeCode2 = "componenttype";
	/// <summary><para>Regarding</para>
	/// <para>objectid</para></summary>
	public const string Regarding = "objectid";
	/// <summary><para>Root Component Behavior</para>
	/// <para>rootcomponentbehavior</para></summary>
	public const string RootComponentBehavior = "rootcomponentbehavior";
	/// <summary><para>Root Solution Component ID</para>
	/// <para>rootsolutioncomponentid</para></summary>
	public const string RootSolutionComponentID = "rootsolutioncomponentid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution = "solutionid";
	/// <summary><para>Solution Component Identifier</para>
	/// <para>solutioncomponentid</para></summary>
	public const string SolutionComponentIdentifierId = "solutioncomponentid";
}

    }
}
