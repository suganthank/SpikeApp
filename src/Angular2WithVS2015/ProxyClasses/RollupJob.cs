// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("rollupjob")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class RollupJob : BaseProxyClass
    {
        public new const string LogicalName = "rollupjob";
        public const int ObjectTypeCode = 9511;
        public const string PrimaryIdAttribute = "rollupjobid";
        public const string PrimaryNameAttribute = "";
        
        static RollupJob()
        {
            BaseProxyClass.RegisterProxyType(typeof(RollupJob), "rollupjob");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public RollupJob() : base(new Entity("rollupjob")) { }
        public RollupJob(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<RollupJob>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        /// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? StateCode
{
	get
	{
		if (StateCode_OptionSetValue != null) { return (eStatus)StateCode_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue StateCode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StateCode_Text(IOrganizationService Service)
{
	return this.StateCode_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StateCode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StateCode_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusCode
{
	get
	{
		if (StatusCode_OptionSetValue != null) { return (eStatusReason)StatusCode_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusCode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusCode_Text(IOrganizationService Service)
{
	return this.StatusCode_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusCode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusCode_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: recordcreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("recordcreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("recordcreatedon"); }
}
///<summary>
///<para>Logical Name: depthprocessed</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("depthprocessed")]
public int? DepthProcessed
{
	get { return this.GetPropertyValue<int?>("depthprocessed"); }
}
///<summary>
///<para>Logical Name: retrycount</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("retrycount")]
public int? RetryCount
{
	get { return this.GetPropertyValue<int?>("retrycount"); }
}
///<summary>
///<para>Logical Name: postponeuntil</para>
///</summary>
[AttributeLogicalNameAttribute("postponeuntil")]
public DateTime? PostponeUntil
{
	get { return this.GetPropertyValue<DateTime?>("postponeuntil"); }
}
///<summary>
///<para>Logical Name: sourceentitytypecode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("sourceentitytypecode")]
public int? SourceEntityTypeCode
{
	get { return this.GetPropertyValue<int?>("sourceentitytypecode"); }
}
///<summary>
///<para>Logical Name: rollupjobid</para>
///</summary>
[AttributeLogicalNameAttribute("rollupjobid")]
public int? RollupJobId
{
	get { return this.GetPropertyValue<int?>("rollupjobid"); }
}
///<summary>
///<para>Logical Name: rolluppropertiesid</para>
///</summary>
[AttributeLogicalNameAttribute("rolluppropertiesid")]
public EntityReference RollupPropertiesId
{
	get { return this.GetPropertyValue<EntityReference>("rolluppropertiesid"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference RegardingObjectId
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
}


        

        

        

        public enum eStatus
{
	///<summary><para>Ready</para>
	///<para>Value = 0</para></summary>
	[Description("Ready")]
	Ready = 0, 
	///<summary><para>Suspended</para>
	///<para>Value = 1</para></summary>
	[Description("Suspended")]
	Suspended = 1, 
	///<summary><para>Locked</para>
	///<para>Value = 2</para></summary>
	[Description("Locked")]
	Locked = 2, 
	///<summary><para>Completed</para>
	///<para>Value = 3</para></summary>
	[Description("Completed")]
	Completed = 3
}
public enum eStatusReason
{
	///<summary><para>Waiting For Resources</para>
	///<para>Value = 0</para></summary>
	[Description("Waiting For Resources")]
	WaitingForResources_Ready = 0, 
	///<summary><para>Waiting</para>
	///<para>Value = 10</para></summary>
	[Description("Waiting")]
	Waiting_Suspended = 10, 
	///<summary><para>In Progress</para>
	///<para>Value = 20</para></summary>
	[Description("In Progress")]
	InProgress_Locked = 20, 
	///<summary><para>Pausing</para>
	///<para>Value = 21</para></summary>
	[Description("Pausing")]
	Pausing_Locked = 21, 
	///<summary><para>Canceling</para>
	///<para>Value = 22</para></summary>
	[Description("Canceling")]
	Canceling_Locked = 22, 
	///<summary><para>Succeeded</para>
	///<para>Value = 30</para></summary>
	[Description("Succeeded")]
	Succeeded_Completed = 30, 
	///<summary><para>Failed</para>
	///<para>Value = 31</para></summary>
	[Description("Failed")]
	Failed_Completed = 31, 
	///<summary><para>Canceled</para>
	///<para>Value = 32</para></summary>
	[Description("Canceled")]
	Canceled_Completed = 32
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>statecode</para>
	/// <para>statecode</para></summary>
	public const string StateCode = "statecode";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>statuscode</para>
	/// <para>statuscode</para></summary>
	public const string StatusCode = "statuscode";
	/// <summary><para>recordcreatedon</para>
	/// <para>recordcreatedon</para></summary>
	public const string RecordCreatedOn = "recordcreatedon";
	/// <summary><para>depthprocessed</para>
	/// <para>depthprocessed</para></summary>
	public const string DepthProcessed = "depthprocessed";
	/// <summary><para>retrycount</para>
	/// <para>retrycount</para></summary>
	public const string RetryCount = "retrycount";
	/// <summary><para>postponeuntil</para>
	/// <para>postponeuntil</para></summary>
	public const string PostponeUntil = "postponeuntil";
	/// <summary><para>sourceentitytypecode</para>
	/// <para>sourceentitytypecode</para></summary>
	public const string SourceEntityTypeCode = "sourceentitytypecode";
	/// <summary><para>rollupjobid</para>
	/// <para>rollupjobid</para></summary>
	public const string RollupJobId = "rollupjobid";
	/// <summary><para>rolluppropertiesid</para>
	/// <para>rolluppropertiesid</para></summary>
	public const string RollupPropertiesId = "rolluppropertiesid";
	/// <summary><para>regardingobjectid</para>
	/// <para>regardingobjectid</para></summary>
	public const string RegardingObjectId = "regardingobjectid";
}

    }
}
