// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("topicmodelexecutionhistory")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class TopicModelExecutionHistory : BaseProxyClass
    {
        public new const string LogicalName = "topicmodelexecutionhistory";
        public const int ObjectTypeCode = 9943;
        public const string PrimaryIdAttribute = "topicmodelexecutionhistoryid";
        public const string PrimaryNameAttribute = "";
        
        static TopicModelExecutionHistory()
        {
            BaseProxyClass.RegisterProxyType(typeof(TopicModelExecutionHistory), "topicmodelexecutionhistory");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public TopicModelExecutionHistory() : base(new Entity("topicmodelexecutionhistory")) { }
        public TopicModelExecutionHistory(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<TopicModelExecutionHistory>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: topicmodelidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelidname")]
public string TopicModelIdName
{
	get { return this.GetPropertyValue<string>("topicmodelidname"); }
}
///<summary>
///<para>Logical Name: topicmodelconfigurationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelconfigurationidname")]
public string TopicModelConfigurationIdName
{
	get { return this.GetPropertyValue<string>("topicmodelconfigurationidname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: totaltime</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("totaltime")]
public int? Duration_inMins
{
	get { return this.GetPropertyValue<int?>("totaltime"); }
	set { this.SetPropertyValue("totaltime", (int?)value, (int)0, (int)2147483647, "Duration_inMins"); }
}
///<summary>
///<para>Logical Name: azuresyncerrormessage</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("azuresyncerrormessage")]
public string ErrorDetails
{
	get { return this.GetPropertyValue<string>("azuresyncerrormessage"); }
	set { this.SetPropertyValue("azuresyncerrormessage", value, 1073741823, "ErrorDetails"); }
}
///<summary>
///<para>Logical Name: fetchxmllist</para>
///<para>Max Length: 500000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("fetchxmllist")]
public string FetchXml
{
	get { return this.GetPropertyValue<string>("fetchxmllist"); }
	set { this.SetPropertyValue("fetchxmllist", value, 500000, "FetchXml"); }
}
///<summary>
///<para>Logical Name: maxtopics</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000</para>
///</summary>
[AttributeLogicalNameAttribute("maxtopics")]
public int? MaxTopics
{
	get { return this.GetPropertyValue<int?>("maxtopics"); }
	set { this.SetPropertyValue("maxtopics", (int?)value, (int)0, (int)1000, "MaxTopics"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: recordsprocessed</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("recordsprocessed")]
public int? NumberOfRecordsSynchronized
{
	get { return this.GetPropertyValue<int?>("recordsprocessed"); }
	set { this.SetPropertyValue("recordsprocessed", (int?)value, (int)0, (int)2147483647, "NumberOfRecordsSynchronized"); }
}
///<summary>
///<para>Logical Name: numberoftopicsfound</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("numberoftopicsfound")]
public int? NumberOfTopicsIdentified
{
	get { return this.GetPropertyValue<int?>("numberoftopicsfound"); }
	set { this.SetPropertyValue("numberoftopicsfound", (int?)value, (int)0, (int)2147483647, "NumberOfTopicsIdentified"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: recordcorrelationid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recordcorrelationid")]
public string RecordCorrelationId
{
	get { return this.GetPropertyValue<string>("recordcorrelationid"); }
	set { this.SetPropertyValue("recordcorrelationid", value, 100, "RecordCorrelationId"); }
}
///<summary>
///<para>Logical Name: starttime</para>
///</summary>
[AttributeLogicalNameAttribute("starttime")]
public DateTime? StartTime
{
	get { return this.GetPropertyValue<DateTime?>("starttime"); }
	set { this.SetPropertyValue<DateTime?>("starttime", value, "StartTime"); }
}
/// <summary>
///Logical Name: status
/// </summary>
[AttributeLogicalNameAttribute("status")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: status</para>
///</summary>
[AttributeLogicalNameAttribute("status")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("status"); }
	set { this.SetPropertyValue<OptionSetValue>("status", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "status");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statusreason
/// </summary>
[AttributeLogicalNameAttribute("statusreason")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statusreason</para>
///</summary>
[AttributeLogicalNameAttribute("statusreason")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statusreason"); }
	set { this.SetPropertyValue<OptionSetValue>("statusreason", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statusreason");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: istestexecution</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("istestexecution")]
public bool? TestExecution
{
	get { return this.GetPropertyValue<bool?>("istestexecution"); }
	set { this.SetPropertyValue<bool?>("istestexecution", value, "TestExecution"); }
}
///<summary>
///<para>Logical Name: topicmodelconfigurationid</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelconfigurationid")]
public EntityReference TopicModelConfiguration
{
	get { return this.GetPropertyValue<EntityReference>("topicmodelconfigurationid"); }
	set { this.SetPropertyValue<EntityReference>("topicmodelconfigurationid", value, "TopicModelConfiguration"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: topicmodelexecutionhistoryid</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelexecutionhistoryid")]
public Guid TopicModelExecutionHistoryId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: topicmodelid</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelid")]
public EntityReference TopicModelId
{
	get { return this.GetPropertyValue<EntityReference>("topicmodelid"); }
	set { this.SetPropertyValue<EntityReference>("topicmodelid", value, "TopicModelId"); }
}


        /// <summary>
/// <para><b>TopicHistory (TopicModelExecutionHistoryId)</b></para>
/// <para>Schema Name: topicmodelexecutionhistory_topichistory</para>
/// </summary>
public List<TopicHistory> GetTopicHistories_TopicModelExecutionHistoryId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicHistory>(Service, this.Id, "topichistory", "topicmodelexecutionhistoryid", Columns); }
/// <summary>
/// <para><b>TopicHistory (TopicModelExecutionHistoryId)</b></para>
/// <para>Schema Name: topicmodelexecutionhistory_topichistory</para>
/// </summary>
public List<TopicHistory> GetTopicHistories_TopicModelExecutionHistoryId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicHistory>(Service, this.Id, "topichistory", "topicmodelexecutionhistoryid", Columns); }


        

        

        public enum eStatus
{
	///<summary><para>Queued</para>
	///<para>Value = 1</para></summary>
	[Description("Queued")]
	Queued = 1, 
	///<summary><para>In progress</para>
	///<para>Value = 2</para></summary>
	[Description("In progress")]
	InProgress = 2, 
	///<summary><para>Success</para>
	///<para>Value = 3</para></summary>
	[Description("Success")]
	Success = 3, 
	///<summary><para>Failed</para>
	///<para>Value = 4</para></summary>
	[Description("Failed")]
	Failed = 4
}
public enum eStatusReason
{
	///<summary><para>Topic analysis execution is queued</para>
	///<para>Value = 1</para></summary>
	[Description("Topic analysis execution is queued")]
	TopicAnalysisExecutionIsQueued = 1, 
	///<summary><para>Topic analysis execution is synchronizing</para>
	///<para>Value = 2</para></summary>
	[Description("Topic analysis execution is synchronizing")]
	TopicAnalysisExecutionIsSynchronizing = 2, 
	///<summary><para>Analyzing topic analysis execution</para>
	///<para>Value = 3</para></summary>
	[Description("Analyzing topic analysis execution")]
	AnalyzingTopicAnalysisExecution = 3, 
	///<summary><para>Topic analysis has built</para>
	///<para>Value = 4</para></summary>
	[Description("Topic analysis has built")]
	TopicAnalysisHasBuilt = 4, 
	///<summary><para>Synchronization failed</para>
	///<para>Value = 5</para></summary>
	[Description("Synchronization failed")]
	SynchronizationFailed = 5, 
	///<summary><para>Analysis failed</para>
	///<para>Value = 6</para></summary>
	[Description("Analysis failed")]
	AnalysisFailed = 6, 
	///<summary><para>Connection failed</para>
	///<para>Value = 7</para></summary>
	[Description("Connection failed")]
	ConnectionFailed = 7
}


        public static class Properties
{
	/// <summary><para>topicmodelidname</para>
	/// <para>topicmodelidname</para></summary>
	public const string TopicModelIdName = "topicmodelidname";
	/// <summary><para>topicmodelconfigurationidname</para>
	/// <para>topicmodelconfigurationidname</para></summary>
	public const string TopicModelConfigurationIdName = "topicmodelconfigurationidname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Duration (in mins)</para>
	/// <para>totaltime</para></summary>
	public const string Duration_inMins = "totaltime";
	/// <summary><para>Error Details</para>
	/// <para>azuresyncerrormessage</para></summary>
	public const string ErrorDetails = "azuresyncerrormessage";
	/// <summary><para>Fetch Xml</para>
	/// <para>fetchxmllist</para></summary>
	public const string FetchXml = "fetchxmllist";
	/// <summary><para>Max Topics</para>
	/// <para>maxtopics</para></summary>
	public const string MaxTopics = "maxtopics";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Number of Records Synchronized</para>
	/// <para>recordsprocessed</para></summary>
	public const string NumberOfRecordsSynchronized = "recordsprocessed";
	/// <summary><para>Number of Topics Identified</para>
	/// <para>numberoftopicsfound</para></summary>
	public const string NumberOfTopicsIdentified = "numberoftopicsfound";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Record Correlation Id</para>
	/// <para>recordcorrelationid</para></summary>
	public const string RecordCorrelationId = "recordcorrelationid";
	/// <summary><para>Start Time</para>
	/// <para>starttime</para></summary>
	public const string StartTime = "starttime";
	/// <summary><para>Status</para>
	/// <para>status</para></summary>
	public const string Status = "status";
	/// <summary><para>Status Reason</para>
	/// <para>statusreason</para></summary>
	public const string StatusReason = "statusreason";
	/// <summary><para>Test Execution</para>
	/// <para>istestexecution</para></summary>
	public const string TestExecution = "istestexecution";
	/// <summary><para>Topic Model Configuration</para>
	/// <para>topicmodelconfigurationid</para></summary>
	public const string TopicModelConfiguration = "topicmodelconfigurationid";
	/// <summary><para>TopicModelExecutionHistory</para>
	/// <para>topicmodelexecutionhistoryid</para></summary>
	public const string TopicModelExecutionHistoryId = "topicmodelexecutionhistoryid";
	/// <summary><para>TopicModelId</para>
	/// <para>topicmodelid</para></summary>
	public const string TopicModelId = "topicmodelid";
}

    }
}
