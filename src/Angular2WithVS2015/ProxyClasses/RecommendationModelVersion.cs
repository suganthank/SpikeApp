// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("recommendationmodelversion")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class RecommendationModelVersion : BaseProxyClass
    {
        public new const string LogicalName = "recommendationmodelversion";
        public const int ObjectTypeCode = 9935;
        public const string PrimaryIdAttribute = "recommendationmodelversionid";
        public const string PrimaryNameAttribute = "name";
        
        static RecommendationModelVersion()
        {
            BaseProxyClass.RegisterProxyType(typeof(RecommendationModelVersion), "recommendationmodelversion");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public RecommendationModelVersion() : base(new Entity("recommendationmodelversion")) { }
        public RecommendationModelVersion(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<RecommendationModelVersion>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: recommendationmodelidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelidname")]
public string RecommendationModelIdName
{
	get { return this.GetPropertyValue<string>("recommendationmodelidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: azurebuildid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("azurebuildid")]
public string AzureBuildId
{
	get { return this.GetPropertyValue<string>("azurebuildid"); }
	set { this.SetPropertyValue("azurebuildid", value, 100, "AzureBuildId"); }
}
///<summary>
///<para>Logical Name: logicapprunid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("logicapprunid")]
public string AzureLogicAppRunName
{
	get { return this.GetPropertyValue<string>("logicapprunid"); }
	set { this.SetPropertyValue("logicapprunid", value, 100, "AzureLogicAppRunName"); }
}
/// <summary>
///Logical Name: azuremodelbuildstatus
/// </summary>
[AttributeLogicalNameAttribute("azuremodelbuildstatus")]
public eBuildStatus? AzureModelBuildStatus
{
	get
	{
		if (AzureModelBuildStatus_OptionSetValue != null) { return (eBuildStatus)AzureModelBuildStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AzureModelBuildStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.AzureModelBuildStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: azuremodelbuildstatus</para>
///</summary>
[AttributeLogicalNameAttribute("azuremodelbuildstatus")]
public OptionSetValue AzureModelBuildStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("azuremodelbuildstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("azuremodelbuildstatus", value, "AzureModelBuildStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AzureModelBuildStatus_Text(IOrganizationService Service)
{
	return this.AzureModelBuildStatus_OptionSetValue.GetOptionSetText(Service, this, "azuremodelbuildstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AzureModelBuildStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AzureModelBuildStatus_OptionSetValue.Value);
}
/// <summary>
///Logical Name: basketdatasynchronizationstatus
/// </summary>
[AttributeLogicalNameAttribute("basketdatasynchronizationstatus")]
public eSynchronizationStatus? BasketDataSynchronizationStatus
{
	get
	{
		if (BasketDataSynchronizationStatus_OptionSetValue != null) { return (eSynchronizationStatus)BasketDataSynchronizationStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.BasketDataSynchronizationStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.BasketDataSynchronizationStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: basketdatasynchronizationstatus</para>
///</summary>
[AttributeLogicalNameAttribute("basketdatasynchronizationstatus")]
public OptionSetValue BasketDataSynchronizationStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("basketdatasynchronizationstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("basketdatasynchronizationstatus", value, "BasketDataSynchronizationStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string BasketDataSynchronizationStatus_Text(IOrganizationService Service)
{
	return this.BasketDataSynchronizationStatus_OptionSetValue.GetOptionSetText(Service, this, "basketdatasynchronizationstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string BasketDataSynchronizationStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.BasketDataSynchronizationStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: buildendedon</para>
///</summary>
[AttributeLogicalNameAttribute("buildendedon")]
public DateTime? BuildEndTime
{
	get { return this.GetPropertyValue<DateTime?>("buildendedon"); }
	set { this.SetPropertyValue<DateTime?>("buildendedon", value, "BuildEndTime"); }
}
///<summary>
///<para>Logical Name: buildstartedon</para>
///</summary>
[AttributeLogicalNameAttribute("buildstartedon")]
public DateTime? BuildStartTime
{
	get { return this.GetPropertyValue<DateTime?>("buildstartedon"); }
	set { this.SetPropertyValue<DateTime?>("buildstartedon", value, "BuildStartTime"); }
}
///<summary>
///<para>Logical Name: catalogcoverage</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///</summary>
[AttributeLogicalNameAttribute("catalogcoverage")]
public int? CatalogCoverage
{
	get { return this.GetPropertyValue<int?>("catalogcoverage"); }
	set { this.SetPropertyValue("catalogcoverage", (int?)value, (int)0, (int)100, "CatalogCoverage"); }
}
/// <summary>
///Logical Name: catalogsynchronizationstatus
/// </summary>
[AttributeLogicalNameAttribute("catalogsynchronizationstatus")]
public eSynchronizationStatus? CatalogSynchronizationStatus
{
	get
	{
		if (CatalogSynchronizationStatus_OptionSetValue != null) { return (eSynchronizationStatus)CatalogSynchronizationStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CatalogSynchronizationStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.CatalogSynchronizationStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: catalogsynchronizationstatus</para>
///</summary>
[AttributeLogicalNameAttribute("catalogsynchronizationstatus")]
public OptionSetValue CatalogSynchronizationStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("catalogsynchronizationstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("catalogsynchronizationstatus", value, "CatalogSynchronizationStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string CatalogSynchronizationStatus_Text(IOrganizationService Service)
{
	return this.CatalogSynchronizationStatus_OptionSetValue.GetOptionSetText(Service, this, "catalogsynchronizationstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string CatalogSynchronizationStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.CatalogSynchronizationStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: duration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("duration")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("duration"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 125 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 125, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: percentilerank</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///</summary>
[AttributeLogicalNameAttribute("percentilerank")]
public int? Precision
{
	get { return this.GetPropertyValue<int?>("percentilerank"); }
	set { this.SetPropertyValue("percentilerank", (int?)value, (int)0, (int)100, "Precision"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: recommendationmodelversionid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelversionid")]
public Guid RecommendationModelVersionId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: recommendationmodelid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelid")]
public EntityReference RecommendationModelId
{
	get { return this.GetPropertyValue<EntityReference>("recommendationmodelid"); }
	set { this.SetPropertyValue<EntityReference>("recommendationmodelid", value, "RecommendationModelId"); }
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatusReason)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}


        /// <summary>
/// <para><b>ProductRecommendationModel (Recommendation Version)</b></para>
/// <para>Schema Name: recommendationmodelversion_recommendationmodel</para>
/// </summary>
public List<ProductRecommendationModel> GetProductRecommendationModels_RecommendationVersion (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProductRecommendationModel>(Service, this.Id, "recommendationmodel", "recommendationmodelversionid", Columns); }
/// <summary>
/// <para><b>ProductRecommendationModel (Recommendation Version)</b></para>
/// <para>Schema Name: recommendationmodelversion_recommendationmodel</para>
/// </summary>
public List<ProductRecommendationModel> GetProductRecommendationModels_RecommendationVersion (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProductRecommendationModel>(Service, this.Id, "recommendationmodel", "recommendationmodelversionid", Columns); }
/// <summary>
/// <para><b>ModelEntityMapping (Model Version)</b></para>
/// <para>Schema Name: recommendationmodelversion_recommendationmodelmapping</para>
/// </summary>
public List<ModelEntityMapping> GetModelEntityMappings_ModelVersion (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ModelEntityMapping>(Service, this.Id, "recommendationmodelmapping", "recommendationmodelversionid", Columns); }
/// <summary>
/// <para><b>ModelEntityMapping (Model Version)</b></para>
/// <para>Schema Name: recommendationmodelversion_recommendationmodelmapping</para>
/// </summary>
public List<ModelEntityMapping> GetModelEntityMappings_ModelVersion (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ModelEntityMapping>(Service, this.Id, "recommendationmodelmapping", "recommendationmodelversionid", Columns); }
/// <summary>
/// <para><b>RecommendationModelVersionExecutionHistory (Recommendation Model Version)</b></para>
/// <para>Schema Name: recommendationmodelversion_recommendationmodelversionhistory</para>
/// </summary>
public List<RecommendationModelVersionExecutionHistory> GetRecommendationModelVersionExecutionHistoryRecords_RecommendationModelVersion (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecommendationModelVersionExecutionHistory>(Service, this.Id, "recommendationmodelversionhistory", "recommendationmodelversionid", Columns); }
/// <summary>
/// <para><b>RecommendationModelVersionExecutionHistory (Recommendation Model Version)</b></para>
/// <para>Schema Name: recommendationmodelversion_recommendationmodelversionhistory</para>
/// </summary>
public List<RecommendationModelVersionExecutionHistory> GetRecommendationModelVersionExecutionHistoryRecords_RecommendationModelVersion (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecommendationModelVersionExecutionHistory>(Service, this.Id, "recommendationmodelversionhistory", "recommendationmodelversionid", Columns); }


        

        

        public enum eBuildStatus
{
	///<summary><para>Not Started</para>
	///<para>Value = 0</para></summary>
	[Description("Not Started")]
	NotStarted = 0, 
	///<summary><para>Create</para>
	///<para>Value = 1</para></summary>
	[Description("Create")]
	Create = 1, 
	///<summary><para>In Progress</para>
	///<para>Value = 2</para></summary>
	[Description("In Progress")]
	InProgress = 2, 
	///<summary><para>Success</para>
	///<para>Value = 3</para></summary>
	[Description("Success")]
	Success = 3, 
	///<summary><para>Error</para>
	///<para>Value = 4</para></summary>
	[Description("Error")]
	Error = 4, 
	///<summary><para>Cancelling</para>
	///<para>Value = 5</para></summary>
	[Description("Cancelling")]
	Cancelling = 5, 
	///<summary><para>Cancelled</para>
	///<para>Value = 6</para></summary>
	[Description("Cancelled")]
	Cancelled = 6
}
public enum eSynchronizationStatus
{
	///<summary><para>Not Started</para>
	///<para>Value = 1</para></summary>
	[Description("Not Started")]
	NotStarted = 1, 
	///<summary><para>In Progress</para>
	///<para>Value = 2</para></summary>
	[Description("In Progress")]
	InProgress = 2, 
	///<summary><para>Completed</para>
	///<para>Value = 3</para></summary>
	[Description("Completed")]
	Completed = 3, 
	///<summary><para>Failed</para>
	///<para>Value = 4</para></summary>
	[Description("Failed")]
	Failed = 4
}
public enum eStatusReason
{
	///<summary><para>Not Started</para>
	///<para>Value = 1</para></summary>
	[Description("Not Started")]
	NotStarted = 1, 
	///<summary><para>In Progress</para>
	///<para>Value = 2</para></summary>
	[Description("In Progress")]
	InProgress = 2, 
	///<summary><para>Completed</para>
	///<para>Value = 3</para></summary>
	[Description("Completed")]
	Completed = 3, 
	///<summary><para>Failed</para>
	///<para>Value = 4</para></summary>
	[Description("Failed")]
	Failed = 4, 
	///<summary><para>Cancelled</para>
	///<para>Value = 5</para></summary>
	[Description("Cancelled")]
	Cancelled = 5
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>recommendationmodelidname</para>
	/// <para>recommendationmodelidname</para></summary>
	public const string RecommendationModelIdName = "recommendationmodelidname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Azure Build Id</para>
	/// <para>azurebuildid</para></summary>
	public const string AzureBuildId = "azurebuildid";
	/// <summary><para>Azure Logic App Run Name</para>
	/// <para>logicapprunid</para></summary>
	public const string AzureLogicAppRunName = "logicapprunid";
	/// <summary><para>Azure Model Build Status</para>
	/// <para>azuremodelbuildstatus</para></summary>
	public const string AzureModelBuildStatus = "azuremodelbuildstatus";
	/// <summary><para>Basket Data Synchronization Status</para>
	/// <para>basketdatasynchronizationstatus</para></summary>
	public const string BasketDataSynchronizationStatus = "basketdatasynchronizationstatus";
	/// <summary><para>Build End Time</para>
	/// <para>buildendedon</para></summary>
	public const string BuildEndTime = "buildendedon";
	/// <summary><para>Build Start Time</para>
	/// <para>buildstartedon</para></summary>
	public const string BuildStartTime = "buildstartedon";
	/// <summary><para>Catalog Coverage (%)</para>
	/// <para>catalogcoverage</para></summary>
	public const string CatalogCoverage = "catalogcoverage";
	/// <summary><para>Catalog Synchronization Status</para>
	/// <para>catalogsynchronizationstatus</para></summary>
	public const string CatalogSynchronizationStatus = "catalogsynchronizationstatus";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Duration</para>
	/// <para>duration</para></summary>
	public const string Duration = "duration";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Precision</para>
	/// <para>percentilerank</para></summary>
	public const string Precision = "percentilerank";
	/// <summary><para>Recommendation Model Version</para>
	/// <para>recommendationmodelversionid</para></summary>
	public const string RecommendationModelVersionId = "recommendationmodelversionid";
	/// <summary><para>RecommendationModelId</para>
	/// <para>recommendationmodelid</para></summary>
	public const string RecommendationModelId = "recommendationmodelid";
	/// <summary><para>Status</para>
	/// <para>statuscode</para></summary>
	public const string Status = "statuscode";
}

    }
}
