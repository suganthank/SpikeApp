// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("report")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Report : BaseProxyClass
    {
        public new const string LogicalName = "report";
        public const int ObjectTypeCode = 9100;
        public const string PrimaryIdAttribute = "reportid";
        public const string PrimaryNameAttribute = "name";
        
        static Report()
        {
            BaseProxyClass.RegisterProxyType(typeof(Report), "report");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Report() : base(new Entity("report")) { }
        public Report(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Report>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: parentreportidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("parentreportidname")]
public string ParentReportIdName
{
	get { return this.GetPropertyValue<string>("parentreportidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: bodybinary</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("bodybinary")]
public string BodyBinary
{
	get { return this.GetPropertyValue<string>("bodybinary"); }
	set { this.SetPropertyValue("bodybinary", value, 1073741823, "BodyBinary"); }
}
///<summary>
///<para>Logical Name: originalbodytext</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("originalbodytext")]
public string BodyText
{
	get { return this.GetPropertyValue<string>("originalbodytext"); }
}
///<summary>
///<para>Logical Name: bodytext</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("bodytext")]
public string BodyText2
{
	get { return this.GetPropertyValue<string>("bodytext"); }
	set { this.SetPropertyValue("bodytext", value, 1073741823, "BodyText2"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: createdinmajorversion</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("createdinmajorversion")]
public int? CrmVersionInWhichTheReportIsCreated
{
	get { return this.GetPropertyValue<int?>("createdinmajorversion"); }
	set { this.SetPropertyValue("createdinmajorversion", (int?)value, (int)0, (int)2147483647, "CrmVersionInWhichTheReportIsCreated"); }
}
///<summary>
///<para>Logical Name: customreportxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("customreportxml")]
public string CustomReportXML
{
	get { return this.GetPropertyValue<string>("customreportxml"); }
}
///<summary>
///<para>Logical Name: iscustomizable</para>
///</summary>
[AttributeLogicalNameAttribute("iscustomizable")]
public BooleanManagedProperty Customizable
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("iscustomizable"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("iscustomizable", value, "Customizable"); }
}
///<summary>
///<para>Logical Name: defaultfilter</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("defaultfilter")]
public string DefaultFilter
{
	get { return this.GetPropertyValue<string>("defaultfilter"); }
	set { this.SetPropertyValue("defaultfilter", value, 1073741823, "DefaultFilter"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 256, "Description"); }
}
///<summary>
///<para>Logical Name: filename</para>
///<para>Max Length: 255 characters</para>
///</summary>
[AttributeLogicalNameAttribute("filename")]
public string FileName
{
	get { return this.GetPropertyValue<string>("filename"); }
	set { this.SetPropertyValue("filename", value, 255, "FileName"); }
}
///<summary>
///<para>Logical Name: filesize</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("filesize")]
public int? FileSize_Bytes
{
	get { return this.GetPropertyValue<int?>("filesize"); }
}
///<summary>
///<para>Logical Name: introducedversion</para>
///<para>Max Length: 48 characters</para>
///</summary>
[AttributeLogicalNameAttribute("introducedversion")]
public string IntroducedVersion
{
	get { return this.GetPropertyValue<string>("introducedversion"); }
	set { this.SetPropertyValue("introducedversion", value, 48, "IntroducedVersion"); }
}
///<summary>
///<para>Logical Name: iscustomreport</para>
///<para>True = True</para>
///<para>False = False</para>
///</summary>
[AttributeLogicalNameAttribute("iscustomreport")]
public bool? IsCustomReport
{
	get { return this.GetPropertyValue<bool?>("iscustomreport"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? IsManaged
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: isscheduledreport</para>
///<para>True = True</para>
///<para>False = False</para>
///</summary>
[AttributeLogicalNameAttribute("isscheduledreport")]
public bool? IsScheduledReport
{
	get { return this.GetPropertyValue<bool?>("isscheduledreport"); }
}
///<summary>
///<para>Logical Name: languagecode</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("languagecode")]
public int? Language
{
	get { return this.GetPropertyValue<int?>("languagecode"); }
	set { this.SetPropertyValue("languagecode", (int?)value, (int)0, (int)2147483647, "Language"); }
}
///<summary>
///<para>Logical Name: bodyurl</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("bodyurl")]
public string LinkedReportURL
{
	get { return this.GetPropertyValue<string>("bodyurl"); }
	set { this.SetPropertyValue("bodyurl", value, 200, "LinkedReportURL"); }
}
///<summary>
///<para>Logical Name: mimetype</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("mimetype")]
public string MimeType
{
	get { return this.GetPropertyValue<string>("mimetype"); }
	set { this.SetPropertyValue("mimetype", value, 256, "MimeType"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 425 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 425, "Name"); }
}
///<summary>
///<para>Logical Name: reportnameonsrs</para>
///<para>Max Length: 425 characters</para>
///</summary>
[AttributeLogicalNameAttribute("reportnameonsrs")]
public string NameOnSRS
{
	get { return this.GetPropertyValue<string>("reportnameonsrs"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: parentreportid</para>
///</summary>
[AttributeLogicalNameAttribute("parentreportid")]
public EntityReference ParentReport
{
	get { return this.GetPropertyValue<EntityReference>("parentreportid"); }
	set { this.SetPropertyValue<EntityReference>("parentreportid", value, "ParentReport"); }
}
///<summary>
///<para>Logical Name: queryinfo</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("queryinfo")]
public string QueryInfoStructure
{
	get { return this.GetPropertyValue<string>("queryinfo"); }
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? RecordOverwriteTime
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: reportid</para>
///</summary>
[AttributeLogicalNameAttribute("reportid")]
public Guid ReportId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: reportidunique</para>
///</summary>
[AttributeLogicalNameAttribute("reportidunique")]
public Guid ReportAttribute
{
	get { return this.GetPropertyValue<Guid>("reportidunique"); }
}
///<summary>
///<para>Logical Name: signaturedate</para>
///</summary>
[AttributeLogicalNameAttribute("signaturedate")]
public DateTime? ReportSignatureDate
{
	get { return this.GetPropertyValue<DateTime?>("signaturedate"); }
	set { this.SetPropertyValue<DateTime?>("signaturedate", value, "ReportSignatureDate"); }
}
///<summary>
///<para>Logical Name: signaturemajorversion</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("signaturemajorversion")]
public int? ReportSignatureMajorVersion
{
	get { return this.GetPropertyValue<int?>("signaturemajorversion"); }
	set { this.SetPropertyValue("signaturemajorversion", (int?)value, (int)0, (int)2147483647, "ReportSignatureMajorVersion"); }
}
///<summary>
///<para>Logical Name: signatureminorversion</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("signatureminorversion")]
public int? ReportSignatureMinorVersion
{
	get { return this.GetPropertyValue<int?>("signatureminorversion"); }
	set { this.SetPropertyValue("signatureminorversion", (int?)value, (int)0, (int)2147483647, "ReportSignatureMinorVersion"); }
}
/// <summary>
///Logical Name: reporttypecode
/// </summary>
[AttributeLogicalNameAttribute("reporttypecode")]
public eReportType? ReportType
{
	get
	{
		if (ReportType_OptionSetValue != null) { return (eReportType)ReportType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ReportType_OptionSetValue = new OptionSetValue((int)value); }
		else this.ReportType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: reporttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("reporttypecode")]
public OptionSetValue ReportType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("reporttypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("reporttypecode", value, "ReportType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ReportType_Text(IOrganizationService Service)
{
	return this.ReportType_OptionSetValue.GetOptionSetText(Service, this, "reporttypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ReportType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ReportType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: schedulexml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("schedulexml")]
public string ScheduleDefinitionXML
{
	get { return this.GetPropertyValue<string>("schedulexml"); }
}
///<summary>
///<para>Logical Name: signatureid</para>
///</summary>
[AttributeLogicalNameAttribute("signatureid")]
public Guid Signature
{
	get { return this.GetPropertyValue<Guid>("signatureid"); }
	set { this.SetPropertyValue<Guid>("signatureid", value, "Signature"); }
}
///<summary>
///<para>Logical Name: signaturelcid</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("signaturelcid")]
public int? SignatureLanguageCode
{
	get { return this.GetPropertyValue<int?>("signaturelcid"); }
	set { this.SetPropertyValue("signaturelcid", (int?)value, (int)0, (int)2147483647, "SignatureLanguageCode"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: ispersonal</para>
///<para>True = Individual</para>
///<para>False = Organization</para>
///</summary>
[AttributeLogicalNameAttribute("ispersonal")]
public bool? ViewableBy
{
	get { return this.GetPropertyValue<bool?>("ispersonal"); }
	set { this.SetPropertyValue<bool?>("ispersonal", value, "ViewableBy"); }
}


        /// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Report_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Report_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Report_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Report_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ReplicationBacklog (Target Object Id)</b></para>
/// <para>Schema Name: replicationbacklog_target_report</para>
/// </summary>
public List<ReplicationBacklog> GetReplicationBacklogs_TargetObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReplicationBacklog>(Service, this.Id, "replicationbacklog", "targetobjectid", Columns); }
/// <summary>
/// <para><b>ReplicationBacklog (Target Object Id)</b></para>
/// <para>Schema Name: replicationbacklog_target_report</para>
/// </summary>
public List<ReplicationBacklog> GetReplicationBacklogs_TargetObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReplicationBacklog>(Service, this.Id, "replicationbacklog", "targetobjectid", Columns); }
/// <summary>
/// <para><b>Report (Parent Report)</b></para>
/// <para>Schema Name: report_parent_report</para>
/// </summary>
public List<Report> GetReports_ParentReport (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Report>(Service, this.Id, "report", "parentreportid", Columns); }
/// <summary>
/// <para><b>Report (Parent Report)</b></para>
/// <para>Schema Name: report_parent_report</para>
/// </summary>
public List<Report> GetReports_ParentReport (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Report>(Service, this.Id, "report", "parentreportid", Columns); }
/// <summary>
/// <para><b>ReportRelatedCategory (Report)</b></para>
/// <para>Schema Name: report_reportcategories</para>
/// </summary>
public List<ReportRelatedCategory> GetReportRelatedCategories_Report (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportRelatedCategory>(Service, this.Id, "reportcategory", "reportid", Columns); }
/// <summary>
/// <para><b>ReportRelatedCategory (Report)</b></para>
/// <para>Schema Name: report_reportcategories</para>
/// </summary>
public List<ReportRelatedCategory> GetReportRelatedCategories_Report (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportRelatedCategory>(Service, this.Id, "reportcategory", "reportid", Columns); }
/// <summary>
/// <para><b>ReportRelatedEntity (Report)</b></para>
/// <para>Schema Name: report_reportentities</para>
/// </summary>
public List<ReportRelatedEntity> GetReportRelatedEntities_Report (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportRelatedEntity>(Service, this.Id, "reportentity", "reportid", Columns); }
/// <summary>
/// <para><b>ReportRelatedEntity (Report)</b></para>
/// <para>Schema Name: report_reportentities</para>
/// </summary>
public List<ReportRelatedEntity> GetReportRelatedEntities_Report (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportRelatedEntity>(Service, this.Id, "reportentity", "reportid", Columns); }
/// <summary>
/// <para><b>ReportLink (Main Report)</b></para>
/// <para>Schema Name: report_reportlink</para>
/// </summary>
public List<ReportLink> GetReportLinks_MainReport (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportLink>(Service, this.Id, "reportlink", "reportid", Columns); }
/// <summary>
/// <para><b>ReportLink (Main Report)</b></para>
/// <para>Schema Name: report_reportlink</para>
/// </summary>
public List<ReportLink> GetReportLinks_MainReport (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportLink>(Service, this.Id, "reportlink", "reportid", Columns); }
/// <summary>
/// <para><b>ReportLink (Linked Report)</b></para>
/// <para>Schema Name: report_reportlink_sub</para>
/// </summary>
public List<ReportLink> GetReportLinks_LinkedReport (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportLink>(Service, this.Id, "reportlink", "linkedreportid", Columns); }
/// <summary>
/// <para><b>ReportLink (Linked Report)</b></para>
/// <para>Schema Name: report_reportlink_sub</para>
/// </summary>
public List<ReportLink> GetReportLinks_LinkedReport (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportLink>(Service, this.Id, "reportlink", "linkedreportid", Columns); }
/// <summary>
/// <para><b>ReportVisibility (Report)</b></para>
/// <para>Schema Name: report_reportvisibility</para>
/// </summary>
public List<ReportVisibility> GetReportVisibilities_Report (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportVisibility>(Service, this.Id, "reportvisibility", "reportid", Columns); }
/// <summary>
/// <para><b>ReportVisibility (Report)</b></para>
/// <para>Schema Name: report_reportvisibility</para>
/// </summary>
public List<ReportVisibility> GetReportVisibilities_Report (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ReportVisibility>(Service, this.Id, "reportvisibility", "reportid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Report_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Report_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_report</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_report</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eReportType
{
	///<summary><para>Reporting Services Report</para>
	///<para>Value = 1</para></summary>
	[Description("Reporting Services Report")]
	ReportingServicesReport = 1, 
	///<summary><para>Other Report</para>
	///<para>Value = 2</para></summary>
	[Description("Other Report")]
	OtherReport = 2, 
	///<summary><para>Linked Report</para>
	///<para>Value = 3</para></summary>
	[Description("Linked Report")]
	LinkedReport = 3
}


        public static class Properties
{
	/// <summary><para>parentreportidname</para>
	/// <para>parentreportidname</para></summary>
	public const string ParentReportIdName = "parentreportidname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>Body Binary</para>
	/// <para>bodybinary</para></summary>
	public const string BodyBinary = "bodybinary";
	/// <summary><para>Body Text</para>
	/// <para>originalbodytext</para></summary>
	public const string BodyText = "originalbodytext";
	/// <summary><para>Body Text</para>
	/// <para>bodytext</para></summary>
	public const string BodyText2 = "bodytext";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Crm Version in which the Report is created</para>
	/// <para>createdinmajorversion</para></summary>
	public const string CrmVersionInWhichTheReportIsCreated = "createdinmajorversion";
	/// <summary><para>Custom Report XML</para>
	/// <para>customreportxml</para></summary>
	public const string CustomReportXML = "customreportxml";
	/// <summary><para>Customizable</para>
	/// <para>iscustomizable</para></summary>
	public const string Customizable = "iscustomizable";
	/// <summary><para>Default filter</para>
	/// <para>defaultfilter</para></summary>
	public const string DefaultFilter = "defaultfilter";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>File Name</para>
	/// <para>filename</para></summary>
	public const string FileName = "filename";
	/// <summary><para>File Size (Bytes)</para>
	/// <para>filesize</para></summary>
	public const string FileSize_Bytes = "filesize";
	/// <summary><para>Introduced Version</para>
	/// <para>introducedversion</para></summary>
	public const string IntroducedVersion = "introducedversion";
	/// <summary><para>Is Custom Report</para>
	/// <para>iscustomreport</para></summary>
	public const string IsCustomReport = "iscustomreport";
	/// <summary><para>Is Managed</para>
	/// <para>ismanaged</para></summary>
	public const string IsManaged = "ismanaged";
	/// <summary><para>Is Scheduled Report</para>
	/// <para>isscheduledreport</para></summary>
	public const string IsScheduledReport = "isscheduledreport";
	/// <summary><para>Language</para>
	/// <para>languagecode</para></summary>
	public const string Language = "languagecode";
	/// <summary><para>Linked Report URL</para>
	/// <para>bodyurl</para></summary>
	public const string LinkedReportURL = "bodyurl";
	/// <summary><para>Mime Type</para>
	/// <para>mimetype</para></summary>
	public const string MimeType = "mimetype";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Name on SRS</para>
	/// <para>reportnameonsrs</para></summary>
	public const string NameOnSRS = "reportnameonsrs";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Parent Report</para>
	/// <para>parentreportid</para></summary>
	public const string ParentReport = "parentreportid";
	/// <summary><para>Query Info Structure</para>
	/// <para>queryinfo</para></summary>
	public const string QueryInfoStructure = "queryinfo";
	/// <summary><para>Record Overwrite Time</para>
	/// <para>overwritetime</para></summary>
	public const string RecordOverwriteTime = "overwritetime";
	/// <summary><para>Report</para>
	/// <para>reportid</para></summary>
	public const string ReportId = "reportid";
	/// <summary><para>Report</para>
	/// <para>reportidunique</para></summary>
	public const string ReportAttribute = "reportidunique";
	/// <summary><para>Report Signature Date</para>
	/// <para>signaturedate</para></summary>
	public const string ReportSignatureDate = "signaturedate";
	/// <summary><para>Report Signature Major Version</para>
	/// <para>signaturemajorversion</para></summary>
	public const string ReportSignatureMajorVersion = "signaturemajorversion";
	/// <summary><para>Report Signature Minor Version</para>
	/// <para>signatureminorversion</para></summary>
	public const string ReportSignatureMinorVersion = "signatureminorversion";
	/// <summary><para>Report Type</para>
	/// <para>reporttypecode</para></summary>
	public const string ReportType = "reporttypecode";
	/// <summary><para>Schedule Definition XML</para>
	/// <para>schedulexml</para></summary>
	public const string ScheduleDefinitionXML = "schedulexml";
	/// <summary><para>Signature</para>
	/// <para>signatureid</para></summary>
	public const string Signature = "signatureid";
	/// <summary><para>Signature Language Code</para>
	/// <para>signaturelcid</para></summary>
	public const string SignatureLanguageCode = "signaturelcid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution = "solutionid";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution2 = "supportingsolutionid";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Viewable By</para>
	/// <para>ispersonal</para></summary>
	public const string ViewableBy = "ispersonal";
}

    }
}
