// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("officegraphdocument")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class OfficeGraphDocument : BaseProxyClass
    {
        public new const string LogicalName = "officegraphdocument";
        public const int ObjectTypeCode = 9950;
        public const string PrimaryIdAttribute = "officegraphdocumentid";
        public const string PrimaryNameAttribute = "title";
        
        static OfficeGraphDocument()
        {
            BaseProxyClass.RegisterProxyType(typeof(OfficeGraphDocument), "officegraphdocument");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public OfficeGraphDocument() : base(new Entity("officegraphdocument")) { }
        public OfficeGraphDocument(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<OfficeGraphDocument>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: authornames</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("authornames")]
public string AuthorNames
{
	get { return this.GetPropertyValue<string>("authornames"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public string CreatedBy
{
	get { return this.GetPropertyValue<string>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdtime</para>
///</summary>
[AttributeLogicalNameAttribute("createdtime")]
public DateTime? CreatedTime
{
	get { return this.GetPropertyValue<DateTime?>("createdtime"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: documentid</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("documentid")]
public string DocumentId
{
	get { return this.GetPropertyValue<string>("documentid"); }
	set { this.SetPropertyValue("documentid", value, 100, "DocumentId"); }
}
///<summary>
///<para>Logical Name: documentlastmodifiedby</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("documentlastmodifiedby")]
public string DocumentLastModifiedBy
{
	get { return this.GetPropertyValue<string>("documentlastmodifiedby"); }
}
///<summary>
///<para>Logical Name: documentlastmodifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("documentlastmodifiedon")]
public DateTime? DocumentLastModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("documentlastmodifiedon"); }
}
///<summary>
///<para>Logical Name: documentpreviewmetadata</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("documentpreviewmetadata")]
public string DocumentPreviewMetadata
{
	get { return this.GetPropertyValue<string>("documentpreviewmetadata"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: fileextension</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("fileextension")]
public string FileExtension
{
	get { return this.GetPropertyValue<string>("fileextension"); }
}
///<summary>
///<para>Logical Name: filetype</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("filetype")]
public string FileType
{
	get { return this.GetPropertyValue<string>("filetype"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public string ModifiedBy
{
	get { return this.GetPropertyValue<string>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedtime</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedtime")]
public DateTime? ModifiedTime
{
	get { return this.GetPropertyValue<DateTime?>("modifiedtime"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: officegraphdocumentid</para>
///</summary>
[AttributeLogicalNameAttribute("officegraphdocumentid")]
public Guid OfficeGraphDocumentId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference OrganizationId
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: sitetitle</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("sitetitle")]
public string ParentSiteTitle
{
	get { return this.GetPropertyValue<string>("sitetitle"); }
}
///<summary>
///<para>Logical Name: previewimageurl</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("previewimageurl")]
public string PreviewImageUrl
{
	get { return this.GetPropertyValue<string>("previewimageurl"); }
}
///<summary>
///<para>Logical Name: querytype</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("querytype")]
public int? QueryType
{
	get { return this.GetPropertyValue<int?>("querytype"); }
}
///<summary>
///<para>Logical Name: readurl</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("readurl")]
public string ReadUrl
{
	get { return this.GetPropertyValue<string>("readurl"); }
}
///<summary>
///<para>Logical Name: rank</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("rank")]
public int? RelevancyRankOfTheDocument
{
	get { return this.GetPropertyValue<int?>("rank"); }
}
///<summary>
///<para>Logical Name: secondaryfileextension</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("secondaryfileextension")]
public string SecondaryFileExtension
{
	get { return this.GetPropertyValue<string>("secondaryfileextension"); }
}
///<summary>
///<para>Logical Name: siteurl</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("siteurl")]
public string SiteUrl
{
	get { return this.GetPropertyValue<string>("siteurl"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string Title
{
	get { return this.GetPropertyValue<string>("title"); }
	set { this.SetPropertyValue("title", value, 100, "Title"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: viewcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("viewcount")]
public int? ViewCount
{
	get { return this.GetPropertyValue<int?>("viewcount"); }
}
///<summary>
///<para>Logical Name: weblocationurl</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("weblocationurl")]
public string WebLocationUrl
{
	get { return this.GetPropertyValue<string>("weblocationurl"); }
}


        

        

        

        

        public static class Properties
{
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Author Names</para>
	/// <para>authornames</para></summary>
	public const string AuthorNames = "authornames";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created Time</para>
	/// <para>createdtime</para></summary>
	public const string CreatedTime = "createdtime";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Document Id</para>
	/// <para>documentid</para></summary>
	public const string DocumentId = "documentid";
	/// <summary><para>Document Last Modified By</para>
	/// <para>documentlastmodifiedby</para></summary>
	public const string DocumentLastModifiedBy = "documentlastmodifiedby";
	/// <summary><para>Document Last Modified On</para>
	/// <para>documentlastmodifiedon</para></summary>
	public const string DocumentLastModifiedOn = "documentlastmodifiedon";
	/// <summary><para>document preview metadata</para>
	/// <para>documentpreviewmetadata</para></summary>
	public const string DocumentPreviewMetadata = "documentpreviewmetadata";
	/// <summary><para>ExchangeRate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>File Extension</para>
	/// <para>fileextension</para></summary>
	public const string FileExtension = "fileextension";
	/// <summary><para>File Type</para>
	/// <para>filetype</para></summary>
	public const string FileType = "filetype";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified Time</para>
	/// <para>modifiedtime</para></summary>
	public const string ModifiedTime = "modifiedtime";
	/// <summary><para>OfficeGraphDocument</para>
	/// <para>officegraphdocumentid</para></summary>
	public const string OfficeGraphDocumentId = "officegraphdocumentid";
	/// <summary><para>Organization Id</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>Parent Site Title</para>
	/// <para>sitetitle</para></summary>
	public const string ParentSiteTitle = "sitetitle";
	/// <summary><para>Preview Image Url</para>
	/// <para>previewimageurl</para></summary>
	public const string PreviewImageUrl = "previewimageurl";
	/// <summary><para>Query Type</para>
	/// <para>querytype</para></summary>
	public const string QueryType = "querytype";
	/// <summary><para>Read Url</para>
	/// <para>readurl</para></summary>
	public const string ReadUrl = "readurl";
	/// <summary><para>Relevancy Rank of the Document</para>
	/// <para>rank</para></summary>
	public const string RelevancyRankOfTheDocument = "rank";
	/// <summary><para>Secondary File Extension</para>
	/// <para>secondaryfileextension</para></summary>
	public const string SecondaryFileExtension = "secondaryfileextension";
	/// <summary><para>Site Url</para>
	/// <para>siteurl</para></summary>
	public const string SiteUrl = "siteurl";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Title</para>
	/// <para>title</para></summary>
	public const string Title = "title";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>View Count</para>
	/// <para>viewcount</para></summary>
	public const string ViewCount = "viewcount";
	/// <summary><para>Web Location Url</para>
	/// <para>weblocationurl</para></summary>
	public const string WebLocationUrl = "weblocationurl";
}

    }
}
