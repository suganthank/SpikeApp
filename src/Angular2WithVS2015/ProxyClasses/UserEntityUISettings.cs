// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("userentityuisettings")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class UserEntityUISettings : BaseProxyClass
    {
        public new const string LogicalName = "userentityuisettings";
        public const int ObjectTypeCode = 2500;
        public const string PrimaryIdAttribute = "userentityuisettingsid";
        public const string PrimaryNameAttribute = "";
        
        static UserEntityUISettings()
        {
            BaseProxyClass.RegisterProxyType(typeof(UserEntityUISettings), "userentityuisettings");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public UserEntityUISettings() : base(new Entity("userentityuisettings")) { }
        public UserEntityUISettings(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<UserEntityUISettings>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: userentityuisettingsid</para>
///</summary>
[AttributeLogicalNameAttribute("userentityuisettingsid")]
public Guid UserEntityUISettingsId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: objecttypecode</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("objecttypecode")]
public int? ObjectTypeCode2
{
	get { return this.GetPropertyValue<int?>("objecttypecode"); }
	set { this.SetPropertyValue("objecttypecode", (int?)value, (int)0, (int)2147483647, "ObjectTypeCode2"); }
}
///<summary>
///<para>Logical Name: readingpanexml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("readingpanexml")]
public string ConditionalFormatting
{
	get { return this.GetPropertyValue<string>("readingpanexml"); }
	set { this.SetPropertyValue("readingpanexml", value, 1073741823, "ConditionalFormatting"); }
}
///<summary>
///<para>Logical Name: lastviewedformxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lastviewedformxml")]
public string LastViewedFormXml
{
	get { return this.GetPropertyValue<string>("lastviewedformxml"); }
	set { this.SetPropertyValue("lastviewedformxml", value, 1073741823, "LastViewedFormXml"); }
}
///<summary>
///<para>Logical Name: insertintoemailmruxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("insertintoemailmruxml")]
public string MostRecentlyInsertedIntoEmailXml
{
	get { return this.GetPropertyValue<string>("insertintoemailmruxml"); }
	set { this.SetPropertyValue("insertintoemailmruxml", value, 1073741823, "MostRecentlyInsertedIntoEmailXml"); }
}
///<summary>
///<para>Logical Name: lookupmruxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("lookupmruxml")]
public string MostRecentlyUsedXml
{
	get { return this.GetPropertyValue<string>("lookupmruxml"); }
	set { this.SetPropertyValue("lookupmruxml", value, 1073741823, "MostRecentlyUsedXml"); }
}
///<summary>
///<para>Logical Name: mruxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("mruxml")]
public string MostRecentlyUsedXml2
{
	get { return this.GetPropertyValue<string>("mruxml"); }
	set { this.SetPropertyValue("mruxml", value, 1073741823, "MostRecentlyUsedXml2"); }
}
///<summary>
///<para>Logical Name: recentlyviewedxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recentlyviewedxml")]
public string MostRecentlyViewedObjects
{
	get { return this.GetPropertyValue<string>("recentlyviewedxml"); }
	set { this.SetPropertyValue("recentlyviewedxml", value, 1073741823, "MostRecentlyViewedObjects"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: showinaddressbook</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("showinaddressbook")]
public bool? ShowInAddressBook
{
	get { return this.GetPropertyValue<bool?>("showinaddressbook"); }
	set { this.SetPropertyValue<bool?>("showinaddressbook", value, "ShowInAddressBook"); }
}
///<summary>
///<para>Logical Name: taborderxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("taborderxml")]
public string TabOrderXml
{
	get { return this.GetPropertyValue<string>("taborderxml"); }
	set { this.SetPropertyValue("taborderxml", value, 1073741823, "TabOrderXml"); }
}


        /// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_userentityuisettings</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_userentityuisettings</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        

        public static class Properties
{
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>userentityuisettingsid</para>
	/// <para>userentityuisettingsid</para></summary>
	public const string UserEntityUISettingsId = "userentityuisettingsid";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>objecttypecode</para>
	/// <para>objecttypecode</para></summary>
	public const string ObjectTypeCode2 = "objecttypecode";
	/// <summary><para>Conditional formatting</para>
	/// <para>readingpanexml</para></summary>
	public const string ConditionalFormatting = "readingpanexml";
	/// <summary><para>Last Viewed Form Xml</para>
	/// <para>lastviewedformxml</para></summary>
	public const string LastViewedFormXml = "lastviewedformxml";
	/// <summary><para>Most Recently Inserted Into Email Xml</para>
	/// <para>insertintoemailmruxml</para></summary>
	public const string MostRecentlyInsertedIntoEmailXml = "insertintoemailmruxml";
	/// <summary><para>Most Recently Used Xml</para>
	/// <para>lookupmruxml</para></summary>
	public const string MostRecentlyUsedXml = "lookupmruxml";
	/// <summary><para>Most Recently Used Xml</para>
	/// <para>mruxml</para></summary>
	public const string MostRecentlyUsedXml2 = "mruxml";
	/// <summary><para>Most Recently Viewed Objects</para>
	/// <para>recentlyviewedxml</para></summary>
	public const string MostRecentlyViewedObjects = "recentlyviewedxml";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Show In Address Book</para>
	/// <para>showinaddressbook</para></summary>
	public const string ShowInAddressBook = "showinaddressbook";
	/// <summary><para>Tab Order Xml</para>
	/// <para>taborderxml</para></summary>
	public const string TabOrderXml = "taborderxml";
}

    }
}
