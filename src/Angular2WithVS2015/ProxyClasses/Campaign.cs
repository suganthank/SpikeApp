// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("campaign")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Campaign : BaseProxyClass
    {
        public new const string LogicalName = "campaign";
        public const int ObjectTypeCode = 4400;
        public const string PrimaryIdAttribute = "campaignid";
        public const string PrimaryNameAttribute = "name";
        
        static Campaign()
        {
            BaseProxyClass.RegisterProxyType(typeof(Campaign), "campaign");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Campaign() : base(new Entity("campaign")) { }
        public Campaign(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Campaign>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: entityimage_timestamp</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_timestamp")]
public int? EntityImage_Timestamp
{
	get { return this.GetPropertyValue<int?>("entityimage_timestamp"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: pricelistname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("pricelistname")]
public string PriceListName
{
	get { return this.GetPropertyValue<string>("pricelistname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: entityimage_url</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_url")]
public string EntityImage_URL
{
	get { return this.GetPropertyValue<string>("entityimage_url"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: actualend</para>
///</summary>
[AttributeLogicalNameAttribute("actualend")]
public DateTime? ActualEndDate
{
	get { return this.GetPropertyValue<DateTime?>("actualend"); }
	set { this.SetPropertyValue<DateTime?>("actualend", value, "ActualEndDate"); }
}
///<summary>
///<para>Logical Name: actualstart</para>
///</summary>
[AttributeLogicalNameAttribute("actualstart")]
public DateTime? ActualStartDate
{
	get { return this.GetPropertyValue<DateTime?>("actualstart"); }
	set { this.SetPropertyValue<DateTime?>("actualstart", value, "ActualStartDate"); }
}
///<summary>
///<para>Logical Name: budgetedcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? BudgetAllocated
{
	get
	{
		if (BudgetAllocatedMoney != null) { return BudgetAllocatedMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.BudgetAllocatedMoney = new Money(value.Value); }
		else this.BudgetAllocatedMoney = null;
	}
}
///<summary>
///<para>Logical Name: budgetedcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("budgetedcost")]
public Money BudgetAllocatedMoney
{
	get { return this.GetPropertyValue<Money>("budgetedcost"); }
	set { this.SetPropertyValue("budgetedcost", (Money)value, (decimal)0, (decimal)1000000000000, "BudgetAllocatedMoney"); }
}
///<summary>
///<para>Logical Name: budgetedcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? BudgetAllocated_Base
{
	get
	{
		if (BudgetAllocated_BaseMoney != null) { return BudgetAllocated_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: budgetedcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("budgetedcost_base")]
public Money BudgetAllocated_BaseMoney
{
	get { return this.GetPropertyValue<Money>("budgetedcost_base"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: campaignid</para>
///</summary>
[AttributeLogicalNameAttribute("campaignid")]
public Guid CampaignId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: codename</para>
///<para>Max Length: 32 characters</para>
///</summary>
[AttributeLogicalNameAttribute("codename")]
public string CampaignCode
{
	get { return this.GetPropertyValue<string>("codename"); }
	set { this.SetPropertyValue("codename", value, 32, "CampaignCode"); }
}
/// <summary>
///Logical Name: typecode
/// </summary>
[AttributeLogicalNameAttribute("typecode")]
public eCampaignType? CampaignType
{
	get
	{
		if (CampaignType_OptionSetValue != null) { return (eCampaignType)CampaignType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CampaignType_OptionSetValue = new OptionSetValue((int)value); }
		else this.CampaignType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: typecode</para>
///</summary>
[AttributeLogicalNameAttribute("typecode")]
public OptionSetValue CampaignType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("typecode"); }
	set { this.SetPropertyValue<OptionSetValue>("typecode", value, "CampaignType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string CampaignType_Text(IOrganizationService Service)
{
	return this.CampaignType_OptionSetValue.GetOptionSetText(Service, this, "typecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string CampaignType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.CampaignType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: entityimageid</para>
///</summary>
[AttributeLogicalNameAttribute("entityimageid")]
public Guid EntityImageId
{
	get { return this.GetPropertyValue<Guid>("entityimageid"); }
}
///<summary>
///<para>Logical Name: expectedrevenue</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? EstimatedRevenue
{
	get
	{
		if (EstimatedRevenueMoney != null) { return EstimatedRevenueMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EstimatedRevenueMoney = new Money(value.Value); }
		else this.EstimatedRevenueMoney = null;
	}
}
///<summary>
///<para>Logical Name: expectedrevenue</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("expectedrevenue")]
public Money EstimatedRevenueMoney
{
	get { return this.GetPropertyValue<Money>("expectedrevenue"); }
	set { this.SetPropertyValue("expectedrevenue", (Money)value, (decimal)0, (decimal)1000000000000, "EstimatedRevenueMoney"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: expectedresponse</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///</summary>
[AttributeLogicalNameAttribute("expectedresponse")]
public int? ExpectedResponsePercentage
{
	get { return this.GetPropertyValue<int?>("expectedresponse"); }
	set { this.SetPropertyValue("expectedresponse", (int?)value, (int)0, (int)100, "ExpectedResponsePercentage"); }
}
///<summary>
///<para>Logical Name: expectedrevenue_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ExpectedRevenue_Base
{
	get
	{
		if (ExpectedRevenue_BaseMoney != null) { return ExpectedRevenue_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: expectedrevenue_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("expectedrevenue_base")]
public Money ExpectedRevenue_BaseMoney
{
	get { return this.GetPropertyValue<Money>("expectedrevenue_base"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: message</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("message")]
public string Message
{
	get { return this.GetPropertyValue<string>("message"); }
	set { this.SetPropertyValue("message", value, 256, "Message"); }
}
///<summary>
///<para>Logical Name: othercost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? MiscellaneousCosts
{
	get
	{
		if (MiscellaneousCostsMoney != null) { return MiscellaneousCostsMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.MiscellaneousCostsMoney = new Money(value.Value); }
		else this.MiscellaneousCostsMoney = null;
	}
}
///<summary>
///<para>Logical Name: othercost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("othercost")]
public Money MiscellaneousCostsMoney
{
	get { return this.GetPropertyValue<Money>("othercost"); }
	set { this.SetPropertyValue("othercost", (Money)value, (decimal)0, (decimal)1000000000000, "MiscellaneousCostsMoney"); }
}
///<summary>
///<para>Logical Name: othercost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? MiscellaneousCosts_Base
{
	get
	{
		if (MiscellaneousCosts_BaseMoney != null) { return MiscellaneousCosts_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: othercost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("othercost_base")]
public Money MiscellaneousCosts_BaseMoney
{
	get { return this.GetPropertyValue<Money>("othercost_base"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 128 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 128, "Name"); }
}
///<summary>
///<para>Logical Name: objective</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("objective")]
public string Offer
{
	get { return this.GetPropertyValue<string>("objective"); }
	set { this.SetPropertyValue("objective", value, 2000, "Offer"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: pricelistid</para>
///</summary>
[AttributeLogicalNameAttribute("pricelistid")]
public EntityReference PriceList
{
	get { return this.GetPropertyValue<EntityReference>("pricelistid"); }
	set { this.SetPropertyValue<EntityReference>("pricelistid", value, "PriceList"); }
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public Guid Process
{
	get { return this.GetPropertyValue<Guid>("processid"); }
	set { this.SetPropertyValue<Guid>("processid", value, "Process"); }
}
///<summary>
///<para>Logical Name: stageid</para>
///</summary>
[AttributeLogicalNameAttribute("stageid")]
public Guid ProcessStage
{
	get { return this.GetPropertyValue<Guid>("stageid"); }
	set { this.SetPropertyValue<Guid>("stageid", value, "ProcessStage"); }
}
///<summary>
///<para>Logical Name: promotioncodename</para>
///<para>Max Length: 128 characters</para>
///</summary>
[AttributeLogicalNameAttribute("promotioncodename")]
public string PromotionCode
{
	get { return this.GetPropertyValue<string>("promotioncodename"); }
	set { this.SetPropertyValue("promotioncodename", value, 128, "PromotionCode"); }
}
///<summary>
///<para>Logical Name: proposedend</para>
///</summary>
[AttributeLogicalNameAttribute("proposedend")]
public DateTime? ProposedEndDate
{
	get { return this.GetPropertyValue<DateTime?>("proposedend"); }
	set { this.SetPropertyValue<DateTime?>("proposedend", value, "ProposedEndDate"); }
}
///<summary>
///<para>Logical Name: proposedstart</para>
///</summary>
[AttributeLogicalNameAttribute("proposedstart")]
public DateTime? ProposedStartDate
{
	get { return this.GetPropertyValue<DateTime?>("proposedstart"); }
	set { this.SetPropertyValue<DateTime?>("proposedstart", value, "ProposedStartDate"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: istemplate</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("istemplate")]
public bool? Template
{
	get { return this.GetPropertyValue<bool?>("istemplate"); }
	set { this.SetPropertyValue<bool?>("istemplate", value, "Template"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: totalactualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalCostOfCampaign
{
	get
	{
		if (TotalCostOfCampaignMoney != null) { return TotalCostOfCampaignMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totalactualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("totalactualcost")]
public Money TotalCostOfCampaignMoney
{
	get { return this.GetPropertyValue<Money>("totalactualcost"); }
}
///<summary>
///<para>Logical Name: totalactualcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? TotalCostOfCampaign_Base
{
	get
	{
		if (TotalCostOfCampaign_BaseMoney != null) { return TotalCostOfCampaign_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totalactualcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("totalactualcost_base")]
public Money TotalCostOfCampaign_BaseMoney
{
	get { return this.GetPropertyValue<Money>("totalactualcost_base"); }
}
///<summary>
///<para>Logical Name: totalcampaignactivityactualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? TotalCostOfCampaignActivities
{
	get
	{
		if (TotalCostOfCampaignActivitiesMoney != null) { return TotalCostOfCampaignActivitiesMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totalcampaignactivityactualcost</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("totalcampaignactivityactualcost")]
public Money TotalCostOfCampaignActivitiesMoney
{
	get { return this.GetPropertyValue<Money>("totalcampaignactivityactualcost"); }
}
///<summary>
///<para>Logical Name: totalcampaignactivityactualcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? TotalCostOfCampaignActivities_Base
{
	get
	{
		if (TotalCostOfCampaignActivities_BaseMoney != null) { return TotalCostOfCampaignActivities_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: totalcampaignactivityactualcost_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("totalcampaignactivityactualcost_base")]
public Money TotalCostOfCampaignActivities_BaseMoney
{
	get { return this.GetPropertyValue<Money>("totalcampaignactivityactualcost_base"); }
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string TraversedPath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "TraversedPath"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>ActivityParty (Party)</b></para>
/// <para>Schema Name: campaign_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Party (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>ActivityParty (Party)</b></para>
/// <para>Schema Name: campaign_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Party (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: Campaign_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Activity (Regarding)</b></para>
/// <para>Schema Name: Campaign_ActivityPointers</para>
/// </summary>
public List<Activity> GetActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Activity>(Service, this.Id, "activitypointer", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Campaign_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Campaign_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: Campaign_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Appointment (Regarding)</b></para>
/// <para>Schema Name: Campaign_Appointments</para>
/// </summary>
public List<Appointment> GetAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Campaign_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Campaign_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Campaign_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Campaign_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>CampaignActivity (Parent Campaign)</b></para>
/// <para>Schema Name: Campaign_CampaignActivities</para>
/// </summary>
public List<CampaignActivity> GetCampaignActivities_ParentCampaign (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CampaignActivity>(Service, this.Id, "campaignactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>CampaignActivity (Parent Campaign)</b></para>
/// <para>Schema Name: Campaign_CampaignActivities</para>
/// </summary>
public List<CampaignActivity> GetCampaignActivities_ParentCampaign (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CampaignActivity>(Service, this.Id, "campaignactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>CampaignResponse (Parent Campaign)</b></para>
/// <para>Schema Name: Campaign_CampaignResponses</para>
/// </summary>
public List<CampaignResponse> GetCampaignResponses_ParentCampaign (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CampaignResponse>(Service, this.Id, "campaignresponse", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>CampaignResponse (Parent Campaign)</b></para>
/// <para>Schema Name: Campaign_CampaignResponses</para>
/// </summary>
public List<CampaignResponse> GetCampaignResponses_ParentCampaign (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CampaignResponse>(Service, this.Id, "campaignresponse", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: campaign_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: campaign_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: campaign_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: campaign_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Campaign_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: Campaign_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Campaign_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: Campaign_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: Campaign_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Email (Regarding)</b></para>
/// <para>Schema Name: Campaign_Emails</para>
/// </summary>
public List<Email> GetEmailMessages_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Email>(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: Campaign_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Fax (Regarding)</b></para>
/// <para>Schema Name: Campaign_Faxes</para>
/// </summary>
public List<Fax> GetFaxes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Fax>(Service, this.Id, "fax", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Lead (Source Campaign)</b></para>
/// <para>Schema Name: campaign_leads</para>
/// </summary>
public List<Lead> GetLeads_SourceCampaign (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Lead>(Service, this.Id, "lead", "campaignid", Columns); }
/// <summary>
/// <para><b>Lead (Source Campaign)</b></para>
/// <para>Schema Name: campaign_leads</para>
/// </summary>
public List<Lead> GetLeads_SourceCampaign (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Lead>(Service, this.Id, "lead", "campaignid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: Campaign_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Letter (Regarding)</b></para>
/// <para>Schema Name: Campaign_Letters</para>
/// </summary>
public List<Letter> GetLetters_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Letter>(Service, this.Id, "letter", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: Campaign_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>MailboxAutoTrackingFolder (Regarding Object Id)</b></para>
/// <para>Schema Name: Campaign_MailboxTrackingFolder</para>
/// </summary>
public List<MailboxAutoTrackingFolder> GetMailboxAutoTrackingFolders_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<MailboxAutoTrackingFolder>(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: campaign_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Approval (Regarding)</b></para>
/// <para>Schema Name: campaign_msdyn_approvals</para>
/// </summary>
public List<Approval> GetApprovals_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Approval>(Service, this.Id, "msdyn_approval", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: campaign_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BookingAlert (Regarding)</b></para>
/// <para>Schema Name: campaign_msdyn_bookingalerts</para>
/// </summary>
public List<BookingAlert> GetBookingAlerts_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BookingAlert>(Service, this.Id, "msdyn_bookingalert", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Opportunity (Source Campaign)</b></para>
/// <para>Schema Name: campaign_opportunities</para>
/// </summary>
public List<Opportunity> GetOpportunities_SourceCampaign (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Opportunity>(Service, this.Id, "opportunity", "campaignid", Columns); }
/// <summary>
/// <para><b>Opportunity (Source Campaign)</b></para>
/// <para>Schema Name: campaign_opportunities</para>
/// </summary>
public List<Opportunity> GetOpportunities_SourceCampaign (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Opportunity>(Service, this.Id, "opportunity", "campaignid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: Campaign_Phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PhoneCall (Regarding)</b></para>
/// <para>Schema Name: Campaign_Phonecalls</para>
/// </summary>
public List<PhoneCall> GetPhoneCalls_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PhoneCall>(Service, this.Id, "phonecall", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: campaign_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: campaign_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Campaign_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: Campaign_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Quote (Source Campaign)</b></para>
/// <para>Schema Name: campaign_quotes</para>
/// </summary>
public List<Quote> GetQuotes_SourceCampaign (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Quote>(Service, this.Id, "quote", "campaignid", Columns); }
/// <summary>
/// <para><b>Quote (Source Campaign)</b></para>
/// <para>Schema Name: campaign_quotes</para>
/// </summary>
public List<Quote> GetQuotes_SourceCampaign (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Quote>(Service, this.Id, "quote", "campaignid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: Campaign_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Regarding)</b></para>
/// <para>Schema Name: Campaign_RecurringAppointmentMasters</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Order (Source Campaign)</b></para>
/// <para>Schema Name: campaign_orders</para>
/// </summary>
public List<Order> GetOrders_SourceCampaign (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Order>(Service, this.Id, "salesorder", "campaignid", Columns); }
/// <summary>
/// <para><b>Order (Source Campaign)</b></para>
/// <para>Schema Name: campaign_orders</para>
/// </summary>
public List<Order> GetOrders_SourceCampaign (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Order>(Service, this.Id, "salesorder", "campaignid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Regarding)</b></para>
/// <para>Schema Name: Campaign_ServiceAppointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ServiceActivity (Regarding)</b></para>
/// <para>Schema Name: Campaign_ServiceAppointments</para>
/// </summary>
public List<ServiceActivity> GetServiceActivities_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ServiceActivity>(Service, this.Id, "serviceappointment", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Campaign_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: Campaign_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: Campaign_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Task (Regarding)</b></para>
/// <para>Schema Name: Campaign_Tasks</para>
/// </summary>
public List<Task> GetTasks_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Task>(Service, this.Id, "task", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_campaign</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_campaign</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>Product</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignproduct_association</para>
/// </summary>
public List<Product> GetProducts (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Product>(Service, this, "campaign", "campaignid", "product", "productid", "campaignitem", "campaignid", "entityid", Columns); }
public List<Product> GetProducts (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Product>(Service, this, "campaign", "campaignid", "product", "productid", "campaignitem", "campaignid", "entityid", Columns); }
public void RelateProducts (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignproduct_association", Items); }
public void RelateProducts (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignproduct_association", Items); }
public void UnRelateProducts (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignproduct_association", Items); }
public void UnRelateProducts (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignproduct_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Campaign</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaigncampaign_association</para>
/// </summary>
public List<Campaign> GetCampaigns (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaign", "campaignid", "campaign", "campaignid", "campaignitem", "campaignid", "entityid", Columns); }
public List<Campaign> GetCampaigns (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaign", "campaignid", "campaign", "campaignid", "campaignitem", "campaignid", "entityid", Columns); }
public void RelateCampaigns (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaigncampaign_association", Items); }
public void RelateCampaigns (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaigncampaign_association", Items); }
public void UnRelateCampaigns (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaigncampaign_association", Items); }
public void UnRelateCampaigns (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaigncampaign_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Sales Literature</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignsalesliterature_association</para>
/// </summary>
public List<SalesLiterature> GetSalesLiterature (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<SalesLiterature>(Service, this, "campaign", "campaignid", "salesliterature", "salesliteratureid", "campaignitem", "campaignid", "entityid", Columns); }
public List<SalesLiterature> GetSalesLiterature (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<SalesLiterature>(Service, this, "campaign", "campaignid", "salesliterature", "salesliteratureid", "campaignitem", "campaignid", "entityid", Columns); }
public void RelateSalesLiterature (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignsalesliterature_association", Items); }
public void RelateSalesLiterature (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignsalesliterature_association", Items); }
public void UnRelateSalesLiterature (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignsalesliterature_association", Items); }
public void UnRelateSalesLiterature (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignsalesliterature_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Marketing List</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignlist_association</para>
/// </summary>
public List<MarketingList> GetMarketingLists (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<MarketingList>(Service, this, "campaign", "campaignid", "list", "listid", "campaignitem", "campaignid", "entityid", Columns); }
public List<MarketingList> GetMarketingLists (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<MarketingList>(Service, this, "campaign", "campaignid", "list", "listid", "campaignitem", "campaignid", "entityid", Columns); }
public void RelateMarketingLists (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignlist_association", Items); }
public void RelateMarketingLists (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignlist_association", Items); }
public void UnRelateMarketingLists (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignlist_association", Items); }
public void UnRelateMarketingLists (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignlist_association", Items); }


        
        /// <summary>
        /// Adds an item to a campaign.
        /// </summary>
        /// <param name="Service">Organization Service</param>
        /// <param name="Item">Item to add to the Campaign</param>
        /// <returns></returns>
        public Guid AddItem(IOrganizationService Service, EntityReference Item)
        {
            AddItemCampaignRequest Request = new AddItemCampaignRequest() { CampaignId = this.Id, EntityId = Item.Id, EntityName = Item.LogicalName };
            return ((AddItemCampaignResponse)Service.Execute(Request)).CampaignItemId;
        }


        public enum eCampaignType
{
	///<summary><para>Advertisement</para>
	///<para>Value = 1</para></summary>
	[Description("Advertisement")]
	Advertisement = 1, 
	///<summary><para>Direct Marketing</para>
	///<para>Value = 2</para></summary>
	[Description("Direct Marketing")]
	DirectMarketing = 2, 
	///<summary><para>Event</para>
	///<para>Value = 3</para></summary>
	[Description("Event")]
	@Event = 3, 
	///<summary><para>Co-branding</para>
	///<para>Value = 4</para></summary>
	[Description("Co-branding")]
	Co_branding = 4, 
	///<summary><para>Other</para>
	///<para>Value = 5</para></summary>
	[Description("Other")]
	Other = 5
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Proposed</para>
	///<para>Value = 0</para></summary>
	[Description("Proposed")]
	Proposed_Active = 0, 
	///<summary><para>Ready To Launch</para>
	///<para>Value = 1</para></summary>
	[Description("Ready To Launch")]
	ReadyToLaunch_Active = 1, 
	///<summary><para>Launched</para>
	///<para>Value = 2</para></summary>
	[Description("Launched")]
	Launched_Active = 2, 
	///<summary><para>Completed</para>
	///<para>Value = 3</para></summary>
	[Description("Completed")]
	Completed_Active = 3, 
	///<summary><para>Canceled</para>
	///<para>Value = 4</para></summary>
	[Description("Canceled")]
	Canceled_Active = 4, 
	///<summary><para>Suspended</para>
	///<para>Value = 5</para></summary>
	[Description("Suspended")]
	Suspended_Active = 5, 
	///<summary><para>Inactive</para>
	///<para>Value = 6</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 6
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>entityimage_timestamp</para>
	/// <para>entityimage_timestamp</para></summary>
	public const string EntityImage_Timestamp = "entityimage_timestamp";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>pricelistname</para>
	/// <para>pricelistname</para></summary>
	public const string PriceListName = "pricelistname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>entityimage_url</para>
	/// <para>entityimage_url</para></summary>
	public const string EntityImage_URL = "entityimage_url";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>Actual End Date</para>
	/// <para>actualend</para></summary>
	public const string ActualEndDate = "actualend";
	/// <summary><para>Actual Start Date</para>
	/// <para>actualstart</para></summary>
	public const string ActualStartDate = "actualstart";
	/// <summary><para>Budget Allocated</para>
	/// <para>budgetedcost</para></summary>
	public const string BudgetAllocated = "budgetedcost";
	/// <summary><para>Budget Allocated (Base)</para>
	/// <para>budgetedcost_base</para></summary>
	public const string BudgetAllocated_Base = "budgetedcost_base";
	/// <summary><para>Campaign</para>
	/// <para>campaignid</para></summary>
	public const string CampaignId = "campaignid";
	/// <summary><para>Campaign Code</para>
	/// <para>codename</para></summary>
	public const string CampaignCode = "codename";
	/// <summary><para>Campaign Type</para>
	/// <para>typecode</para></summary>
	public const string CampaignType = "typecode";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Entity Image Id</para>
	/// <para>entityimageid</para></summary>
	public const string EntityImageId = "entityimageid";
	/// <summary><para>Estimated Revenue</para>
	/// <para>expectedrevenue</para></summary>
	public const string EstimatedRevenue = "expectedrevenue";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Expected Response Percentage</para>
	/// <para>expectedresponse</para></summary>
	public const string ExpectedResponsePercentage = "expectedresponse";
	/// <summary><para>Expected Revenue (Base)</para>
	/// <para>expectedrevenue_base</para></summary>
	public const string ExpectedRevenue_Base = "expectedrevenue_base";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Message</para>
	/// <para>message</para></summary>
	public const string Message = "message";
	/// <summary><para>Miscellaneous Costs</para>
	/// <para>othercost</para></summary>
	public const string MiscellaneousCosts = "othercost";
	/// <summary><para>Miscellaneous Costs (Base)</para>
	/// <para>othercost_base</para></summary>
	public const string MiscellaneousCosts_Base = "othercost_base";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Offer</para>
	/// <para>objective</para></summary>
	public const string Offer = "objective";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Price List</para>
	/// <para>pricelistid</para></summary>
	public const string PriceList = "pricelistid";
	/// <summary><para>Process</para>
	/// <para>processid</para></summary>
	public const string Process = "processid";
	/// <summary><para>Process Stage</para>
	/// <para>stageid</para></summary>
	public const string ProcessStage = "stageid";
	/// <summary><para>Promotion Code</para>
	/// <para>promotioncodename</para></summary>
	public const string PromotionCode = "promotioncodename";
	/// <summary><para>Proposed End Date</para>
	/// <para>proposedend</para></summary>
	public const string ProposedEndDate = "proposedend";
	/// <summary><para>Proposed Start Date</para>
	/// <para>proposedstart</para></summary>
	public const string ProposedStartDate = "proposedstart";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Template</para>
	/// <para>istemplate</para></summary>
	public const string Template = "istemplate";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Total Cost of Campaign</para>
	/// <para>totalactualcost</para></summary>
	public const string TotalCostOfCampaign = "totalactualcost";
	/// <summary><para>Total Cost of Campaign (Base)</para>
	/// <para>totalactualcost_base</para></summary>
	public const string TotalCostOfCampaign_Base = "totalactualcost_base";
	/// <summary><para>Total Cost of Campaign Activities</para>
	/// <para>totalcampaignactivityactualcost</para></summary>
	public const string TotalCostOfCampaignActivities = "totalcampaignactivityactualcost";
	/// <summary><para>Total Cost of Campaign Activities (Base)</para>
	/// <para>totalcampaignactivityactualcost_base</para></summary>
	public const string TotalCostOfCampaignActivities_Base = "totalcampaignactivityactualcost_base";
	/// <summary><para>Traversed Path</para>
	/// <para>traversedpath</para></summary>
	public const string TraversedPath = "traversedpath";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
