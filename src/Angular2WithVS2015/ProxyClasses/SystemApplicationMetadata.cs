// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("systemapplicationmetadata")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class SystemApplicationMetadata : BaseProxyClass
    {
        public new const string LogicalName = "systemapplicationmetadata";
        public const int ObjectTypeCode = 7000;
        public const string PrimaryIdAttribute = "systemapplicationmetadataid";
        public const string PrimaryNameAttribute = "";
        
        static SystemApplicationMetadata()
        {
            BaseProxyClass.RegisterProxyType(typeof(SystemApplicationMetadata), "systemapplicationmetadata");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public SystemApplicationMetadata() : base(new Entity("systemapplicationmetadata")) { }
        public SystemApplicationMetadata(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<SystemApplicationMetadata>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: data</para>
///<para>Max Length: 500000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("data")]
public string Data
{
	get { return this.GetPropertyValue<string>("data"); }
	set { this.SetPropertyValue("data", value, 500000, "Data"); }
}
///<summary>
///<para>Logical Name: dependency</para>
///<para>Max Length: 500000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("dependency")]
public string Dependency
{
	get { return this.GetPropertyValue<string>("dependency"); }
	set { this.SetPropertyValue("dependency", value, 500000, "Dependency"); }
}
///<summary>
///<para>Logical Name: displayname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("displayname")]
public string DisplayName
{
	get { return this.GetPropertyValue<string>("displayname"); }
	set { this.SetPropertyValue("displayname", value, 100, "DisplayName"); }
}
///<summary>
///<para>Logical Name: associatedentitylogicalname</para>
///<para>Max Length: 64 characters</para>
///</summary>
[AttributeLogicalNameAttribute("associatedentitylogicalname")]
public string ForInternalUseOnly
{
	get { return this.GetPropertyValue<string>("associatedentitylogicalname"); }
	set { this.SetPropertyValue("associatedentitylogicalname", value, 64, "ForInternalUseOnly"); }
}
///<summary>
///<para>Logical Name: formfactor</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("formfactor")]
public int? FormFactor
{
	get { return this.GetPropertyValue<int?>("formfactor"); }
	set { this.SetPropertyValue("formfactor", (int?)value, (int)-2147483648, (int)2147483647, "FormFactor"); }
}
///<summary>
///<para>Logical Name: isdefault</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isdefault")]
public bool? IsDefault
{
	get { return this.GetPropertyValue<bool?>("isdefault"); }
	set { this.SetPropertyValue<bool?>("isdefault", value, "IsDefault"); }
}
///<summary>
///<para>Logical Name: lcid</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 10000</para>
///</summary>
[AttributeLogicalNameAttribute("lcid")]
public int? LCID
{
	get { return this.GetPropertyValue<int?>("lcid"); }
	set { this.SetPropertyValue("lcid", (int?)value, (int)0, (int)10000, "LCID"); }
}
///<summary>
///<para>Logical Name: metadatasubtype</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("metadatasubtype")]
public int? MetadataSubtype
{
	get { return this.GetPropertyValue<int?>("metadatasubtype"); }
	set { this.SetPropertyValue("metadatasubtype", (int?)value, (int)-2147483648, (int)2147483647, "MetadataSubtype"); }
}
///<summary>
///<para>Logical Name: metadatatype</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("metadatatype")]
public int? MetadataType
{
	get { return this.GetPropertyValue<int?>("metadatatype"); }
	set { this.SetPropertyValue("metadatatype", (int?)value, (int)-2147483648, (int)2147483647, "MetadataType"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference OrganizationId
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: sourceid</para>
///<para>Max Length: 300 characters</para>
///</summary>
[AttributeLogicalNameAttribute("sourceid")]
public string SourceId
{
	get { return this.GetPropertyValue<string>("sourceid"); }
	set { this.SetPropertyValue("sourceid", value, 300, "SourceId"); }
}
///<summary>
///<para>Logical Name: state</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("state")]
public int? StateOfTheRecord
{
	get { return this.GetPropertyValue<int?>("state"); }
	set { this.SetPropertyValue("state", (int?)value, (int)-2147483648, (int)2147483647, "StateOfTheRecord"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: systemapplicationmetadataid</para>
///</summary>
[AttributeLogicalNameAttribute("systemapplicationmetadataid")]
public Guid SystemApplicationMetadataId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: version</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("version")]
public string Version
{
	get { return this.GetPropertyValue<string>("version"); }
	set { this.SetPropertyValue("version", value, 100, "Version"); }
}


        

        

        

        

        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Data</para>
	/// <para>data</para></summary>
	public const string Data = "data";
	/// <summary><para>Dependency</para>
	/// <para>dependency</para></summary>
	public const string Dependency = "dependency";
	/// <summary><para>Display Name</para>
	/// <para>displayname</para></summary>
	public const string DisplayName = "displayname";
	/// <summary><para>For internal use only.</para>
	/// <para>associatedentitylogicalname</para></summary>
	public const string ForInternalUseOnly = "associatedentitylogicalname";
	/// <summary><para>Form Factor</para>
	/// <para>formfactor</para></summary>
	public const string FormFactor = "formfactor";
	/// <summary><para>Is Default</para>
	/// <para>isdefault</para></summary>
	public const string IsDefault = "isdefault";
	/// <summary><para>LCID</para>
	/// <para>lcid</para></summary>
	public const string LCID = "lcid";
	/// <summary><para>Metadata Subtype</para>
	/// <para>metadatasubtype</para></summary>
	public const string MetadataSubtype = "metadatasubtype";
	/// <summary><para>Metadata Type</para>
	/// <para>metadatatype</para></summary>
	public const string MetadataType = "metadatatype";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Organization Id</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>Source Id</para>
	/// <para>sourceid</para></summary>
	public const string SourceId = "sourceid";
	/// <summary><para>State of the record</para>
	/// <para>state</para></summary>
	public const string StateOfTheRecord = "state";
	/// <summary><para>System Application Metadata</para>
	/// <para>systemapplicationmetadataid</para></summary>
	public const string SystemApplicationMetadataId = "systemapplicationmetadataid";
	/// <summary><para>Version</para>
	/// <para>version</para></summary>
	public const string Version = "version";
}

    }
}
