// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("fieldpermission")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class FieldPermission : BaseProxyClass
    {
        public new const string LogicalName = "fieldpermission";
        public const int ObjectTypeCode = 1201;
        public const string PrimaryIdAttribute = "fieldpermissionid";
        public const string PrimaryNameAttribute = "";
        
        static FieldPermission()
        {
            BaseProxyClass.RegisterProxyType(typeof(FieldPermission), "fieldpermission");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public FieldPermission() : base(new Entity("fieldpermission")) { }
        public FieldPermission(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<FieldPermission>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
/// <summary>
///Logical Name: cancreate
/// </summary>
[AttributeLogicalNameAttribute("cancreate")]
public eAYesOrNoBoolean? CanCreateTheAttribute
{
	get
	{
		if (CanCreateTheAttribute_OptionSetValue != null) { return (eAYesOrNoBoolean)CanCreateTheAttribute_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CanCreateTheAttribute_OptionSetValue = new OptionSetValue((int)value); }
		else this.CanCreateTheAttribute_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: cancreate</para>
///</summary>
[AttributeLogicalNameAttribute("cancreate")]
public OptionSetValue CanCreateTheAttribute_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("cancreate"); }
	set { this.SetPropertyValue<OptionSetValue>("cancreate", value, "CanCreateTheAttribute_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string CanCreateTheAttribute_Text(IOrganizationService Service)
{
	return this.CanCreateTheAttribute_OptionSetValue.GetOptionSetText(Service, this, "cancreate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string CanCreateTheAttribute_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.CanCreateTheAttribute_OptionSetValue.Value);
}
/// <summary>
///Logical Name: canread
/// </summary>
[AttributeLogicalNameAttribute("canread")]
public eAYesOrNoBoolean? CanReadTheAttribute
{
	get
	{
		if (CanReadTheAttribute_OptionSetValue != null) { return (eAYesOrNoBoolean)CanReadTheAttribute_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CanReadTheAttribute_OptionSetValue = new OptionSetValue((int)value); }
		else this.CanReadTheAttribute_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: canread</para>
///</summary>
[AttributeLogicalNameAttribute("canread")]
public OptionSetValue CanReadTheAttribute_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("canread"); }
	set { this.SetPropertyValue<OptionSetValue>("canread", value, "CanReadTheAttribute_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string CanReadTheAttribute_Text(IOrganizationService Service)
{
	return this.CanReadTheAttribute_OptionSetValue.GetOptionSetText(Service, this, "canread");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string CanReadTheAttribute_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.CanReadTheAttribute_OptionSetValue.Value);
}
/// <summary>
///Logical Name: canupdate
/// </summary>
[AttributeLogicalNameAttribute("canupdate")]
public eAYesOrNoBoolean? CanUpdateTheAttribute
{
	get
	{
		if (CanUpdateTheAttribute_OptionSetValue != null) { return (eAYesOrNoBoolean)CanUpdateTheAttribute_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CanUpdateTheAttribute_OptionSetValue = new OptionSetValue((int)value); }
		else this.CanUpdateTheAttribute_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: canupdate</para>
///</summary>
[AttributeLogicalNameAttribute("canupdate")]
public OptionSetValue CanUpdateTheAttribute_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("canupdate"); }
	set { this.SetPropertyValue<OptionSetValue>("canupdate", value, "CanUpdateTheAttribute_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string CanUpdateTheAttribute_Text(IOrganizationService Service)
{
	return this.CanUpdateTheAttribute_OptionSetValue.GetOptionSetText(Service, this, "canupdate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string CanUpdateTheAttribute_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.CanUpdateTheAttribute_OptionSetValue.Value);
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: fieldpermissionid</para>
///</summary>
[AttributeLogicalNameAttribute("fieldpermissionid")]
public Guid FieldPermissionId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: fieldpermissionidunique</para>
///</summary>
[AttributeLogicalNameAttribute("fieldpermissionidunique")]
public Guid FieldPermissionAttribute
{
	get { return this.GetPropertyValue<Guid>("fieldpermissionidunique"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? IsManaged
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: attributelogicalname</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("attributelogicalname")]
public string NameOfTheAttributeForWhichThisPrivilegeIsDefined
{
	get { return this.GetPropertyValue<string>("attributelogicalname"); }
	set { this.SetPropertyValue("attributelogicalname", value, 50, "NameOfTheAttributeForWhichThisPrivilegeIsDefined"); }
}
///<summary>
///<para>Logical Name: entityname</para>
///</summary>
[AttributeLogicalNameAttribute("entityname")]
public string NameOfTheEntityForWhichThisPrivilegeIsDefined
{
	get { return this.GetPropertyValue<string>("entityname"); }
	set { this.SetPropertyValue<string>("entityname", value, "NameOfTheEntityForWhichThisPrivilegeIsDefined"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference OrganizationId
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: fieldsecurityprofileid</para>
///</summary>
[AttributeLogicalNameAttribute("fieldsecurityprofileid")]
public EntityReference Profile
{
	get { return this.GetPropertyValue<EntityReference>("fieldsecurityprofileid"); }
	set { this.SetPropertyValue<EntityReference>("fieldsecurityprofileid", value, "Profile"); }
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? RecordOverwriteTime
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}


        /// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: FieldPermission_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: FieldPermission_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_fieldpermission</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_fieldpermission</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eAYesOrNoBoolean
{
	///<summary><para>Not Allowed</para>
	///<para>Value = 0</para></summary>
	[Description("Not Allowed")]
	NotAllowed = 0, 
	///<summary><para>Allowed</para>
	///<para>Value = 4</para></summary>
	[Description("Allowed")]
	Allowed = 4
}
public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}


        public static class Properties
{
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Can create the attribute</para>
	/// <para>cancreate</para></summary>
	public const string CanCreateTheAttribute = "cancreate";
	/// <summary><para>Can Read the attribute</para>
	/// <para>canread</para></summary>
	public const string CanReadTheAttribute = "canread";
	/// <summary><para>Can Update the attribute</para>
	/// <para>canupdate</para></summary>
	public const string CanUpdateTheAttribute = "canupdate";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Field Permission</para>
	/// <para>fieldpermissionid</para></summary>
	public const string FieldPermissionId = "fieldpermissionid";
	/// <summary><para>Field Permission</para>
	/// <para>fieldpermissionidunique</para></summary>
	public const string FieldPermissionAttribute = "fieldpermissionidunique";
	/// <summary><para>Is Managed</para>
	/// <para>ismanaged</para></summary>
	public const string IsManaged = "ismanaged";
	/// <summary><para>Name of the attribute for which this privilege is defined</para>
	/// <para>attributelogicalname</para></summary>
	public const string NameOfTheAttributeForWhichThisPrivilegeIsDefined = "attributelogicalname";
	/// <summary><para>Name of the Entity for which this privilege is defined</para>
	/// <para>entityname</para></summary>
	public const string NameOfTheEntityForWhichThisPrivilegeIsDefined = "entityname";
	/// <summary><para>Organization Id</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>Profile</para>
	/// <para>fieldsecurityprofileid</para></summary>
	public const string Profile = "fieldsecurityprofileid";
	/// <summary><para>Record Overwrite Time</para>
	/// <para>overwritetime</para></summary>
	public const string RecordOverwriteTime = "overwritetime";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
}

    }
}
