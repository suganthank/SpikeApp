// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("systemform")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class SystemForm : BaseProxyClass
    {
        public new const string LogicalName = "systemform";
        public const int ObjectTypeCode = 1030;
        public const string PrimaryIdAttribute = "formid";
        public const string PrimaryNameAttribute = "name";
        
        static SystemForm()
        {
            BaseProxyClass.RegisterProxyType(typeof(SystemForm), "systemform");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public SystemForm() : base(new Entity("systemform")) { }
        public SystemForm(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<SystemForm>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: formid</para>
///</summary>
[AttributeLogicalNameAttribute("formid")]
public Guid FormId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference OrganizationId
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: formidunique</para>
///</summary>
[AttributeLogicalNameAttribute("formidunique")]
public Guid FormIdUnique
{
	get { return this.GetPropertyValue<Guid>("formidunique"); }
}
///<summary>
///<para>Logical Name: version</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("version")]
public int? Version
{
	get { return this.GetPropertyValue<int?>("version"); }
	set { this.SetPropertyValue("version", (int?)value, (int)0, (int)2147483647, "Version"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: publishedon</para>
///</summary>
[AttributeLogicalNameAttribute("publishedon")]
public DateTime? PublishedOn
{
	get { return this.GetPropertyValue<DateTime?>("publishedon"); }
}
///<summary>
///<para>Logical Name: formxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("formxml")]
public string FormXml
{
	get { return this.GetPropertyValue<string>("formxml"); }
	set { this.SetPropertyValue("formxml", value, 1073741823, "FormXml"); }
}
///<summary>
///<para>Logical Name: formxmlmanaged</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("formxmlmanaged")]
public string FormXmlManaged
{
	get { return this.GetPropertyValue<string>("formxmlmanaged"); }
}
///<summary>
///<para>Logical Name: ancestorformidname</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("ancestorformidname")]
public string AncestorFormIdName
{
	get { return this.GetPropertyValue<string>("ancestorformidname"); }
}
///<summary>
///<para>Logical Name: objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("objecttypecode")]
public string ObjectTypeCode2
{
	get { return this.GetPropertyValue<string>("objecttypecode"); }
	set { this.SetPropertyValue<string>("objecttypecode", value, "ObjectTypeCode2"); }
}
/// <summary>
///Logical Name: formpresentation
/// </summary>
[AttributeLogicalNameAttribute("formpresentation")]
public eRefreshedLayout? AIRRefreshed
{
	get
	{
		if (AIRRefreshed_OptionSetValue != null) { return (eRefreshedLayout)AIRRefreshed_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AIRRefreshed_OptionSetValue = new OptionSetValue((int)value); }
		else this.AIRRefreshed_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: formpresentation</para>
///</summary>
[AttributeLogicalNameAttribute("formpresentation")]
public OptionSetValue AIRRefreshed_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("formpresentation"); }
	set { this.SetPropertyValue<OptionSetValue>("formpresentation", value, "AIRRefreshed_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AIRRefreshed_Text(IOrganizationService Service)
{
	return this.AIRRefreshed_OptionSetValue.GetOptionSetText(Service, this, "formpresentation");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AIRRefreshed_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AIRRefreshed_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: canbedeleted</para>
///</summary>
[AttributeLogicalNameAttribute("canbedeleted")]
public BooleanManagedProperty CanBeDeleted
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("canbedeleted"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("canbedeleted", value, "CanBeDeleted"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: iscustomizable</para>
///</summary>
[AttributeLogicalNameAttribute("iscustomizable")]
public BooleanManagedProperty Customizable
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("iscustomizable"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("iscustomizable", value, "Customizable"); }
}
///<summary>
///<para>Logical Name: isdefault</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isdefault")]
public bool? DefaultForm
{
	get { return this.GetPropertyValue<bool?>("isdefault"); }
	set { this.SetPropertyValue<bool?>("isdefault", value, "DefaultForm"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
/// <summary>
///Logical Name: formactivationstate
/// </summary>
[AttributeLogicalNameAttribute("formactivationstate")]
public eFormState? FormState
{
	get
	{
		if (FormState_OptionSetValue != null) { return (eFormState)FormState_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FormState_OptionSetValue = new OptionSetValue((int)value); }
		else this.FormState_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: formactivationstate</para>
///</summary>
[AttributeLogicalNameAttribute("formactivationstate")]
public OptionSetValue FormState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("formactivationstate"); }
	set { this.SetPropertyValue<OptionSetValue>("formactivationstate", value, "FormState_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FormState_Text(IOrganizationService Service)
{
	return this.FormState_OptionSetValue.GetOptionSetText(Service, this, "formactivationstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FormState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FormState_OptionSetValue.Value);
}
/// <summary>
///Logical Name: type
/// </summary>
[AttributeLogicalNameAttribute("type")]
public eType? FormType
{
	get
	{
		if (FormType_OptionSetValue != null) { return (eType)FormType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FormType_OptionSetValue = new OptionSetValue((int)value); }
		else this.FormType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: type</para>
///</summary>
[AttributeLogicalNameAttribute("type")]
public OptionSetValue FormType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("type"); }
	set { this.SetPropertyValue<OptionSetValue>("type", value, "FormType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FormType_Text(IOrganizationService Service)
{
	return this.FormType_OptionSetValue.GetOptionSetText(Service, this, "type");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FormType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FormType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: introducedversion</para>
///<para>Max Length: 48 characters</para>
///</summary>
[AttributeLogicalNameAttribute("introducedversion")]
public string IntroducedVersion
{
	get { return this.GetPropertyValue<string>("introducedversion"); }
	set { this.SetPropertyValue("introducedversion", value, 48, "IntroducedVersion"); }
}
///<summary>
///<para>Logical Name: isdesktopenabled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isdesktopenabled")]
public bool? IsDesktopEnabled
{
	get { return this.GetPropertyValue<bool?>("isdesktopenabled"); }
	set { this.SetPropertyValue<bool?>("isdesktopenabled", value, "IsDesktopEnabled"); }
}
///<summary>
///<para>Logical Name: istabletenabled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("istabletenabled")]
public bool? IsTabletEnabled
{
	get { return this.GetPropertyValue<bool?>("istabletenabled"); }
	set { this.SetPropertyValue<bool?>("istabletenabled", value, "IsTabletEnabled"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 100, "Name"); }
}
///<summary>
///<para>Logical Name: ancestorformid</para>
///</summary>
[AttributeLogicalNameAttribute("ancestorformid")]
public EntityReference ParentForm
{
	get { return this.GetPropertyValue<EntityReference>("ancestorformid"); }
	set { this.SetPropertyValue<EntityReference>("ancestorformid", value, "ParentForm"); }
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? RecordOverwriteTime
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Logical Name: isairmerged</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isairmerged")]
public bool? Refreshed
{
	get { return this.GetPropertyValue<bool?>("isairmerged"); }
	set { this.SetPropertyValue<bool?>("isairmerged", value, "Refreshed"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? State
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: uniquename</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("uniquename")]
public string UniqueName
{
	get { return this.GetPropertyValue<string>("uniquename"); }
	set { this.SetPropertyValue("uniquename", value, 200, "UniqueName"); }
}


        /// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: SystemForm_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: SystemForm_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: SystemForm_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: SystemForm_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessTrigger (Form)</b></para>
/// <para>Schema Name: processtrigger_systemform</para>
/// </summary>
public List<ProcessTrigger> GetProcessTriggers_Form (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessTrigger>(Service, this.Id, "processtrigger", "formid", Columns); }
/// <summary>
/// <para><b>ProcessTrigger (Form)</b></para>
/// <para>Schema Name: processtrigger_systemform</para>
/// </summary>
public List<ProcessTrigger> GetProcessTriggers_Form (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessTrigger>(Service, this.Id, "processtrigger", "formid", Columns); }
/// <summary>
/// <para><b>SocialInsightsConfiguration (Associated Form)</b></para>
/// <para>Schema Name: socialinsightsconfiguration_systemform</para>
/// </summary>
public List<SocialInsightsConfiguration> GetSocialInsightsConfigurations_AssociatedForm (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialInsightsConfiguration>(Service, this.Id, "socialinsightsconfiguration", "formid", Columns); }
/// <summary>
/// <para><b>SocialInsightsConfiguration (Associated Form)</b></para>
/// <para>Schema Name: socialinsightsconfiguration_systemform</para>
/// </summary>
public List<SocialInsightsConfiguration> GetSocialInsightsConfigurations_AssociatedForm (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SocialInsightsConfiguration>(Service, this.Id, "socialinsightsconfiguration", "formid", Columns); }
/// <summary>
/// <para><b>SystemForm (Parent Form)</b></para>
/// <para>Schema Name: form_ancestor_form</para>
/// </summary>
public List<SystemForm> GetSystemForms_ParentForm (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemForm>(Service, this.Id, "systemform", "ancestorformid", Columns); }
/// <summary>
/// <para><b>SystemForm (Parent Form)</b></para>
/// <para>Schema Name: form_ancestor_form</para>
/// </summary>
public List<SystemForm> GetSystemForms_ParentForm (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemForm>(Service, this.Id, "systemform", "ancestorformid", Columns); }


        

        

        public enum eRefreshedLayout
{
	///<summary><para>ClassicForm</para>
	///<para>Value = 0</para></summary>
	[Description("ClassicForm")]
	ClassicForm = 0, 
	///<summary><para>AirForm</para>
	///<para>Value = 1</para></summary>
	[Description("AirForm")]
	AirForm = 1
}
public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eFormState
{
	///<summary><para>Inactive</para>
	///<para>Value = 0</para></summary>
	[Description("Inactive")]
	Inactive = 0, 
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active = 1
}
public enum eType
{
	///<summary><para>Dashboard</para>
	///<para>Value = 0</para></summary>
	[Description("Dashboard")]
	Dashboard = 0, 
	///<summary><para>AppointmentBook</para>
	///<para>Value = 1</para></summary>
	[Description("AppointmentBook")]
	AppointmentBook = 1, 
	///<summary><para>Main</para>
	///<para>Value = 2</para></summary>
	[Description("Main")]
	Main = 2, 
	///<summary><para>MiniCampaignBO</para>
	///<para>Value = 3</para></summary>
	[Description("MiniCampaignBO")]
	MiniCampaignBO = 3, 
	///<summary><para>Preview</para>
	///<para>Value = 4</para></summary>
	[Description("Preview")]
	Preview = 4, 
	///<summary><para>Mobile - Express</para>
	///<para>Value = 5</para></summary>
	[Description("Mobile - Express")]
	Mobile_Express = 5, 
	///<summary><para>Quick View Form</para>
	///<para>Value = 6</para></summary>
	[Description("Quick View Form")]
	QuickViewForm = 6, 
	///<summary><para>Quick Create</para>
	///<para>Value = 7</para></summary>
	[Description("Quick Create")]
	QuickCreate = 7, 
	///<summary><para>Dialog</para>
	///<para>Value = 8</para></summary>
	[Description("Dialog")]
	Dialog = 8, 
	///<summary><para>Task Flow Form</para>
	///<para>Value = 9</para></summary>
	[Description("Task Flow Form")]
	TaskFlowForm = 9, 
	///<summary><para>InteractionCentricDashboard</para>
	///<para>Value = 10</para></summary>
	[Description("InteractionCentricDashboard")]
	InteractionCentricDashboard = 10, 
	///<summary><para>Card</para>
	///<para>Value = 11</para></summary>
	[Description("Card")]
	Card = 11, 
	///<summary><para>Main - Interactive experience</para>
	///<para>Value = 12</para></summary>
	[Description("Main - Interactive experience")]
	Main_InteractiveExperience = 12, 
	///<summary><para>Other</para>
	///<para>Value = 100</para></summary>
	[Description("Other")]
	Other = 100, 
	///<summary><para>MainBackup</para>
	///<para>Value = 101</para></summary>
	[Description("MainBackup")]
	MainBackup = 101, 
	///<summary><para>AppointmentBookBackup</para>
	///<para>Value = 102</para></summary>
	[Description("AppointmentBookBackup")]
	AppointmentBookBackup = 102, 
	///<summary><para>Power BI Dashboard</para>
	///<para>Value = 103</para></summary>
	[Description("Power BI Dashboard")]
	PowerBIDashboard = 103
}


        public static class Properties
{
	/// <summary><para>formid</para>
	/// <para>formid</para></summary>
	public const string FormId = "formid";
	/// <summary><para>organizationid</para>
	/// <para>organizationid</para></summary>
	public const string OrganizationId = "organizationid";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>formidunique</para>
	/// <para>formidunique</para></summary>
	public const string FormIdUnique = "formidunique";
	/// <summary><para>version</para>
	/// <para>version</para></summary>
	public const string Version = "version";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>publishedon</para>
	/// <para>publishedon</para></summary>
	public const string PublishedOn = "publishedon";
	/// <summary><para>formxml</para>
	/// <para>formxml</para></summary>
	public const string FormXml = "formxml";
	/// <summary><para>formxmlmanaged</para>
	/// <para>formxmlmanaged</para></summary>
	public const string FormXmlManaged = "formxmlmanaged";
	/// <summary><para>ancestorformidname</para>
	/// <para>ancestorformidname</para></summary>
	public const string AncestorFormIdName = "ancestorformidname";
	/// <summary><para>objecttypecode</para>
	/// <para>objecttypecode</para></summary>
	public const string ObjectTypeCode2 = "objecttypecode";
	/// <summary><para>AIR Refreshed</para>
	/// <para>formpresentation</para></summary>
	public const string AIRRefreshed = "formpresentation";
	/// <summary><para>Can Be Deleted</para>
	/// <para>canbedeleted</para></summary>
	public const string CanBeDeleted = "canbedeleted";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Customizable</para>
	/// <para>iscustomizable</para></summary>
	public const string Customizable = "iscustomizable";
	/// <summary><para>Default Form</para>
	/// <para>isdefault</para></summary>
	public const string DefaultForm = "isdefault";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Form State</para>
	/// <para>formactivationstate</para></summary>
	public const string FormState = "formactivationstate";
	/// <summary><para>Form Type</para>
	/// <para>type</para></summary>
	public const string FormType = "type";
	/// <summary><para>Introduced Version</para>
	/// <para>introducedversion</para></summary>
	public const string IntroducedVersion = "introducedversion";
	/// <summary><para>Is Desktop Enabled</para>
	/// <para>isdesktopenabled</para></summary>
	public const string IsDesktopEnabled = "isdesktopenabled";
	/// <summary><para>Is Tablet Enabled</para>
	/// <para>istabletenabled</para></summary>
	public const string IsTabletEnabled = "istabletenabled";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Parent Form</para>
	/// <para>ancestorformid</para></summary>
	public const string ParentForm = "ancestorformid";
	/// <summary><para>Record Overwrite Time</para>
	/// <para>overwritetime</para></summary>
	public const string RecordOverwriteTime = "overwritetime";
	/// <summary><para>Refreshed</para>
	/// <para>isairmerged</para></summary>
	public const string Refreshed = "isairmerged";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
	/// <summary><para>State</para>
	/// <para>ismanaged</para></summary>
	public const string State = "ismanaged";
	/// <summary><para>Unique Name</para>
	/// <para>uniquename</para></summary>
	public const string UniqueName = "uniquename";
}

    }
}
