// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("postrole")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class PostRole : BaseProxyClass
    {
        public new const string LogicalName = "postrole";
        public const int ObjectTypeCode = 8001;
        public const string PrimaryIdAttribute = "postroleid";
        public const string PrimaryNameAttribute = "";
        
        static PostRole()
        {
            BaseProxyClass.RegisterProxyType(typeof(PostRole), "postrole");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public PostRole() : base(new Entity("postrole")) { }
        public PostRole(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<PostRole>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: postidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("postidname")]
public string PostIdName
{
	get { return this.GetPropertyValue<string>("postidname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: postid</para>
///</summary>
[AttributeLogicalNameAttribute("postid")]
public EntityReference Post
{
	get { return this.GetPropertyValue<EntityReference>("postid"); }
	set { this.SetPropertyValue<EntityReference>("postid", value, "Post"); }
}
/// <summary>
///Logical Name: type
/// </summary>
[AttributeLogicalNameAttribute("type")]
public ePostRoleType? PostRole_Regarding_Mention_Topic_Etc
{
	get
	{
		if (PostRole_Regarding_Mention_Topic_Etc_OptionSetValue != null) { return (ePostRoleType)PostRole_Regarding_Mention_Topic_Etc_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PostRole_Regarding_Mention_Topic_Etc_OptionSetValue = new OptionSetValue((int)value); }
		else this.PostRole_Regarding_Mention_Topic_Etc_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: type</para>
///</summary>
[AttributeLogicalNameAttribute("type")]
public OptionSetValue PostRole_Regarding_Mention_Topic_Etc_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("type"); }
	set { this.SetPropertyValue<OptionSetValue>("type", value, "PostRole_Regarding_Mention_Topic_Etc_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string PostRole_Regarding_Mention_Topic_Etc_Text(IOrganizationService Service)
{
	return this.PostRole_Regarding_Mention_Topic_Etc_OptionSetValue.GetOptionSetText(Service, this, "type");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string PostRole_Regarding_Mention_Topic_Etc_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.PostRole_Regarding_Mention_Topic_Etc_OptionSetValue.Value);
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: postroleid</para>
///</summary>
[AttributeLogicalNameAttribute("postroleid")]
public Guid PostRoleId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference RegardingObjectId
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "RegardingObjectId"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}


        

        

        

        public enum ePostRoleType
{
	///<summary><para>Regarding</para>
	///<para>Value = 1</para></summary>
	[Description("Regarding")]
	Regarding = 1, 
	///<summary><para>Mentioning</para>
	///<para>Value = 2</para></summary>
	[Description("Mentioning")]
	Mentioning = 2, 
	///<summary><para>Mentioning And Regarding</para>
	///<para>Value = 3</para></summary>
	[Description("Mentioning And Regarding")]
	MentioningAndRegarding = 3, 
	///<summary><para>Topic</para>
	///<para>Value = 4</para></summary>
	[Description("Topic")]
	Topic = 4
}


        public static class Properties
{
	/// <summary><para>postidname</para>
	/// <para>postidname</para></summary>
	public const string PostIdName = "postidname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Post</para>
	/// <para>postid</para></summary>
	public const string Post = "postid";
	/// <summary><para>Post Role, Regarding, Mention, Topic, etc</para>
	/// <para>type</para></summary>
	public const string PostRole_Regarding_Mention_Topic_Etc = "type";
	/// <summary><para>PostRoleId</para>
	/// <para>postroleid</para></summary>
	public const string PostRoleId = "postroleid";
	/// <summary><para>RegardingObjectId</para>
	/// <para>regardingobjectid</para></summary>
	public const string RegardingObjectId = "regardingobjectid";
	/// <summary><para>RegardingObjectTypeCode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
}

    }
}
