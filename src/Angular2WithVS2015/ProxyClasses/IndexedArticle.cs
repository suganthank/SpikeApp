// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("documentindex")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class IndexedArticle : BaseProxyClass
    {
        public new const string LogicalName = "documentindex";
        public const int ObjectTypeCode = 126;
        public const string PrimaryIdAttribute = "documentindexid";
        public const string PrimaryNameAttribute = "title";
        
        static IndexedArticle()
        {
            BaseProxyClass.RegisterProxyType(typeof(IndexedArticle), "documentindex");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public IndexedArticle() : base(new Entity("documentindex")) { }
        public IndexedArticle(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<IndexedArticle>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: documentid</para>
///</summary>
[AttributeLogicalNameAttribute("documentid")]
public EntityReference Document
{
	get { return this.GetPropertyValue<EntityReference>("documentid"); }
	set { this.SetPropertyValue<EntityReference>("documentid", value, "Document"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: documentindexid</para>
///</summary>
[AttributeLogicalNameAttribute("documentindexid")]
public Guid DocumentIndexId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
/// <summary>
///Logical Name: documenttypecode
/// </summary>
[AttributeLogicalNameAttribute("documenttypecode")]
public eDocumentType? DocumentType
{
	get
	{
		if (DocumentType_OptionSetValue != null) { return (eDocumentType)DocumentType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DocumentType_OptionSetValue = new OptionSetValue((int)value); }
		else this.DocumentType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: documenttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("documenttypecode")]
public OptionSetValue DocumentType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("documenttypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("documenttypecode", value, "DocumentType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DocumentType_Text(IOrganizationService Service)
{
	return this.DocumentType_OptionSetValue.GetOptionSetText(Service, this, "documenttypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DocumentType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DocumentType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: islatestversion</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("islatestversion")]
public bool? IsLatestVersion
{
	get { return this.GetPropertyValue<bool?>("islatestversion"); }
	set { this.SetPropertyValue<bool?>("islatestversion", value, "IsLatestVersion"); }
}
///<summary>
///<para>Logical Name: ispublished</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("ispublished")]
public bool? IsPublished
{
	get { return this.GetPropertyValue<bool?>("ispublished"); }
	set { this.SetPropertyValue<bool?>("ispublished", value, "IsPublished"); }
}
///<summary>
///<para>Logical Name: keywords</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("keywords")]
public string KeyWords
{
	get { return this.GetPropertyValue<string>("keywords"); }
	set { this.SetPropertyValue("keywords", value, 100000, "KeyWords"); }
}
///<summary>
///<para>Logical Name: location</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("location")]
public string Location
{
	get { return this.GetPropertyValue<string>("location"); }
	set { this.SetPropertyValue("location", value, 500, "Location"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: number</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("number")]
public string Number
{
	get { return this.GetPropertyValue<string>("number"); }
	set { this.SetPropertyValue("number", value, 100, "Number"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: searchtext</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("searchtext")]
public string SearchText
{
	get { return this.GetPropertyValue<string>("searchtext"); }
	set { this.SetPropertyValue("searchtext", value, 100000, "SearchText"); }
}
///<summary>
///<para>Logical Name: subjectid</para>
///</summary>
[AttributeLogicalNameAttribute("subjectid")]
public EntityReference Subject
{
	get { return this.GetPropertyValue<EntityReference>("subjectid"); }
	set { this.SetPropertyValue<EntityReference>("subjectid", value, "Subject"); }
}
///<summary>
///<para>Logical Name: title</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("title")]
public string Title
{
	get { return this.GetPropertyValue<string>("title"); }
	set { this.SetPropertyValue("title", value, 500, "Title"); }
}


        /// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_documentindex</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_documentindex</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eDocumentType
{
	///<summary><para>Default Value</para>
	///<para>Value = 1</para></summary>
	[Description("Default Value")]
	DefaultValue = 1
}


        public static class Properties
{
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Document</para>
	/// <para>documentid</para></summary>
	public const string Document = "documentid";
	/// <summary><para>Document Index</para>
	/// <para>documentindexid</para></summary>
	public const string DocumentIndexId = "documentindexid";
	/// <summary><para>Document Type </para>
	/// <para>documenttypecode</para></summary>
	public const string DocumentType = "documenttypecode";
	/// <summary><para>Is Latest Version</para>
	/// <para>islatestversion</para></summary>
	public const string IsLatestVersion = "islatestversion";
	/// <summary><para>Is Published</para>
	/// <para>ispublished</para></summary>
	public const string IsPublished = "ispublished";
	/// <summary><para>Key Words</para>
	/// <para>keywords</para></summary>
	public const string KeyWords = "keywords";
	/// <summary><para>Location</para>
	/// <para>location</para></summary>
	public const string Location = "location";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Number</para>
	/// <para>number</para></summary>
	public const string Number = "number";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Search Text</para>
	/// <para>searchtext</para></summary>
	public const string SearchText = "searchtext";
	/// <summary><para>Subject</para>
	/// <para>subjectid</para></summary>
	public const string Subject = "subjectid";
	/// <summary><para>Title</para>
	/// <para>title</para></summary>
	public const string Title = "title";
}

    }
}
