// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("salesorderdetail")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class OrderLine : BaseProxyClass
    {
        public new const string LogicalName = "salesorderdetail";
        public const int ObjectTypeCode = 1089;
        public const string PrimaryIdAttribute = "salesorderdetailid";
        public const string PrimaryNameAttribute = "productidname";
        
        static OrderLine()
        {
            BaseProxyClass.RegisterProxyType(typeof(OrderLine), "salesorderdetail");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public OrderLine() : base(new Entity("salesorderdetail")) { }
        public OrderLine(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<OrderLine>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: salesorderidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("salesorderidname")]
public string SalesOrderIdName
{
	get { return this.GetPropertyValue<string>("salesorderidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_agreementname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_agreementname")]
public string Msdyn_agreementName
{
	get { return this.GetPropertyValue<string>("msdyn_agreementname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: salesrepidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("salesrepidname")]
public string SalesRepIdName
{
	get { return this.GetPropertyValue<string>("salesrepidname"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: uomidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("uomidname")]
public string UoMIdName
{
	get { return this.GetPropertyValue<string>("uomidname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_projectname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_projectname")]
public string Msdyn_ProjectName
{
	get { return this.GetPropertyValue<string>("msdyn_projectname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: productidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productidname")]
public string ProductIdName
{
	get { return this.GetPropertyValue<string>("productidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: msdyn_invoicefrequencyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_invoicefrequencyname")]
public string Msdyn_invoicefrequencyName
{
	get { return this.GetPropertyValue<string>("msdyn_invoicefrequencyname"); }
}
///<summary>
///<para>Logical Name: salesrepidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("salesrepidyominame")]
public string SalesRepIdYomiName
{
	get { return this.GetPropertyValue<string>("salesrepidyominame"); }
}
///<summary>
///<para>Logical Name: msdyn_agreement</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_agreement")]
public EntityReference Agreement
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_agreement"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_agreement", value, "Agreement"); }
}
///<summary>
///<para>Logical Name: baseamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Amount
{
	get
	{
		if (AmountMoney != null) { return AmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AmountMoney = new Money(value.Value); }
		else this.AmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: baseamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("baseamount")]
public Money AmountMoney
{
	get { return this.GetPropertyValue<Money>("baseamount"); }
	set { this.SetPropertyValue("baseamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "AmountMoney"); }
}
///<summary>
///<para>Logical Name: baseamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Amount_Base
{
	get
	{
		if (Amount_BaseMoney != null) { return Amount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: baseamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("baseamount_base")]
public Money Amount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("baseamount_base"); }
}
/// <summary>
///Logical Name: msdyn_billingmethod
/// </summary>
[AttributeLogicalNameAttribute("msdyn_billingmethod")]
public eBillingMethod? BillingMethod
{
	get
	{
		if (BillingMethod_OptionSetValue != null) { return (eBillingMethod)BillingMethod_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.BillingMethod_OptionSetValue = new OptionSetValue((int)value); }
		else this.BillingMethod_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_billingmethod</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_billingmethod")]
public OptionSetValue BillingMethod_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_billingmethod"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_billingmethod", value, "BillingMethod_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string BillingMethod_Text(IOrganizationService Service)
{
	return this.BillingMethod_OptionSetValue.GetOptionSetText(Service, this, "msdyn_billingmethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string BillingMethod_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.BillingMethod_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_billingstartdate</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_billingstartdate")]
public DateTime? BillingStartDate
{
	get { return this.GetPropertyValue<DateTime?>("msdyn_billingstartdate"); }
	set { this.SetPropertyValue<DateTime?>("msdyn_billingstartdate", value, "BillingStartDate"); }
}
///<summary>
///<para>Logical Name: msdyn_budgetamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? BudgetAmount
{
	get
	{
		if (BudgetAmountMoney != null) { return BudgetAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.BudgetAmountMoney = new Money(value.Value); }
		else this.BudgetAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_budgetamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_budgetamount")]
public Money BudgetAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_budgetamount"); }
	set { this.SetPropertyValue("msdyn_budgetamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "BudgetAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_budgetamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? BudgetAmount_Base
{
	get
	{
		if (BudgetAmount_BaseMoney != null) { return BudgetAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_budgetamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_budgetamount_base")]
public Money BudgetAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_budgetamount_base"); }
}
///<summary>
///<para>Logical Name: productassociationid</para>
///</summary>
[AttributeLogicalNameAttribute("productassociationid")]
public Guid BundleItemAssociation
{
	get { return this.GetPropertyValue<Guid>("productassociationid"); }
	set { this.SetPropertyValue<Guid>("productassociationid", value, "BundleItemAssociation"); }
}
///<summary>
///<para>Logical Name: extendedamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ContractLineValue
{
	get
	{
		if (ContractLineValueMoney != null) { return ContractLineValueMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ContractLineValueMoney = new Money(value.Value); }
		else this.ContractLineValueMoney = null;
	}
}
///<summary>
///<para>Logical Name: extendedamount</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("extendedamount")]
public Money ContractLineValueMoney
{
	get { return this.GetPropertyValue<Money>("extendedamount"); }
	set { this.SetPropertyValue("extendedamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "ContractLineValueMoney"); }
}
///<summary>
///<para>Logical Name: iscopied</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("iscopied")]
public bool? Copied
{
	get { return this.GetPropertyValue<bool?>("iscopied"); }
	set { this.SetPropertyValue<bool?>("iscopied", value, "Copied"); }
}
///<summary>
///<para>Logical Name: msdyn_costamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? CostAmount
{
	get
	{
		if (CostAmountMoney != null) { return CostAmountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CostAmountMoney = new Money(value.Value); }
		else this.CostAmountMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_costamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_costamount")]
public Money CostAmountMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_costamount"); }
	set { this.SetPropertyValue("msdyn_costamount", (Money)value, (decimal)0, (decimal)922337203685477, "CostAmountMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_costamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? CostAmount_Base
{
	get
	{
		if (CostAmount_BaseMoney != null) { return CostAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_costamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_costamount_base")]
public Money CostAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_costamount_base"); }
}
///<summary>
///<para>Logical Name: msdyn_costpriceperunit</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CostPricePerUnit
{
	get
	{
		if (CostPricePerUnitMoney != null) { return CostPricePerUnitMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.CostPricePerUnitMoney = new Money(value.Value); }
		else this.CostPricePerUnitMoney = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_costpriceperunit</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_costpriceperunit")]
public Money CostPricePerUnitMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_costpriceperunit"); }
	set { this.SetPropertyValue("msdyn_costpriceperunit", (Money)value, (decimal)0, (decimal)922337203685477, "CostPricePerUnitMoney"); }
}
///<summary>
///<para>Logical Name: msdyn_costpriceperunit_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? CostPricePerUnit_Base
{
	get
	{
		if (CostPricePerUnit_BaseMoney != null) { return CostPricePerUnit_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: msdyn_costpriceperunit_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_costpriceperunit_base")]
public Money CostPricePerUnit_BaseMoney
{
	get { return this.GetPropertyValue<Money>("msdyn_costpriceperunit_base"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: productid</para>
///</summary>
[AttributeLogicalNameAttribute("productid")]
public EntityReference ExistingProduct
{
	get { return this.GetPropertyValue<EntityReference>("productid"); }
	set { this.SetPropertyValue<EntityReference>("productid", value, "ExistingProduct"); }
}
///<summary>
///<para>Logical Name: extendedamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ExtendedAmount_Base
{
	get
	{
		if (ExtendedAmount_BaseMoney != null) { return ExtendedAmount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: extendedamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("extendedamount_base")]
public Money ExtendedAmount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("extendedamount_base"); }
}
/// <summary>
///Logical Name: shipto_freighttermscode
/// </summary>
[AttributeLogicalNameAttribute("shipto_freighttermscode")]
public eFreightTerms? FreightTerms
{
	get
	{
		if (FreightTerms_OptionSetValue != null) { return (eFreightTerms)FreightTerms_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FreightTerms_OptionSetValue = new OptionSetValue((int)value); }
		else this.FreightTerms_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: shipto_freighttermscode</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_freighttermscode")]
public OptionSetValue FreightTerms_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("shipto_freighttermscode"); }
	set { this.SetPropertyValue<OptionSetValue>("shipto_freighttermscode", value, "FreightTerms_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FreightTerms_Text(IOrganizationService Service)
{
	return this.FreightTerms_OptionSetValue.GetOptionSetText(Service, this, "shipto_freighttermscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FreightTerms_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FreightTerms_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: msdyn_includeexpense</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_includeexpense")]
public bool? IncludeExpense
{
	get { return this.GetPropertyValue<bool?>("msdyn_includeexpense"); }
	set { this.SetPropertyValue<bool?>("msdyn_includeexpense", value, "IncludeExpense"); }
}
///<summary>
///<para>Logical Name: msdyn_includefee</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_includefee")]
public bool? IncludeFee
{
	get { return this.GetPropertyValue<bool?>("msdyn_includefee"); }
	set { this.SetPropertyValue<bool?>("msdyn_includefee", value, "IncludeFee"); }
}
///<summary>
///<para>Logical Name: msdyn_includematerial</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_includematerial")]
public bool? IncludeMaterial
{
	get { return this.GetPropertyValue<bool?>("msdyn_includematerial"); }
	set { this.SetPropertyValue<bool?>("msdyn_includematerial", value, "IncludeMaterial"); }
}
///<summary>
///<para>Logical Name: msdyn_includetime</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_includetime")]
public bool? IncludeTime
{
	get { return this.GetPropertyValue<bool?>("msdyn_includetime"); }
	set { this.SetPropertyValue<bool?>("msdyn_includetime", value, "IncludeTime"); }
}
///<summary>
///<para>Logical Name: msdyn_invoicefrequency</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_invoicefrequency")]
public EntityReference InvoiceFrequency
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_invoicefrequency"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_invoicefrequency", value, "InvoiceFrequency"); }
}
///<summary>
///<para>Logical Name: lineitemnumber</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("lineitemnumber")]
public int? LineItemNumber
{
	get { return this.GetPropertyValue<int?>("lineitemnumber"); }
	set { this.SetPropertyValue("lineitemnumber", (int?)value, (int)0, (int)1000000000, "LineItemNumber"); }
}
/// <summary>
///Logical Name: msdyn_linetype
/// </summary>
[AttributeLogicalNameAttribute("msdyn_linetype")]
public eLineType? LineType
{
	get
	{
		if (LineType_OptionSetValue != null) { return (eLineType)LineType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.LineType_OptionSetValue = new OptionSetValue((int)value); }
		else this.LineType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: msdyn_linetype</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_linetype")]
public OptionSetValue LineType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("msdyn_linetype"); }
	set { this.SetPropertyValue<OptionSetValue>("msdyn_linetype", value, "LineType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string LineType_Text(IOrganizationService Service)
{
	return this.LineType_OptionSetValue.GetOptionSetText(Service, this, "msdyn_linetype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string LineType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.LineType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: manualdiscountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? ManualDiscount
{
	get
	{
		if (ManualDiscountMoney != null) { return ManualDiscountMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ManualDiscountMoney = new Money(value.Value); }
		else this.ManualDiscountMoney = null;
	}
}
///<summary>
///<para>Logical Name: manualdiscountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("manualdiscountamount")]
public Money ManualDiscountMoney
{
	get { return this.GetPropertyValue<Money>("manualdiscountamount"); }
	set { this.SetPropertyValue("manualdiscountamount", (Money)value, (decimal)0, (decimal)1000000000000, "ManualDiscountMoney"); }
}
///<summary>
///<para>Logical Name: manualdiscountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? ManualDiscount_Base
{
	get
	{
		if (ManualDiscount_BaseMoney != null) { return ManualDiscount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: manualdiscountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("manualdiscountamount_base")]
public Money ManualDiscount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("manualdiscountamount_base"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: productdescription</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productdescription")]
public string Name
{
	get { return this.GetPropertyValue<string>("productdescription"); }
	set { this.SetPropertyValue("productdescription", value, 500, "Name"); }
}
///<summary>
///<para>Logical Name: salesorderid</para>
///</summary>
[AttributeLogicalNameAttribute("salesorderid")]
public EntityReference Order
{
	get { return this.GetPropertyValue<EntityReference>("salesorderid"); }
	set { this.SetPropertyValue<EntityReference>("salesorderid", value, "Order"); }
}
///<summary>
///<para>Logical Name: salesorderispricelocked</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("salesorderispricelocked")]
public bool? OrderIsPriceLocked
{
	get { return this.GetPropertyValue<bool?>("salesorderispricelocked"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: salesorderdetailid</para>
///</summary>
[AttributeLogicalNameAttribute("salesorderdetailid")]
public Guid OrderProductId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
/// <summary>
///Logical Name: salesorderstatecode
/// </summary>
[AttributeLogicalNameAttribute("salesorderstatecode")]
public eOrderStatus? OrderStatus
{
	get
	{
		if (OrderStatus_OptionSetValue != null) { return (eOrderStatus)OrderStatus_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: salesorderstatecode</para>
///</summary>
[AttributeLogicalNameAttribute("salesorderstatecode")]
public OptionSetValue OrderStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("salesorderstatecode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OrderStatus_Text(IOrganizationService Service)
{
	return this.OrderStatus_OptionSetValue.GetOptionSetText(Service, this, "salesorderstatecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OrderStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OrderStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public Guid OwningBusinessUnit
{
	get { return this.GetPropertyValue<Guid>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public Guid OwningUser
{
	get { return this.GetPropertyValue<Guid>("owninguser"); }
}
///<summary>
///<para>Logical Name: parentbundleid</para>
///</summary>
[AttributeLogicalNameAttribute("parentbundleid")]
public Guid ParentBundle
{
	get { return this.GetPropertyValue<Guid>("parentbundleid"); }
	set { this.SetPropertyValue<Guid>("parentbundleid", value, "ParentBundle"); }
}
///<summary>
///<para>Logical Name: priceperunit</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? PricePerUnit
{
	get
	{
		if (PricePerUnitMoney != null) { return PricePerUnitMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PricePerUnitMoney = new Money(value.Value); }
		else this.PricePerUnitMoney = null;
	}
}
///<summary>
///<para>Logical Name: priceperunit</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("priceperunit")]
public Money PricePerUnitMoney
{
	get { return this.GetPropertyValue<Money>("priceperunit"); }
	set { this.SetPropertyValue("priceperunit", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, "PricePerUnitMoney"); }
}
///<summary>
///<para>Logical Name: priceperunit_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? PricePerUnit_Base
{
	get
	{
		if (PricePerUnit_BaseMoney != null) { return PricePerUnit_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: priceperunit_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("priceperunit_base")]
public Money PricePerUnit_BaseMoney
{
	get { return this.GetPropertyValue<Money>("priceperunit_base"); }
}
///<summary>
///<para>Logical Name: ispriceoverridden</para>
///<para>True = Override Price</para>
///<para>False = Use Default</para>
///</summary>
[AttributeLogicalNameAttribute("ispriceoverridden")]
public bool? Pricing
{
	get { return this.GetPropertyValue<bool?>("ispriceoverridden"); }
	set { this.SetPropertyValue<bool?>("ispriceoverridden", value, "Pricing"); }
}
/// <summary>
///Logical Name: pricingerrorcode
/// </summary>
[AttributeLogicalNameAttribute("pricingerrorcode")]
public ePricingError? PricingError
{
	get
	{
		if (PricingError_OptionSetValue != null) { return (ePricingError)PricingError_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PricingError_OptionSetValue = new OptionSetValue((int)value); }
		else this.PricingError_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: pricingerrorcode</para>
///</summary>
[AttributeLogicalNameAttribute("pricingerrorcode")]
public OptionSetValue PricingError_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("pricingerrorcode"); }
	set { this.SetPropertyValue<OptionSetValue>("pricingerrorcode", value, "PricingError_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string PricingError_Text(IOrganizationService Service)
{
	return this.PricingError_OptionSetValue.GetOptionSetText(Service, this, "pricingerrorcode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string PricingError_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.PricingError_OptionSetValue.Value);
}
/// <summary>
///Logical Name: producttypecode
/// </summary>
[AttributeLogicalNameAttribute("producttypecode")]
public eProductType? ProductType
{
	get
	{
		if (ProductType_OptionSetValue != null) { return (eProductType)ProductType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ProductType_OptionSetValue = new OptionSetValue((int)value); }
		else this.ProductType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: producttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("producttypecode")]
public OptionSetValue ProductType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("producttypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("producttypecode", value, "ProductType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ProductType_Text(IOrganizationService Service)
{
	return this.ProductType_OptionSetValue.GetOptionSetText(Service, this, "producttypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ProductType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ProductType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: msdyn_project</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_project")]
public EntityReference Project
{
	get { return this.GetPropertyValue<EntityReference>("msdyn_project"); }
	set { this.SetPropertyValue<EntityReference>("msdyn_project", value, "Project"); }
}
/// <summary>
///Logical Name: propertyconfigurationstatus
/// </summary>
[AttributeLogicalNameAttribute("propertyconfigurationstatus")]
public ePropertiesConfiguration? PropertyConfiguration
{
	get
	{
		if (PropertyConfiguration_OptionSetValue != null) { return (ePropertiesConfiguration)PropertyConfiguration_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PropertyConfiguration_OptionSetValue = new OptionSetValue((int)value); }
		else this.PropertyConfiguration_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: propertyconfigurationstatus</para>
///</summary>
[AttributeLogicalNameAttribute("propertyconfigurationstatus")]
public OptionSetValue PropertyConfiguration_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("propertyconfigurationstatus"); }
	set { this.SetPropertyValue<OptionSetValue>("propertyconfigurationstatus", value, "PropertyConfiguration_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string PropertyConfiguration_Text(IOrganizationService Service)
{
	return this.PropertyConfiguration_OptionSetValue.GetOptionSetText(Service, this, "propertyconfigurationstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string PropertyConfiguration_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.PropertyConfiguration_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: quantity</para>
///<para>Minimum Value: -100000000000</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("quantity")]
public decimal? Quantity
{
	get { return this.GetPropertyValue<decimal?>("quantity"); }
	set { this.SetPropertyValue("quantity", (decimal?)value, (decimal)-100000000000, (decimal)100000000000, "Quantity"); }
}
///<summary>
///<para>Logical Name: quantitybackordered</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("quantitybackordered")]
public decimal? QuantityBackOrdered
{
	get { return this.GetPropertyValue<decimal?>("quantitybackordered"); }
	set { this.SetPropertyValue("quantitybackordered", (decimal?)value, (decimal)0, (decimal)1000000000, "QuantityBackOrdered"); }
}
///<summary>
///<para>Logical Name: quantitycancelled</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("quantitycancelled")]
public decimal? QuantityCanceled
{
	get { return this.GetPropertyValue<decimal?>("quantitycancelled"); }
	set { this.SetPropertyValue("quantitycancelled", (decimal?)value, (decimal)0, (decimal)1000000000, "QuantityCanceled"); }
}
///<summary>
///<para>Logical Name: quantityshipped</para>
///<para>Minimum Value: -1000000000</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 5</para>
///</summary>
[AttributeLogicalNameAttribute("quantityshipped")]
public decimal? QuantityShipped
{
	get { return this.GetPropertyValue<decimal?>("quantityshipped"); }
	set { this.SetPropertyValue("quantityshipped", (decimal?)value, (decimal)-1000000000, (decimal)1000000000, "QuantityShipped"); }
}
///<summary>
///<para>Logical Name: msdyn_quoteline</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("msdyn_quoteline")]
public string QuoteLine
{
	get { return this.GetPropertyValue<string>("msdyn_quoteline"); }
	set { this.SetPropertyValue("msdyn_quoteline", value, 100, "QuoteLine"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: requestdeliveryby</para>
///</summary>
[AttributeLogicalNameAttribute("requestdeliveryby")]
public DateTime? RequestedDeliveryDate
{
	get { return this.GetPropertyValue<DateTime?>("requestdeliveryby"); }
	set { this.SetPropertyValue<DateTime?>("requestdeliveryby", value, "RequestedDeliveryDate"); }
}
///<summary>
///<para>Logical Name: salesrepid</para>
///</summary>
[AttributeLogicalNameAttribute("salesrepid")]
public EntityReference Salesperson
{
	get { return this.GetPropertyValue<EntityReference>("salesrepid"); }
	set { this.SetPropertyValue<EntityReference>("salesrepid", value, "Salesperson"); }
}
///<summary>
///<para>Logical Name: isproductoverridden</para>
///<para>True = Write In</para>
///<para>False = Existing</para>
///</summary>
[AttributeLogicalNameAttribute("isproductoverridden")]
public bool? SelectProduct
{
	get { return this.GetPropertyValue<bool?>("isproductoverridden"); }
	set { this.SetPropertyValue<bool?>("isproductoverridden", value, "SelectProduct"); }
}
///<summary>
///<para>Logical Name: sequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("sequencenumber")]
public int? SequenceNumber
{
	get { return this.GetPropertyValue<int?>("sequencenumber"); }
	set { this.SetPropertyValue("sequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "SequenceNumber"); }
}
///<summary>
///<para>Logical Name: willcall</para>
///<para>True = Will Call</para>
///<para>False = Address</para>
///</summary>
[AttributeLogicalNameAttribute("willcall")]
public bool? ShipTo
{
	get { return this.GetPropertyValue<bool?>("willcall"); }
	set { this.SetPropertyValue<bool?>("willcall", value, "ShipTo"); }
}
///<summary>
///<para>Logical Name: shipto_addressid</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_addressid")]
public Guid ShipToAddressID
{
	get { return this.GetPropertyValue<Guid>("shipto_addressid"); }
	set { this.SetPropertyValue<Guid>("shipto_addressid", value, "ShipToAddressID"); }
}
///<summary>
///<para>Logical Name: shipto_city</para>
///<para>Max Length: 80 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_city")]
public string ShipToCity
{
	get { return this.GetPropertyValue<string>("shipto_city"); }
	set { this.SetPropertyValue("shipto_city", value, 80, "ShipToCity"); }
}
///<summary>
///<para>Logical Name: shipto_contactname</para>
///<para>Max Length: 150 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_contactname")]
public string ShipToContactName
{
	get { return this.GetPropertyValue<string>("shipto_contactname"); }
	set { this.SetPropertyValue("shipto_contactname", value, 150, "ShipToContactName"); }
}
///<summary>
///<para>Logical Name: shipto_country</para>
///<para>Max Length: 80 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_country")]
public string ShipToCountry_Region
{
	get { return this.GetPropertyValue<string>("shipto_country"); }
	set { this.SetPropertyValue("shipto_country", value, 80, "ShipToCountry_Region"); }
}
///<summary>
///<para>Logical Name: shipto_fax</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_fax")]
public string ShipToFax
{
	get { return this.GetPropertyValue<string>("shipto_fax"); }
	set { this.SetPropertyValue("shipto_fax", value, 50, "ShipToFax"); }
}
///<summary>
///<para>Logical Name: shipto_name</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_name")]
public string ShipToName
{
	get { return this.GetPropertyValue<string>("shipto_name"); }
	set { this.SetPropertyValue("shipto_name", value, 200, "ShipToName"); }
}
///<summary>
///<para>Logical Name: shipto_telephone</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_telephone")]
public string ShipToPhone
{
	get { return this.GetPropertyValue<string>("shipto_telephone"); }
	set { this.SetPropertyValue("shipto_telephone", value, 50, "ShipToPhone"); }
}
///<summary>
///<para>Logical Name: shipto_stateorprovince</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_stateorprovince")]
public string ShipToState_Province
{
	get { return this.GetPropertyValue<string>("shipto_stateorprovince"); }
	set { this.SetPropertyValue("shipto_stateorprovince", value, 50, "ShipToState_Province"); }
}
///<summary>
///<para>Logical Name: shipto_line1</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_line1")]
public string ShipToStreet1
{
	get { return this.GetPropertyValue<string>("shipto_line1"); }
	set { this.SetPropertyValue("shipto_line1", value, 250, "ShipToStreet1"); }
}
///<summary>
///<para>Logical Name: shipto_line2</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_line2")]
public string ShipToStreet2
{
	get { return this.GetPropertyValue<string>("shipto_line2"); }
	set { this.SetPropertyValue("shipto_line2", value, 250, "ShipToStreet2"); }
}
///<summary>
///<para>Logical Name: shipto_line3</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_line3")]
public string ShipToStreet3
{
	get { return this.GetPropertyValue<string>("shipto_line3"); }
	set { this.SetPropertyValue("shipto_line3", value, 250, "ShipToStreet3"); }
}
///<summary>
///<para>Logical Name: shipto_postalcode</para>
///<para>Max Length: 20 characters</para>
///</summary>
[AttributeLogicalNameAttribute("shipto_postalcode")]
public string ShipToZIP_PostalCode
{
	get { return this.GetPropertyValue<string>("shipto_postalcode"); }
	set { this.SetPropertyValue("shipto_postalcode", value, 20, "ShipToZIP_PostalCode"); }
}
///<summary>
///<para>Logical Name: tax</para>
///<para>Minimum Value: -1000000000000</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
public decimal? Tax
{
	get
	{
		if (TaxMoney != null) { return TaxMoney.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.TaxMoney = new Money(value.Value); }
		else this.TaxMoney = null;
	}
}
///<summary>
///<para>Logical Name: tax</para>
///<para>Minimum Value: -1000000000000</para>
///<para>Maximum Value: 1000000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("tax")]
public Money TaxMoney
{
	get { return this.GetPropertyValue<Money>("tax"); }
	set { this.SetPropertyValue("tax", (Money)value, (decimal)-1000000000000, (decimal)1000000000000, "TaxMoney"); }
}
///<summary>
///<para>Logical Name: tax_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? Tax_Base
{
	get
	{
		if (Tax_BaseMoney != null) { return Tax_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: tax_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("tax_base")]
public Money Tax_BaseMoney
{
	get { return this.GetPropertyValue<Money>("tax_base"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: uomid</para>
///</summary>
[AttributeLogicalNameAttribute("uomid")]
public EntityReference Unit
{
	get { return this.GetPropertyValue<EntityReference>("uomid"); }
	set { this.SetPropertyValue<EntityReference>("uomid", value, "Unit"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: volumediscountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
public decimal? VolumeDiscount
{
	get
	{
		if (VolumeDiscountMoney != null) { return VolumeDiscountMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: volumediscountamount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("volumediscountamount")]
public Money VolumeDiscountMoney
{
	get { return this.GetPropertyValue<Money>("volumediscountamount"); }
}
///<summary>
///<para>Logical Name: volumediscountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
public decimal? VolumeDiscount_Base
{
	get
	{
		if (VolumeDiscount_BaseMoney != null) { return VolumeDiscount_BaseMoney.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: volumediscountamount_base</para>
///<para>Minimum Value: -922337203685477</para>
///<para>Maximum Value: 922337203685477</para>
///<para>Precision: 4</para>
///</summary>
[AttributeLogicalNameAttribute("volumediscountamount_base")]
public Money VolumeDiscount_BaseMoney
{
	get { return this.GetPropertyValue<Money>("volumediscountamount_base"); }
}


        /// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: SalesOrderDetail_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: SalesOrderDetail_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: SalesOrderDetail_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: SalesOrderDetail_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PropertyInstance (Regarding)</b></para>
/// <para>Schema Name: SalesOrderDetail_Dynamicpropertyinstance</para>
/// </summary>
public List<PropertyInstance> GetPropertyInstances_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyInstance>(Service, this.Id, "dynamicpropertyinstance", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PropertyInstance (Regarding)</b></para>
/// <para>Schema Name: SalesOrderDetail_Dynamicpropertyinstance</para>
/// </summary>
public List<PropertyInstance> GetPropertyInstances_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PropertyInstance>(Service, this.Id, "dynamicpropertyinstance", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: salesorderdetail_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: salesorderdetail_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: SalesOrderDetail_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: SalesOrderDetail_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>OrderLine (Parent Bundle)</b></para>
/// <para>Schema Name: salesorderdetail_parent_salesorderdetail</para>
/// </summary>
public List<OrderLine> GetOrderLines_ParentBundle (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OrderLine>(Service, this.Id, "salesorderdetail", "parentbundleid", Columns); }
/// <summary>
/// <para><b>OrderLine (Parent Bundle)</b></para>
/// <para>Schema Name: salesorderdetail_parent_salesorderdetail</para>
/// </summary>
public List<OrderLine> GetOrderLines_ParentBundle (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<OrderLine>(Service, this.Id, "salesorderdetail", "parentbundleid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: SalesOrderDetail_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: SalesOrderDetail_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_salesorderdetail</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_salesorderdetail</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eBillingMethod
{
	///<summary><para>Time and Material</para>
	///<para>Value = 192350000</para></summary>
	[Description("Time and Material")]
	TimeAndMaterial = 192350000, 
	///<summary><para>Fixed Price</para>
	///<para>Value = 192350001</para></summary>
	[Description("Fixed Price")]
	FixedPrice = 192350001
}
public enum eFreightTerms
{
	///<summary><para>FOB</para>
	///<para>Value = 1</para></summary>
	[Description("FOB")]
	FOB = 1, 
	///<summary><para>No Charge</para>
	///<para>Value = 2</para></summary>
	[Description("No Charge")]
	NoCharge = 2
}
public enum eLineType
{
	///<summary><para>Project Service Line</para>
	///<para>Value = 690970000</para></summary>
	[Description("Project Service Line")]
	ProjectServiceLine = 690970000, 
	///<summary><para>Field Service Line</para>
	///<para>Value = 690970001</para></summary>
	[Description("Field Service Line")]
	FieldServiceLine = 690970001
}
public enum eOrderStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Submitted</para>
	///<para>Value = 1</para></summary>
	[Description("Submitted")]
	Submitted = 1, 
	///<summary><para>Canceled</para>
	///<para>Value = 2</para></summary>
	[Description("Canceled")]
	Canceled = 2, 
	///<summary><para>Fulfilled</para>
	///<para>Value = 3</para></summary>
	[Description("Fulfilled")]
	Fulfilled = 3, 
	///<summary><para>Invoiced</para>
	///<para>Value = 4</para></summary>
	[Description("Invoiced")]
	Invoiced = 4
}
public enum ePricingError
{
	///<summary><para>None</para>
	///<para>Value = 0</para></summary>
	[Description("None")]
	None = 0, 
	///<summary><para>Detail Error</para>
	///<para>Value = 1</para></summary>
	[Description("Detail Error")]
	DetailError = 1, 
	///<summary><para>Missing Price Level</para>
	///<para>Value = 2</para></summary>
	[Description("Missing Price Level")]
	MissingPriceLevel = 2, 
	///<summary><para>Inactive Price Level</para>
	///<para>Value = 3</para></summary>
	[Description("Inactive Price Level")]
	InactivePriceLevel = 3, 
	///<summary><para>Missing Quantity</para>
	///<para>Value = 4</para></summary>
	[Description("Missing Quantity")]
	MissingQuantity = 4, 
	///<summary><para>Missing Unit Price</para>
	///<para>Value = 5</para></summary>
	[Description("Missing Unit Price")]
	MissingUnitPrice = 5, 
	///<summary><para>Missing Product</para>
	///<para>Value = 6</para></summary>
	[Description("Missing Product")]
	MissingProduct = 6, 
	///<summary><para>Invalid Product</para>
	///<para>Value = 7</para></summary>
	[Description("Invalid Product")]
	InvalidProduct = 7, 
	///<summary><para>Missing Pricing Code</para>
	///<para>Value = 8</para></summary>
	[Description("Missing Pricing Code")]
	MissingPricingCode = 8, 
	///<summary><para>Invalid Pricing Code</para>
	///<para>Value = 9</para></summary>
	[Description("Invalid Pricing Code")]
	InvalidPricingCode = 9, 
	///<summary><para>Missing UOM</para>
	///<para>Value = 10</para></summary>
	[Description("Missing UOM")]
	MissingUOM = 10, 
	///<summary><para>Product Not In Price Level</para>
	///<para>Value = 11</para></summary>
	[Description("Product Not In Price Level")]
	ProductNotInPriceLevel = 11, 
	///<summary><para>Missing Price Level Amount</para>
	///<para>Value = 12</para></summary>
	[Description("Missing Price Level Amount")]
	MissingPriceLevelAmount = 12, 
	///<summary><para>Missing Price Level Percentage</para>
	///<para>Value = 13</para></summary>
	[Description("Missing Price Level Percentage")]
	MissingPriceLevelPercentage = 13, 
	///<summary><para>Missing Price</para>
	///<para>Value = 14</para></summary>
	[Description("Missing Price")]
	MissingPrice = 14, 
	///<summary><para>Missing Current Cost</para>
	///<para>Value = 15</para></summary>
	[Description("Missing Current Cost")]
	MissingCurrentCost = 15, 
	///<summary><para>Missing Standard Cost</para>
	///<para>Value = 16</para></summary>
	[Description("Missing Standard Cost")]
	MissingStandardCost = 16, 
	///<summary><para>Invalid Price Level Amount</para>
	///<para>Value = 17</para></summary>
	[Description("Invalid Price Level Amount")]
	InvalidPriceLevelAmount = 17, 
	///<summary><para>Invalid Price Level Percentage</para>
	///<para>Value = 18</para></summary>
	[Description("Invalid Price Level Percentage")]
	InvalidPriceLevelPercentage = 18, 
	///<summary><para>Invalid Price</para>
	///<para>Value = 19</para></summary>
	[Description("Invalid Price")]
	InvalidPrice = 19, 
	///<summary><para>Invalid Current Cost</para>
	///<para>Value = 20</para></summary>
	[Description("Invalid Current Cost")]
	InvalidCurrentCost = 20, 
	///<summary><para>Invalid Standard Cost</para>
	///<para>Value = 21</para></summary>
	[Description("Invalid Standard Cost")]
	InvalidStandardCost = 21, 
	///<summary><para>Invalid Rounding Policy</para>
	///<para>Value = 22</para></summary>
	[Description("Invalid Rounding Policy")]
	InvalidRoundingPolicy = 22, 
	///<summary><para>Invalid Rounding Option</para>
	///<para>Value = 23</para></summary>
	[Description("Invalid Rounding Option")]
	InvalidRoundingOption = 23, 
	///<summary><para>Invalid Rounding Amount</para>
	///<para>Value = 24</para></summary>
	[Description("Invalid Rounding Amount")]
	InvalidRoundingAmount = 24, 
	///<summary><para>Price Calculation Error</para>
	///<para>Value = 25</para></summary>
	[Description("Price Calculation Error")]
	PriceCalculationError = 25, 
	///<summary><para>Invalid Discount Type</para>
	///<para>Value = 26</para></summary>
	[Description("Invalid Discount Type")]
	InvalidDiscountType = 26, 
	///<summary><para>Discount Type Invalid State</para>
	///<para>Value = 27</para></summary>
	[Description("Discount Type Invalid State")]
	DiscountTypeInvalidState = 27, 
	///<summary><para>Invalid Discount</para>
	///<para>Value = 28</para></summary>
	[Description("Invalid Discount")]
	InvalidDiscount = 28, 
	///<summary><para>Invalid Quantity</para>
	///<para>Value = 29</para></summary>
	[Description("Invalid Quantity")]
	InvalidQuantity = 29, 
	///<summary><para>Invalid Pricing Precision</para>
	///<para>Value = 30</para></summary>
	[Description("Invalid Pricing Precision")]
	InvalidPricingPrecision = 30, 
	///<summary><para>Missing Product Default UOM</para>
	///<para>Value = 31</para></summary>
	[Description("Missing Product Default UOM")]
	MissingProductDefaultUOM = 31, 
	///<summary><para>Missing Product UOM Schedule </para>
	///<para>Value = 32</para></summary>
	[Description("Missing Product UOM Schedule ")]
	MissingProductUOMSchedule = 32, 
	///<summary><para>Inactive Discount Type</para>
	///<para>Value = 33</para></summary>
	[Description("Inactive Discount Type")]
	InactiveDiscountType = 33, 
	///<summary><para>Invalid Price Level Currency</para>
	///<para>Value = 34</para></summary>
	[Description("Invalid Price Level Currency")]
	InvalidPriceLevelCurrency = 34, 
	///<summary><para>Price Attribute Out Of Range</para>
	///<para>Value = 35</para></summary>
	[Description("Price Attribute Out Of Range")]
	PriceAttributeOutOfRange = 35, 
	///<summary><para>Base Currency Attribute Overflow</para>
	///<para>Value = 36</para></summary>
	[Description("Base Currency Attribute Overflow")]
	BaseCurrencyAttributeOverflow = 36, 
	///<summary><para>Base Currency Attribute Underflow</para>
	///<para>Value = 37</para></summary>
	[Description("Base Currency Attribute Underflow")]
	BaseCurrencyAttributeUnderflow = 37
}
public enum eProductType
{
	///<summary><para>Product</para>
	///<para>Value = 1</para></summary>
	[Description("Product")]
	Product = 1, 
	///<summary><para>Bundle</para>
	///<para>Value = 2</para></summary>
	[Description("Bundle")]
	Bundle = 2, 
	///<summary><para>Required Bundle Product</para>
	///<para>Value = 3</para></summary>
	[Description("Required Bundle Product")]
	RequiredBundleProduct = 3, 
	///<summary><para>Optional Bundle Product</para>
	///<para>Value = 4</para></summary>
	[Description("Optional Bundle Product")]
	OptionalBundleProduct = 4, 
	///<summary><para>Project-based Service</para>
	///<para>Value = 5</para></summary>
	[Description("Project-based Service")]
	Project_basedService = 5
}
public enum ePropertiesConfiguration
{
	///<summary><para>Edit</para>
	///<para>Value = 0</para></summary>
	[Description("Edit")]
	Edit = 0, 
	///<summary><para>Rectify</para>
	///<para>Value = 1</para></summary>
	[Description("Rectify")]
	Rectify = 1, 
	///<summary><para>NotConfigured</para>
	///<para>Value = 2</para></summary>
	[Description("NotConfigured")]
	NotConfigured = 2
}


        public static class Properties
{
	/// <summary><para>salesorderidname</para>
	/// <para>salesorderidname</para></summary>
	public const string SalesOrderIdName = "salesorderidname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>msdyn_agreementname</para>
	/// <para>msdyn_agreementname</para></summary>
	public const string Msdyn_agreementName = "msdyn_agreementname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>salesrepidname</para>
	/// <para>salesrepidname</para></summary>
	public const string SalesRepIdName = "salesrepidname";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>uomidname</para>
	/// <para>uomidname</para></summary>
	public const string UoMIdName = "uomidname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>msdyn_projectname</para>
	/// <para>msdyn_projectname</para></summary>
	public const string Msdyn_ProjectName = "msdyn_projectname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>productidname</para>
	/// <para>productidname</para></summary>
	public const string ProductIdName = "productidname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>msdyn_invoicefrequencyname</para>
	/// <para>msdyn_invoicefrequencyname</para></summary>
	public const string Msdyn_invoicefrequencyName = "msdyn_invoicefrequencyname";
	/// <summary><para>salesrepidyominame</para>
	/// <para>salesrepidyominame</para></summary>
	public const string SalesRepIdYomiName = "salesrepidyominame";
	/// <summary><para>Agreement</para>
	/// <para>msdyn_agreement</para></summary>
	public const string Agreement = "msdyn_agreement";
	/// <summary><para>Amount</para>
	/// <para>baseamount</para></summary>
	public const string Amount = "baseamount";
	/// <summary><para>Amount (Base)</para>
	/// <para>baseamount_base</para></summary>
	public const string Amount_Base = "baseamount_base";
	/// <summary><para>Billing Method</para>
	/// <para>msdyn_billingmethod</para></summary>
	public const string BillingMethod = "msdyn_billingmethod";
	/// <summary><para>Billing Start Date</para>
	/// <para>msdyn_billingstartdate</para></summary>
	public const string BillingStartDate = "msdyn_billingstartdate";
	/// <summary><para>Budget Amount</para>
	/// <para>msdyn_budgetamount</para></summary>
	public const string BudgetAmount = "msdyn_budgetamount";
	/// <summary><para>Budget Amount (Base)</para>
	/// <para>msdyn_budgetamount_base</para></summary>
	public const string BudgetAmount_Base = "msdyn_budgetamount_base";
	/// <summary><para>Bundle Item Association</para>
	/// <para>productassociationid</para></summary>
	public const string BundleItemAssociation = "productassociationid";
	/// <summary><para>Contract Line Value</para>
	/// <para>extendedamount</para></summary>
	public const string ContractLineValue = "extendedamount";
	/// <summary><para>Copied</para>
	/// <para>iscopied</para></summary>
	public const string Copied = "iscopied";
	/// <summary><para>Cost Amount</para>
	/// <para>msdyn_costamount</para></summary>
	public const string CostAmount = "msdyn_costamount";
	/// <summary><para>Cost Amount (Base)</para>
	/// <para>msdyn_costamount_base</para></summary>
	public const string CostAmount_Base = "msdyn_costamount_base";
	/// <summary><para>Cost Price Per Unit</para>
	/// <para>msdyn_costpriceperunit</para></summary>
	public const string CostPricePerUnit = "msdyn_costpriceperunit";
	/// <summary><para>Cost Price Per Unit (Base)</para>
	/// <para>msdyn_costpriceperunit_base</para></summary>
	public const string CostPricePerUnit_Base = "msdyn_costpriceperunit_base";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Existing Product</para>
	/// <para>productid</para></summary>
	public const string ExistingProduct = "productid";
	/// <summary><para>Extended Amount (Base)</para>
	/// <para>extendedamount_base</para></summary>
	public const string ExtendedAmount_Base = "extendedamount_base";
	/// <summary><para>Freight Terms</para>
	/// <para>shipto_freighttermscode</para></summary>
	public const string FreightTerms = "shipto_freighttermscode";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Include Expense</para>
	/// <para>msdyn_includeexpense</para></summary>
	public const string IncludeExpense = "msdyn_includeexpense";
	/// <summary><para>Include Fee</para>
	/// <para>msdyn_includefee</para></summary>
	public const string IncludeFee = "msdyn_includefee";
	/// <summary><para>Include Material</para>
	/// <para>msdyn_includematerial</para></summary>
	public const string IncludeMaterial = "msdyn_includematerial";
	/// <summary><para>Include Time</para>
	/// <para>msdyn_includetime</para></summary>
	public const string IncludeTime = "msdyn_includetime";
	/// <summary><para>Invoice Frequency</para>
	/// <para>msdyn_invoicefrequency</para></summary>
	public const string InvoiceFrequency = "msdyn_invoicefrequency";
	/// <summary><para>Line Item Number</para>
	/// <para>lineitemnumber</para></summary>
	public const string LineItemNumber = "lineitemnumber";
	/// <summary><para>Line Type</para>
	/// <para>msdyn_linetype</para></summary>
	public const string LineType = "msdyn_linetype";
	/// <summary><para>Manual Discount</para>
	/// <para>manualdiscountamount</para></summary>
	public const string ManualDiscount = "manualdiscountamount";
	/// <summary><para>Manual Discount (Base)</para>
	/// <para>manualdiscountamount_base</para></summary>
	public const string ManualDiscount_Base = "manualdiscountamount_base";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>productdescription</para></summary>
	public const string Name = "productdescription";
	/// <summary><para>Order</para>
	/// <para>salesorderid</para></summary>
	public const string Order = "salesorderid";
	/// <summary><para>Order Is Price Locked</para>
	/// <para>salesorderispricelocked</para></summary>
	public const string OrderIsPriceLocked = "salesorderispricelocked";
	/// <summary><para>Order Product</para>
	/// <para>salesorderdetailid</para></summary>
	public const string OrderProductId = "salesorderdetailid";
	/// <summary><para>Order Status</para>
	/// <para>salesorderstatecode</para></summary>
	public const string OrderStatus = "salesorderstatecode";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Parent Bundle</para>
	/// <para>parentbundleid</para></summary>
	public const string ParentBundle = "parentbundleid";
	/// <summary><para>Price Per Unit</para>
	/// <para>priceperunit</para></summary>
	public const string PricePerUnit = "priceperunit";
	/// <summary><para>Price Per Unit (Base)</para>
	/// <para>priceperunit_base</para></summary>
	public const string PricePerUnit_Base = "priceperunit_base";
	/// <summary><para>Pricing</para>
	/// <para>ispriceoverridden</para></summary>
	public const string Pricing = "ispriceoverridden";
	/// <summary><para>Pricing Error </para>
	/// <para>pricingerrorcode</para></summary>
	public const string PricingError = "pricingerrorcode";
	/// <summary><para>Product type</para>
	/// <para>producttypecode</para></summary>
	public const string ProductType = "producttypecode";
	/// <summary><para>Project</para>
	/// <para>msdyn_project</para></summary>
	public const string Project = "msdyn_project";
	/// <summary><para>Property Configuration</para>
	/// <para>propertyconfigurationstatus</para></summary>
	public const string PropertyConfiguration = "propertyconfigurationstatus";
	/// <summary><para>Quantity</para>
	/// <para>quantity</para></summary>
	public const string Quantity = "quantity";
	/// <summary><para>Quantity Back Ordered</para>
	/// <para>quantitybackordered</para></summary>
	public const string QuantityBackOrdered = "quantitybackordered";
	/// <summary><para>Quantity Canceled</para>
	/// <para>quantitycancelled</para></summary>
	public const string QuantityCanceled = "quantitycancelled";
	/// <summary><para>Quantity Shipped</para>
	/// <para>quantityshipped</para></summary>
	public const string QuantityShipped = "quantityshipped";
	/// <summary><para>Quote Line</para>
	/// <para>msdyn_quoteline</para></summary>
	public const string QuoteLine = "msdyn_quoteline";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Requested Delivery Date</para>
	/// <para>requestdeliveryby</para></summary>
	public const string RequestedDeliveryDate = "requestdeliveryby";
	/// <summary><para>Salesperson</para>
	/// <para>salesrepid</para></summary>
	public const string Salesperson = "salesrepid";
	/// <summary><para>Select Product</para>
	/// <para>isproductoverridden</para></summary>
	public const string SelectProduct = "isproductoverridden";
	/// <summary><para>Sequence Number</para>
	/// <para>sequencenumber</para></summary>
	public const string SequenceNumber = "sequencenumber";
	/// <summary><para>Ship To</para>
	/// <para>willcall</para></summary>
	public const string ShipTo = "willcall";
	/// <summary><para>Ship To Address ID</para>
	/// <para>shipto_addressid</para></summary>
	public const string ShipToAddressID = "shipto_addressid";
	/// <summary><para>Ship To City</para>
	/// <para>shipto_city</para></summary>
	public const string ShipToCity = "shipto_city";
	/// <summary><para>Ship To Contact Name</para>
	/// <para>shipto_contactname</para></summary>
	public const string ShipToContactName = "shipto_contactname";
	/// <summary><para>Ship To Country/Region</para>
	/// <para>shipto_country</para></summary>
	public const string ShipToCountry_Region = "shipto_country";
	/// <summary><para>Ship To Fax</para>
	/// <para>shipto_fax</para></summary>
	public const string ShipToFax = "shipto_fax";
	/// <summary><para>Ship To Name</para>
	/// <para>shipto_name</para></summary>
	public const string ShipToName = "shipto_name";
	/// <summary><para>Ship To Phone</para>
	/// <para>shipto_telephone</para></summary>
	public const string ShipToPhone = "shipto_telephone";
	/// <summary><para>Ship To State/Province</para>
	/// <para>shipto_stateorprovince</para></summary>
	public const string ShipToState_Province = "shipto_stateorprovince";
	/// <summary><para>Ship To Street 1</para>
	/// <para>shipto_line1</para></summary>
	public const string ShipToStreet1 = "shipto_line1";
	/// <summary><para>Ship To Street 2</para>
	/// <para>shipto_line2</para></summary>
	public const string ShipToStreet2 = "shipto_line2";
	/// <summary><para>Ship To Street 3</para>
	/// <para>shipto_line3</para></summary>
	public const string ShipToStreet3 = "shipto_line3";
	/// <summary><para>Ship To ZIP/Postal Code</para>
	/// <para>shipto_postalcode</para></summary>
	public const string ShipToZIP_PostalCode = "shipto_postalcode";
	/// <summary><para>Tax</para>
	/// <para>tax</para></summary>
	public const string Tax = "tax";
	/// <summary><para>Tax (Base)</para>
	/// <para>tax_base</para></summary>
	public const string Tax_Base = "tax_base";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>Unit</para>
	/// <para>uomid</para></summary>
	public const string Unit = "uomid";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>Volume Discount</para>
	/// <para>volumediscountamount</para></summary>
	public const string VolumeDiscount = "volumediscountamount";
	/// <summary><para>Volume Discount (Base)</para>
	/// <para>volumediscountamount_base</para></summary>
	public const string VolumeDiscount_Base = "volumediscountamount_base";
}

    }
}
