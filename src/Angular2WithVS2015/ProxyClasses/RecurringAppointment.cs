// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("recurringappointmentmaster")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class RecurringAppointment : BaseProxyClass
    {
        public new const string LogicalName = "recurringappointmentmaster";
        public const int ObjectTypeCode = 4251;
        public const string PrimaryIdAttribute = "activityid";
        public const string PrimaryNameAttribute = "subject";
        
        static RecurringAppointment()
        {
            BaseProxyClass.RegisterProxyType(typeof(RecurringAppointment), "recurringappointmentmaster");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public RecurringAppointment() : base(new Entity("recurringappointmentmaster")) { }
        public RecurringAppointment(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<RecurringAppointment>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: subscriptionid</para>
///</summary>
[AttributeLogicalNameAttribute("subscriptionid")]
public Guid SubscriptionId
{
	get { return this.GetPropertyValue<Guid>("subscriptionid"); }
	set { this.SetPropertyValue<Guid>("subscriptionid", value, "SubscriptionId"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: activitytypecode</para>
///</summary>
[AttributeLogicalNameAttribute("activitytypecode")]
public string ActivityType
{
	get { return this.GetPropertyValue<string>("activitytypecode"); }
}
///<summary>
///<para>Logical Name: isalldayevent</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isalldayevent")]
public bool? AllDayEvent
{
	get { return this.GetPropertyValue<bool?>("isalldayevent"); }
	set { this.SetPropertyValue<bool?>("isalldayevent", value, "AllDayEvent"); }
}
/// <summary>
///Logical Name: instancetypecode
/// </summary>
[AttributeLogicalNameAttribute("instancetypecode")]
public eAppointmentType? AppointmentType
{
	get
	{
		if (AppointmentType_OptionSetValue != null) { return (eAppointmentType)AppointmentType_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: instancetypecode</para>
///</summary>
[AttributeLogicalNameAttribute("instancetypecode")]
public OptionSetValue AppointmentType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("instancetypecode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AppointmentType_Text(IOrganizationService Service)
{
	return this.AppointmentType_OptionSetValue.GetOptionSetText(Service, this, "instancetypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AppointmentType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AppointmentType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: category</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("category")]
public string Category
{
	get { return this.GetPropertyValue<string>("category"); }
	set { this.SetPropertyValue("category", value, 250, "Category"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: dayofmonth</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 31</para>
///</summary>
[AttributeLogicalNameAttribute("dayofmonth")]
public int? DayOfMonth
{
	get { return this.GetPropertyValue<int?>("dayofmonth"); }
	set { this.SetPropertyValue("dayofmonth", (int?)value, (int)1, (int)31, "DayOfMonth"); }
}
///<summary>
///<para>Logical Name: daysofweekmask</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 127</para>
///</summary>
[AttributeLogicalNameAttribute("daysofweekmask")]
public int? DaysOfWeekMask
{
	get { return this.GetPropertyValue<int?>("daysofweekmask"); }
	set { this.SetPropertyValue("daysofweekmask", (int?)value, (int)1, (int)127, "DaysOfWeekMask"); }
}
///<summary>
///<para>Logical Name: deletedexceptionslist</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("deletedexceptionslist")]
public string DeletedAppointments
{
	get { return this.GetPropertyValue<string>("deletedexceptionslist"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: duration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("duration")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("duration"); }
	set { this.SetPropertyValue("duration", (int?)value, (int)0, (int)2147483647, "Duration"); }
}
///<summary>
///<para>Logical Name: effectiveenddate</para>
///</summary>
[AttributeLogicalNameAttribute("effectiveenddate")]
public DateTime? EffectiveEndDate
{
	get { return this.GetPropertyValue<DateTime?>("effectiveenddate"); }
	set { this.SetPropertyValue<DateTime?>("effectiveenddate", value, "EffectiveEndDate"); }
}
///<summary>
///<para>Logical Name: effectivestartdate</para>
///</summary>
[AttributeLogicalNameAttribute("effectivestartdate")]
public DateTime? EffectiveStartDate
{
	get { return this.GetPropertyValue<DateTime?>("effectivestartdate"); }
	set { this.SetPropertyValue<DateTime?>("effectivestartdate", value, "EffectiveStartDate"); }
}
///<summary>
///<para>Logical Name: scheduledend</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledend")]
public DateTime? EndTime
{
	get { return this.GetPropertyValue<DateTime?>("scheduledend"); }
}
///<summary>
///<para>Logical Name: isweekdaypattern</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isweekdaypattern")]
public bool? EveryWeekday
{
	get { return this.GetPropertyValue<bool?>("isweekdaypattern"); }
	set { this.SetPropertyValue<bool?>("isweekdaypattern", value, "EveryWeekday"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
/// <summary>
///Logical Name: expansionstatecode
/// </summary>
[AttributeLogicalNameAttribute("expansionstatecode")]
public eExpansionStateCode? ExpansionStateCode
{
	get
	{
		if (ExpansionStateCode_OptionSetValue != null) { return (eExpansionStateCode)ExpansionStateCode_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: expansionstatecode</para>
///</summary>
[AttributeLogicalNameAttribute("expansionstatecode")]
public OptionSetValue ExpansionStateCode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("expansionstatecode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ExpansionStateCode_Text(IOrganizationService Service)
{
	return this.ExpansionStateCode_OptionSetValue.GetOptionSetText(Service, this, "expansionstatecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ExpansionStateCode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ExpansionStateCode_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: firstdayofweek</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 6</para>
///</summary>
[AttributeLogicalNameAttribute("firstdayofweek")]
public int? FirstDayOfWeek
{
	get { return this.GetPropertyValue<int?>("firstdayofweek"); }
	set { this.SetPropertyValue("firstdayofweek", (int?)value, (int)0, (int)6, "FirstDayOfWeek"); }
}
///<summary>
///<para>Logical Name: groupid</para>
///</summary>
[AttributeLogicalNameAttribute("groupid")]
public EntityReference GroupId
{
	get { return this.GetPropertyValue<EntityReference>("groupid"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
/// <summary>
///Logical Name: instance
/// </summary>
[AttributeLogicalNameAttribute("instance")]
public eInstance? Instance
{
	get
	{
		if (Instance_OptionSetValue != null) { return (eInstance)Instance_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Instance_OptionSetValue = new OptionSetValue((int)value); }
		else this.Instance_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: instance</para>
///</summary>
[AttributeLogicalNameAttribute("instance")]
public OptionSetValue Instance_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("instance"); }
	set { this.SetPropertyValue<OptionSetValue>("instance", value, "Instance_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Instance_Text(IOrganizationService Service)
{
	return this.Instance_OptionSetValue.GetOptionSetText(Service, this, "instance");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Instance_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Instance_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: interval</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 1000</para>
///</summary>
[AttributeLogicalNameAttribute("interval")]
public int? Interval
{
	get { return this.GetPropertyValue<int?>("interval"); }
	set { this.SetPropertyValue("interval", (int?)value, (int)1, (int)1000, "Interval"); }
}
///<summary>
///<para>Logical Name: isbilled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isbilled")]
public bool? IsBilled
{
	get { return this.GetPropertyValue<bool?>("isbilled"); }
	set { this.SetPropertyValue<bool?>("isbilled", value, "IsBilled"); }
}
///<summary>
///<para>Logical Name: ismapiprivate</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("ismapiprivate")]
public bool? IsPrivate
{
	get { return this.GetPropertyValue<bool?>("ismapiprivate"); }
	set { this.SetPropertyValue<bool?>("ismapiprivate", value, "IsPrivate"); }
}
///<summary>
///<para>Logical Name: isregularactivity</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isregularactivity")]
public bool? IsRegularActivity
{
	get { return this.GetPropertyValue<bool?>("isregularactivity"); }
}
///<summary>
///<para>Logical Name: isworkflowcreated</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isworkflowcreated")]
public bool? IsWorkflowCreated
{
	get { return this.GetPropertyValue<bool?>("isworkflowcreated"); }
	set { this.SetPropertyValue<bool?>("isworkflowcreated", value, "IsWorkflowCreated"); }
}
///<summary>
///<para>Logical Name: lastexpandedinstancedate</para>
///</summary>
[AttributeLogicalNameAttribute("lastexpandedinstancedate")]
public DateTime? LastExpandedInstanceDate
{
	get { return this.GetPropertyValue<DateTime?>("lastexpandedinstancedate"); }
}
///<summary>
///<para>Logical Name: location</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("location")]
public string Location
{
	get { return this.GetPropertyValue<string>("location"); }
	set { this.SetPropertyValue("location", value, 200, "Location"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
/// <summary>
///Logical Name: monthofyear
/// </summary>
[AttributeLogicalNameAttribute("monthofyear")]
public eMonthOfYear? MonthOfYear
{
	get
	{
		if (MonthOfYear_OptionSetValue != null) { return (eMonthOfYear)MonthOfYear_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.MonthOfYear_OptionSetValue = new OptionSetValue((int)value); }
		else this.MonthOfYear_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: monthofyear</para>
///</summary>
[AttributeLogicalNameAttribute("monthofyear")]
public OptionSetValue MonthOfYear_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("monthofyear"); }
	set { this.SetPropertyValue<OptionSetValue>("monthofyear", value, "MonthOfYear_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string MonthOfYear_Text(IOrganizationService Service)
{
	return this.MonthOfYear_OptionSetValue.GetOptionSetText(Service, this, "monthofyear");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string MonthOfYear_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.MonthOfYear_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: nextexpansioninstancedate</para>
///</summary>
[AttributeLogicalNameAttribute("nextexpansioninstancedate")]
public DateTime? NextExpandedInstanceDate
{
	get { return this.GetPropertyValue<DateTime?>("nextexpansioninstancedate"); }
}
///<summary>
///<para>Logical Name: isnthmonthly</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isnthmonthly")]
public bool? NthMonthly
{
	get { return this.GetPropertyValue<bool?>("isnthmonthly"); }
	set { this.SetPropertyValue<bool?>("isnthmonthly", value, "NthMonthly"); }
}
///<summary>
///<para>Logical Name: isnthyearly</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isnthyearly")]
public bool? NthYearly
{
	get { return this.GetPropertyValue<bool?>("isnthyearly"); }
	set { this.SetPropertyValue<bool?>("isnthyearly", value, "NthYearly"); }
}
///<summary>
///<para>Logical Name: occurrences</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 999</para>
///</summary>
[AttributeLogicalNameAttribute("occurrences")]
public int? Occurrences
{
	get { return this.GetPropertyValue<int?>("occurrences"); }
	set { this.SetPropertyValue("occurrences", (int?)value, (int)1, (int)999, "Occurrences"); }
}
///<summary>
///<para>Logical Name: optionalattendees</para>
///</summary>
[AttributeLogicalNameAttribute("optionalattendees")]
public EntityCollection OptionalAttendees
{
	get { return this.GetPropertyValue<EntityCollection>("optionalattendees"); }
	set { this.SetPropertyValue<EntityCollection>("optionalattendees", value, "OptionalAttendees"); }
}
///<summary>
///<para>Logical Name: organizer</para>
///</summary>
[AttributeLogicalNameAttribute("organizer")]
public EntityCollection Organizer
{
	get { return this.GetPropertyValue<EntityCollection>("organizer"); }
	set { this.SetPropertyValue<EntityCollection>("organizer", value, "Organizer"); }
}
///<summary>
///<para>Logical Name: globalobjectid</para>
///<para>Max Length: 300 characters</para>
///</summary>
[AttributeLogicalNameAttribute("globalobjectid")]
public string OutlookRecurringAppointmentMaster
{
	get { return this.GetPropertyValue<string>("globalobjectid"); }
	set { this.SetPropertyValue("globalobjectid", value, 300, "OutlookRecurringAppointmentMaster"); }
}
///<summary>
///<para>Logical Name: outlookownerapptid</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("outlookownerapptid")]
public int? OutlookRecurringAppointmentMasterOwner
{
	get { return this.GetPropertyValue<int?>("outlookownerapptid"); }
	set { this.SetPropertyValue("outlookownerapptid", (int?)value, (int)-2147483648, (int)2147483647, "OutlookRecurringAppointmentMasterOwner"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: endtime</para>
///</summary>
[AttributeLogicalNameAttribute("endtime")]
public DateTime? PatternEndTime
{
	get { return this.GetPropertyValue<DateTime?>("endtime"); }
	set { this.SetPropertyValue<DateTime?>("endtime", value, "PatternEndTime"); }
}
/// <summary>
///Logical Name: patternendtype
/// </summary>
[AttributeLogicalNameAttribute("patternendtype")]
public ePatternEndType? PatternEndType
{
	get
	{
		if (PatternEndType_OptionSetValue != null) { return (ePatternEndType)PatternEndType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PatternEndType_OptionSetValue = new OptionSetValue((int)value); }
		else this.PatternEndType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: patternendtype</para>
///</summary>
[AttributeLogicalNameAttribute("patternendtype")]
public OptionSetValue PatternEndType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("patternendtype"); }
	set { this.SetPropertyValue<OptionSetValue>("patternendtype", value, "PatternEndType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string PatternEndType_Text(IOrganizationService Service)
{
	return this.PatternEndType_OptionSetValue.GetOptionSetText(Service, this, "patternendtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string PatternEndType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.PatternEndType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: starttime</para>
///</summary>
[AttributeLogicalNameAttribute("starttime")]
public DateTime? PatternStartTime
{
	get { return this.GetPropertyValue<DateTime?>("starttime"); }
	set { this.SetPropertyValue<DateTime?>("starttime", value, "PatternStartTime"); }
}
/// <summary>
///Logical Name: prioritycode
/// </summary>
[AttributeLogicalNameAttribute("prioritycode")]
public ePriority? Priority
{
	get
	{
		if (Priority_OptionSetValue != null) { return (ePriority)Priority_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Priority_OptionSetValue = new OptionSetValue((int)value); }
		else this.Priority_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: prioritycode</para>
///</summary>
[AttributeLogicalNameAttribute("prioritycode")]
public OptionSetValue Priority_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("prioritycode"); }
	set { this.SetPropertyValue<OptionSetValue>("prioritycode", value, "Priority_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Priority_Text(IOrganizationService Service)
{
	return this.Priority_OptionSetValue.GetOptionSetText(Service, this, "prioritycode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Priority_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Priority_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public Guid Process
{
	get { return this.GetPropertyValue<Guid>("processid"); }
	set { this.SetPropertyValue<Guid>("processid", value, "Process"); }
}
///<summary>
///<para>Logical Name: stageid</para>
///</summary>
[AttributeLogicalNameAttribute("stageid")]
public Guid ProcessStage
{
	get { return this.GetPropertyValue<Guid>("stageid"); }
	set { this.SetPropertyValue<Guid>("stageid", value, "ProcessStage"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
/// <summary>
///Logical Name: recurrencepatterntype
/// </summary>
[AttributeLogicalNameAttribute("recurrencepatterntype")]
public eRecurrencePattern? RecurrenceFrequency
{
	get
	{
		if (RecurrenceFrequency_OptionSetValue != null) { return (eRecurrencePattern)RecurrenceFrequency_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RecurrenceFrequency_OptionSetValue = new OptionSetValue((int)value); }
		else this.RecurrenceFrequency_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: recurrencepatterntype</para>
///</summary>
[AttributeLogicalNameAttribute("recurrencepatterntype")]
public OptionSetValue RecurrenceFrequency_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("recurrencepatterntype"); }
	set { this.SetPropertyValue<OptionSetValue>("recurrencepatterntype", value, "RecurrenceFrequency_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string RecurrenceFrequency_Text(IOrganizationService Service)
{
	return this.RecurrenceFrequency_OptionSetValue.GetOptionSetText(Service, this, "recurrencepatterntype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string RecurrenceFrequency_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.RecurrenceFrequency_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: patternenddate</para>
///</summary>
[AttributeLogicalNameAttribute("patternenddate")]
public DateTime? RecurrenceRangeEnd
{
	get { return this.GetPropertyValue<DateTime?>("patternenddate"); }
	set { this.SetPropertyValue<DateTime?>("patternenddate", value, "RecurrenceRangeEnd"); }
}
///<summary>
///<para>Logical Name: patternstartdate</para>
///</summary>
[AttributeLogicalNameAttribute("patternstartdate")]
public DateTime? RecurrenceRangeStart
{
	get { return this.GetPropertyValue<DateTime?>("patternstartdate"); }
	set { this.SetPropertyValue<DateTime?>("patternstartdate", value, "RecurrenceRangeStart"); }
}
///<summary>
///<para>Logical Name: ruleid</para>
///</summary>
[AttributeLogicalNameAttribute("ruleid")]
public EntityReference RecurrenceRule
{
	get { return this.GetPropertyValue<EntityReference>("ruleid"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: activityid</para>
///</summary>
[AttributeLogicalNameAttribute("activityid")]
public Guid RecurringAppointmentId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: isregenerate</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isregenerate")]
public bool? Regenerate
{
	get { return this.GetPropertyValue<bool?>("isregenerate"); }
	set { this.SetPropertyValue<bool?>("isregenerate", value, "Regenerate"); }
}
///<summary>
///<para>Logical Name: requiredattendees</para>
///</summary>
[AttributeLogicalNameAttribute("requiredattendees")]
public EntityCollection RequiredAttendees
{
	get { return this.GetPropertyValue<EntityCollection>("requiredattendees"); }
	set { this.SetPropertyValue<EntityCollection>("requiredattendees", value, "RequiredAttendees"); }
}
///<summary>
///<para>Logical Name: seriesstatus</para>
///<para>True = Active</para>
///<para>False = Inactive</para>
///</summary>
[AttributeLogicalNameAttribute("seriesstatus")]
public bool? SeriesStatus
{
	get { return this.GetPropertyValue<bool?>("seriesstatus"); }
	set { this.SetPropertyValue<bool?>("seriesstatus", value, "SeriesStatus"); }
}
///<summary>
///<para>Logical Name: serviceid</para>
///</summary>
[AttributeLogicalNameAttribute("serviceid")]
public EntityReference Service
{
	get { return this.GetPropertyValue<EntityReference>("serviceid"); }
	set { this.SetPropertyValue<EntityReference>("serviceid", value, "Service"); }
}
///<summary>
///<para>Logical Name: sortdate</para>
///</summary>
[AttributeLogicalNameAttribute("sortdate")]
public DateTime? SortDate
{
	get { return this.GetPropertyValue<DateTime?>("sortdate"); }
	set { this.SetPropertyValue<DateTime?>("sortdate", value, "SortDate"); }
}
///<summary>
///<para>Logical Name: scheduledstart</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledstart")]
public DateTime? StartTime
{
	get { return this.GetPropertyValue<DateTime?>("scheduledstart"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: subcategory</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("subcategory")]
public string Sub_Category
{
	get { return this.GetPropertyValue<string>("subcategory"); }
	set { this.SetPropertyValue("subcategory", value, 250, "Sub_Category"); }
}
///<summary>
///<para>Logical Name: subject</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("subject")]
public string Subject
{
	get { return this.GetPropertyValue<string>("subject"); }
	set { this.SetPropertyValue("subject", value, 200, "Subject"); }
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string TraversedPath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "TraversedPath"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}


        /// <summary>
/// <para><b>ActionCard (Regarding)</b></para>
/// <para>Schema Name: recurringappointmentmaster_actioncard</para>
/// </summary>
public List<ActionCard> GetActionCards_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActionCard>(Service, this.Id, "actioncard", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ActionCard (Regarding)</b></para>
/// <para>Schema Name: recurringappointmentmaster_actioncard</para>
/// </summary>
public List<ActionCard> GetActionCards_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActionCard>(Service, this.Id, "actioncard", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ActivityParty (Activity)</b></para>
/// <para>Schema Name: recurringappointmentmaster_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Activity (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "activityid", Columns); }
/// <summary>
/// <para><b>ActivityParty (Activity)</b></para>
/// <para>Schema Name: recurringappointmentmaster_activity_parties</para>
/// </summary>
public List<ActivityParty> GetActivityParties_Activity (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ActivityParty>(Service, this.Id, "activityparty", "activityid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Appointment (Series Id)</b></para>
/// <para>Schema Name: recurringappointmentmaster_appointment</para>
/// </summary>
public List<Appointment> GetAppointments_SeriesId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "seriesid", Columns); }
/// <summary>
/// <para><b>Appointment (Series Id)</b></para>
/// <para>Schema Name: recurringappointmentmaster_appointment</para>
/// </summary>
public List<Appointment> GetAppointments_SeriesId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Appointment>(Service, this.Id, "appointment", "seriesid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>CampaignResponse (Originating Activity)</b></para>
/// <para>Schema Name: recurringappointmentmaster_campaignresponse</para>
/// </summary>
public List<CampaignResponse> GetCampaignResponses_OriginatingActivity (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CampaignResponse>(Service, this.Id, "campaignresponse", "originatingactivityid", Columns); }
/// <summary>
/// <para><b>CampaignResponse (Originating Activity)</b></para>
/// <para>Schema Name: recurringappointmentmaster_campaignresponse</para>
/// </summary>
public List<CampaignResponse> GetCampaignResponses_OriginatingActivity (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<CampaignResponse>(Service, this.Id, "campaignresponse", "originatingactivityid", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: recurringappointmentmaster_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected From)</b></para>
/// <para>Schema Name: recurringappointmentmaster_connections1</para>
/// </summary>
public List<Connection> GetConnections_ConnectedFrom (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: recurringappointmentmaster_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Connection (Connected To)</b></para>
/// <para>Schema Name: recurringappointmentmaster_connections2</para>
/// </summary>
public List<Connection> GetConnections_ConnectedTo (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Connection>(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Base Record ID)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_DuplicateBaseRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_BaseRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>DuplicateRecord (Duplicate Record ID)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_DuplicateMatchingRecord</para>
/// </summary>
public List<DuplicateRecord> GetDuplicateRecords_DuplicateRecordID (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<DuplicateRecord>(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Follow (Regarding)</b></para>
/// <para>Schema Name: recurringappointmentmaster_PostFollows</para>
/// </summary>
public List<Follow> GetFollows_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Follow>(Service, this.Id, "postfollow", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Follow (Regarding)</b></para>
/// <para>Schema Name: recurringappointmentmaster_PostFollows</para>
/// </summary>
public List<Follow> GetFollows_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Follow>(Service, this.Id, "postfollow", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PostRegarding (RegardingObjectId)</b></para>
/// <para>Schema Name: recurringappointmentmaster_PostRegardings</para>
/// </summary>
public List<PostRegarding> GetPostRegarding_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PostRegarding>(Service, this.Id, "postregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PostRegarding (RegardingObjectId)</b></para>
/// <para>Schema Name: recurringappointmentmaster_PostRegardings</para>
/// </summary>
public List<PostRegarding> GetPostRegarding_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PostRegarding>(Service, this.Id, "postregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PostRole (RegardingObjectId)</b></para>
/// <para>Schema Name: recurringappointmentmaster_PostRoles</para>
/// </summary>
public List<PostRole> GetPostRoles_RegardingObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PostRole>(Service, this.Id, "postrole", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PostRole (RegardingObjectId)</b></para>
/// <para>Schema Name: recurringappointmentmaster_PostRoles</para>
/// </summary>
public List<PostRole> GetPostRoles_RegardingObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PostRole>(Service, this.Id, "postrole", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: recurringappointmentmaster_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>FieldSharing (Entity instance)</b></para>
/// <para>Schema Name: recurringappointmentmaster_principalobjectattributeaccess</para>
/// </summary>
public List<FieldSharing> GetFieldSharing_EntityInstance (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<FieldSharing>(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ProcessSession (Regarding)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_ProcessSessions</para>
/// </summary>
public List<ProcessSession> GetProcessSessions_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ProcessSession>(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_QueueItem</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_QueueItem</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SyncError (Record)</b></para>
/// <para>Schema Name: RecurringAppointmentMaster_SyncErrors</para>
/// </summary>
public List<SyncError> GetSyncErrors_Record (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SyncError>(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_recurringappointmentmaster</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_recurringappointmentmaster</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eAppointmentType
{
	///<summary><para>Not Recurring</para>
	///<para>Value = 0</para></summary>
	[Description("Not Recurring")]
	NotRecurring = 0, 
	///<summary><para>Recurring Master</para>
	///<para>Value = 1</para></summary>
	[Description("Recurring Master")]
	RecurringMaster = 1, 
	///<summary><para>Recurring Instance</para>
	///<para>Value = 2</para></summary>
	[Description("Recurring Instance")]
	RecurringInstance = 2, 
	///<summary><para>Recurring Exception</para>
	///<para>Value = 3</para></summary>
	[Description("Recurring Exception")]
	RecurringException = 3, 
	///<summary><para>Recurring Future Exception</para>
	///<para>Value = 4</para></summary>
	[Description("Recurring Future Exception")]
	RecurringFutureException = 4
}
public enum eExpansionStateCode
{
	///<summary><para>Unexpanded</para>
	///<para>Value = 0</para></summary>
	[Description("Unexpanded")]
	Unexpanded = 0, 
	///<summary><para>Partial</para>
	///<para>Value = 1</para></summary>
	[Description("Partial")]
	@Partial = 1, 
	///<summary><para>Full</para>
	///<para>Value = 2</para></summary>
	[Description("Full")]
	Full = 2
}
public enum eInstance
{
	///<summary><para>First</para>
	///<para>Value = 1</para></summary>
	[Description("First")]
	First = 1, 
	///<summary><para>Second</para>
	///<para>Value = 2</para></summary>
	[Description("Second")]
	Second = 2, 
	///<summary><para>Third</para>
	///<para>Value = 3</para></summary>
	[Description("Third")]
	Third = 3, 
	///<summary><para>Fourth</para>
	///<para>Value = 4</para></summary>
	[Description("Fourth")]
	Fourth = 4, 
	///<summary><para>Last</para>
	///<para>Value = 5</para></summary>
	[Description("Last")]
	Last = 5
}
public enum eMonthOfYear
{
	///<summary><para>Invalid Month Of Year</para>
	///<para>Value = 0</para></summary>
	[Description("Invalid Month Of Year")]
	InvalidMonthOfYear = 0, 
	///<summary><para>January</para>
	///<para>Value = 1</para></summary>
	[Description("January")]
	January = 1, 
	///<summary><para>February</para>
	///<para>Value = 2</para></summary>
	[Description("February")]
	February = 2, 
	///<summary><para>March</para>
	///<para>Value = 3</para></summary>
	[Description("March")]
	March = 3, 
	///<summary><para>April</para>
	///<para>Value = 4</para></summary>
	[Description("April")]
	April = 4, 
	///<summary><para>May</para>
	///<para>Value = 5</para></summary>
	[Description("May")]
	May = 5, 
	///<summary><para>June</para>
	///<para>Value = 6</para></summary>
	[Description("June")]
	June = 6, 
	///<summary><para>July</para>
	///<para>Value = 7</para></summary>
	[Description("July")]
	July = 7, 
	///<summary><para>August</para>
	///<para>Value = 8</para></summary>
	[Description("August")]
	August = 8, 
	///<summary><para>September</para>
	///<para>Value = 9</para></summary>
	[Description("September")]
	September = 9, 
	///<summary><para>October</para>
	///<para>Value = 10</para></summary>
	[Description("October")]
	October = 10, 
	///<summary><para>November</para>
	///<para>Value = 11</para></summary>
	[Description("November")]
	November = 11, 
	///<summary><para>December</para>
	///<para>Value = 12</para></summary>
	[Description("December")]
	December = 12
}
public enum ePatternEndType
{
	///<summary><para>No End Date</para>
	///<para>Value = 1</para></summary>
	[Description("No End Date")]
	NoEndDate = 1, 
	///<summary><para>Occurrences</para>
	///<para>Value = 2</para></summary>
	[Description("Occurrences")]
	Occurrences = 2, 
	///<summary><para>Pattern End Date</para>
	///<para>Value = 3</para></summary>
	[Description("Pattern End Date")]
	PatternEndDate = 3
}
public enum ePriority
{
	///<summary><para>Low</para>
	///<para>Value = 0</para></summary>
	[Description("Low")]
	Low = 0, 
	///<summary><para>Normal</para>
	///<para>Value = 1</para></summary>
	[Description("Normal")]
	Normal = 1, 
	///<summary><para>High</para>
	///<para>Value = 2</para></summary>
	[Description("High")]
	High = 2
}
public enum eRecurrencePattern
{
	///<summary><para>Daily</para>
	///<para>Value = 0</para></summary>
	[Description("Daily")]
	Daily = 0, 
	///<summary><para>Weekly</para>
	///<para>Value = 1</para></summary>
	[Description("Weekly")]
	Weekly = 1, 
	///<summary><para>Monthly</para>
	///<para>Value = 2</para></summary>
	[Description("Monthly")]
	Monthly = 2, 
	///<summary><para>Yearly</para>
	///<para>Value = 3</para></summary>
	[Description("Yearly")]
	Yearly = 3
}
public enum eStatus
{
	///<summary><para>Open</para>
	///<para>Value = 0</para></summary>
	[Description("Open")]
	Open = 0, 
	///<summary><para>Completed</para>
	///<para>Value = 1</para></summary>
	[Description("Completed")]
	Completed = 1, 
	///<summary><para>Canceled</para>
	///<para>Value = 2</para></summary>
	[Description("Canceled")]
	Canceled = 2, 
	///<summary><para>Scheduled</para>
	///<para>Value = 3</para></summary>
	[Description("Scheduled")]
	Scheduled = 3
}
public enum eStatusReason
{
	///<summary><para>Free</para>
	///<para>Value = 1</para></summary>
	[Description("Free")]
	Free_Open = 1, 
	///<summary><para>Tentative</para>
	///<para>Value = 2</para></summary>
	[Description("Tentative")]
	Tentative_Open = 2, 
	///<summary><para>Completed</para>
	///<para>Value = 3</para></summary>
	[Description("Completed")]
	Completed_Completed = 3, 
	///<summary><para>Canceled</para>
	///<para>Value = 4</para></summary>
	[Description("Canceled")]
	Canceled_Canceled = 4, 
	///<summary><para>Busy</para>
	///<para>Value = 5</para></summary>
	[Description("Busy")]
	Busy_Scheduled = 5, 
	///<summary><para>Out of Office</para>
	///<para>Value = 6</para></summary>
	[Description("Out of Office")]
	OutOfOffice_Scheduled = 6
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>regardingobjectidyominame</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>subscriptionid</para>
	/// <para>subscriptionid</para></summary>
	public const string SubscriptionId = "subscriptionid";
	/// <summary><para>timezoneruleversionnumber</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>Activity Type</para>
	/// <para>activitytypecode</para></summary>
	public const string ActivityType = "activitytypecode";
	/// <summary><para>All Day Event</para>
	/// <para>isalldayevent</para></summary>
	public const string AllDayEvent = "isalldayevent";
	/// <summary><para>Appointment Type</para>
	/// <para>instancetypecode</para></summary>
	public const string AppointmentType = "instancetypecode";
	/// <summary><para>Category</para>
	/// <para>category</para></summary>
	public const string Category = "category";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Day Of Month</para>
	/// <para>dayofmonth</para></summary>
	public const string DayOfMonth = "dayofmonth";
	/// <summary><para>Days Of Week Mask</para>
	/// <para>daysofweekmask</para></summary>
	public const string DaysOfWeekMask = "daysofweekmask";
	/// <summary><para>Deleted Appointments</para>
	/// <para>deletedexceptionslist</para></summary>
	public const string DeletedAppointments = "deletedexceptionslist";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Duration</para>
	/// <para>duration</para></summary>
	public const string Duration = "duration";
	/// <summary><para>Effective End Date</para>
	/// <para>effectiveenddate</para></summary>
	public const string EffectiveEndDate = "effectiveenddate";
	/// <summary><para>Effective Start Date</para>
	/// <para>effectivestartdate</para></summary>
	public const string EffectiveStartDate = "effectivestartdate";
	/// <summary><para>End Time</para>
	/// <para>scheduledend</para></summary>
	public const string EndTime = "scheduledend";
	/// <summary><para>Every Weekday</para>
	/// <para>isweekdaypattern</para></summary>
	public const string EveryWeekday = "isweekdaypattern";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Expansion State Code</para>
	/// <para>expansionstatecode</para></summary>
	public const string ExpansionStateCode = "expansionstatecode";
	/// <summary><para>First Day Of Week</para>
	/// <para>firstdayofweek</para></summary>
	public const string FirstDayOfWeek = "firstdayofweek";
	/// <summary><para>Group Id</para>
	/// <para>groupid</para></summary>
	public const string GroupId = "groupid";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Instance</para>
	/// <para>instance</para></summary>
	public const string Instance = "instance";
	/// <summary><para>Interval</para>
	/// <para>interval</para></summary>
	public const string Interval = "interval";
	/// <summary><para>Is Billed</para>
	/// <para>isbilled</para></summary>
	public const string IsBilled = "isbilled";
	/// <summary><para>Is Private</para>
	/// <para>ismapiprivate</para></summary>
	public const string IsPrivate = "ismapiprivate";
	/// <summary><para>Is Regular Activity</para>
	/// <para>isregularactivity</para></summary>
	public const string IsRegularActivity = "isregularactivity";
	/// <summary><para>Is Workflow Created</para>
	/// <para>isworkflowcreated</para></summary>
	public const string IsWorkflowCreated = "isworkflowcreated";
	/// <summary><para>Last Expanded Instance Date</para>
	/// <para>lastexpandedinstancedate</para></summary>
	public const string LastExpandedInstanceDate = "lastexpandedinstancedate";
	/// <summary><para>Location</para>
	/// <para>location</para></summary>
	public const string Location = "location";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Month Of Year</para>
	/// <para>monthofyear</para></summary>
	public const string MonthOfYear = "monthofyear";
	/// <summary><para>Next Expanded Instance Date</para>
	/// <para>nextexpansioninstancedate</para></summary>
	public const string NextExpandedInstanceDate = "nextexpansioninstancedate";
	/// <summary><para>Nth Monthly</para>
	/// <para>isnthmonthly</para></summary>
	public const string NthMonthly = "isnthmonthly";
	/// <summary><para>Nth Yearly</para>
	/// <para>isnthyearly</para></summary>
	public const string NthYearly = "isnthyearly";
	/// <summary><para>Occurrences</para>
	/// <para>occurrences</para></summary>
	public const string Occurrences = "occurrences";
	/// <summary><para>Optional Attendees</para>
	/// <para>optionalattendees</para></summary>
	public const string OptionalAttendees = "optionalattendees";
	/// <summary><para>Organizer</para>
	/// <para>organizer</para></summary>
	public const string Organizer = "organizer";
	/// <summary><para>Outlook Recurring Appointment Master</para>
	/// <para>globalobjectid</para></summary>
	public const string OutlookRecurringAppointmentMaster = "globalobjectid";
	/// <summary><para>Outlook Recurring Appointment Master Owner</para>
	/// <para>outlookownerapptid</para></summary>
	public const string OutlookRecurringAppointmentMasterOwner = "outlookownerapptid";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Pattern End Time</para>
	/// <para>endtime</para></summary>
	public const string PatternEndTime = "endtime";
	/// <summary><para>Pattern End Type</para>
	/// <para>patternendtype</para></summary>
	public const string PatternEndType = "patternendtype";
	/// <summary><para>Pattern Start Time</para>
	/// <para>starttime</para></summary>
	public const string PatternStartTime = "starttime";
	/// <summary><para>Priority</para>
	/// <para>prioritycode</para></summary>
	public const string Priority = "prioritycode";
	/// <summary><para>Process</para>
	/// <para>processid</para></summary>
	public const string Process = "processid";
	/// <summary><para>Process Stage</para>
	/// <para>stageid</para></summary>
	public const string ProcessStage = "stageid";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Recurrence Frequency</para>
	/// <para>recurrencepatterntype</para></summary>
	public const string RecurrenceFrequency = "recurrencepatterntype";
	/// <summary><para>Recurrence Range End</para>
	/// <para>patternenddate</para></summary>
	public const string RecurrenceRangeEnd = "patternenddate";
	/// <summary><para>Recurrence Range Start</para>
	/// <para>patternstartdate</para></summary>
	public const string RecurrenceRangeStart = "patternstartdate";
	/// <summary><para>Recurrence Rule</para>
	/// <para>ruleid</para></summary>
	public const string RecurrenceRule = "ruleid";
	/// <summary><para>Recurring Appointment</para>
	/// <para>activityid</para></summary>
	public const string RecurringAppointmentId = "activityid";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Regenerate</para>
	/// <para>isregenerate</para></summary>
	public const string Regenerate = "isregenerate";
	/// <summary><para>Required Attendees</para>
	/// <para>requiredattendees</para></summary>
	public const string RequiredAttendees = "requiredattendees";
	/// <summary><para>Series Status</para>
	/// <para>seriesstatus</para></summary>
	public const string SeriesStatus = "seriesstatus";
	/// <summary><para>Service</para>
	/// <para>serviceid</para></summary>
	public const string Service = "serviceid";
	/// <summary><para>Sort Date</para>
	/// <para>sortdate</para></summary>
	public const string SortDate = "sortdate";
	/// <summary><para>Start Time</para>
	/// <para>scheduledstart</para></summary>
	public const string StartTime = "scheduledstart";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Sub-Category</para>
	/// <para>subcategory</para></summary>
	public const string Sub_Category = "subcategory";
	/// <summary><para>Subject</para>
	/// <para>subject</para></summary>
	public const string Subject = "subject";
	/// <summary><para>Traversed Path</para>
	/// <para>traversedpath</para></summary>
	public const string TraversedPath = "traversedpath";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
}

    }
}
