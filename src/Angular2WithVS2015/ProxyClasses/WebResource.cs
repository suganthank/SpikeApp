// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("webresource")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class WebResource : BaseProxyClass
    {
        public new const string LogicalName = "webresource";
        public const int ObjectTypeCode = 9333;
        public const string PrimaryIdAttribute = "webresourceid";
        public const string PrimaryNameAttribute = "name";
        
        static WebResource()
        {
            BaseProxyClass.RegisterProxyType(typeof(WebResource), "webresource");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public WebResource() : base(new Entity("webresource")) { }
        public WebResource(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<WebResource>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? IsManaged
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: content</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("content")]
public string Content
{
	get { return this.GetPropertyValue<string>("content"); }
	set { this.SetPropertyValue("content", value, 1073741823, "Content"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: webresourceidunique</para>
///</summary>
[AttributeLogicalNameAttribute("webresourceidunique")]
public Guid WebResourceIdUnique
{
	get { return this.GetPropertyValue<Guid>("webresourceidunique"); }
}
///<summary>
///<para>Logical Name: canbedeleted</para>
///</summary>
[AttributeLogicalNameAttribute("canbedeleted")]
public BooleanManagedProperty CanBeDeleted
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("canbedeleted"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("canbedeleted", value, "CanBeDeleted"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate2
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: iscustomizable</para>
///</summary>
[AttributeLogicalNameAttribute("iscustomizable")]
public BooleanManagedProperty Customizable
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("iscustomizable"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("iscustomizable", value, "Customizable"); }
}
///<summary>
///<para>Logical Name: dependencyxml</para>
///<para>Max Length: 5000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("dependencyxml")]
public string DependencyXML
{
	get { return this.GetPropertyValue<string>("dependencyxml"); }
	set { this.SetPropertyValue("dependencyxml", value, 5000, "DependencyXML"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: displayname</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("displayname")]
public string DisplayName
{
	get { return this.GetPropertyValue<string>("displayname"); }
	set { this.SetPropertyValue("displayname", value, 200, "DisplayName"); }
}
///<summary>
///<para>Logical Name: ishidden</para>
///</summary>
[AttributeLogicalNameAttribute("ishidden")]
public BooleanManagedProperty Hidden
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("ishidden"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("ishidden", value, "Hidden"); }
}
///<summary>
///<para>Logical Name: introducedversion</para>
///<para>Max Length: 48 characters</para>
///</summary>
[AttributeLogicalNameAttribute("introducedversion")]
public string IntroducedVersion
{
	get { return this.GetPropertyValue<string>("introducedversion"); }
	set { this.SetPropertyValue("introducedversion", value, 48, "IntroducedVersion"); }
}
///<summary>
///<para>Logical Name: isavailableformobileoffline</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isavailableformobileoffline")]
public bool? IsAvailableForMobileOffline
{
	get { return this.GetPropertyValue<bool?>("isavailableformobileoffline"); }
	set { this.SetPropertyValue<bool?>("isavailableformobileoffline", value, "IsAvailableForMobileOffline"); }
}
///<summary>
///<para>Logical Name: isenabledformobileclient</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isenabledformobileclient")]
public bool? IsEnabledForMobileClient
{
	get { return this.GetPropertyValue<bool?>("isenabledformobileclient"); }
	set { this.SetPropertyValue<bool?>("isenabledformobileclient", value, "IsEnabledForMobileClient"); }
}
///<summary>
///<para>Logical Name: languagecode</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("languagecode")]
public int? Language
{
	get { return this.GetPropertyValue<int?>("languagecode"); }
	set { this.SetPropertyValue("languagecode", (int?)value, (int)0, (int)2147483647, "Language"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 256, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? RecordOverwriteTime
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Logical Name: silverlightversion</para>
///<para>Max Length: 20 characters</para>
///</summary>
[AttributeLogicalNameAttribute("silverlightversion")]
public string SilverlightVersion
{
	get { return this.GetPropertyValue<string>("silverlightversion"); }
	set { this.SetPropertyValue("silverlightversion", value, 20, "SilverlightVersion"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
/// <summary>
///Logical Name: webresourcetype
/// </summary>
[AttributeLogicalNameAttribute("webresourcetype")]
public eType? Type
{
	get
	{
		if (Type_OptionSetValue != null) { return (eType)Type_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Type_OptionSetValue = new OptionSetValue((int)value); }
		else this.Type_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: webresourcetype</para>
///</summary>
[AttributeLogicalNameAttribute("webresourcetype")]
public OptionSetValue Type_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("webresourcetype"); }
	set { this.SetPropertyValue<OptionSetValue>("webresourcetype", value, "Type_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Type_Text(IOrganizationService Service)
{
	return this.Type_OptionSetValue.GetOptionSetText(Service, this, "webresourcetype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Type_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Type_OptionSetValue.Value);
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: webresourceid</para>
///</summary>
[AttributeLogicalNameAttribute("webresourceid")]
public Guid WebResourceIdentifierId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}


        /// <summary>
/// <para><b>SystemChart (Web Resource)</b></para>
/// <para>Schema Name: webresource_savedqueryvisualizations</para>
/// </summary>
public List<SystemChart> GetSystemCharts_WebResource (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemChart>(Service, this.Id, "savedqueryvisualization", "webresourceid", Columns); }
/// <summary>
/// <para><b>SystemChart (Web Resource)</b></para>
/// <para>Schema Name: webresource_savedqueryvisualizations</para>
/// </summary>
public List<SystemChart> GetSystemCharts_WebResource (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemChart>(Service, this.Id, "savedqueryvisualization", "webresourceid", Columns); }
/// <summary>
/// <para><b>Solution (Configuration Page)</b></para>
/// <para>Schema Name: solution_configuration_webresource</para>
/// </summary>
public List<Solution> GetSolutions_ConfigurationPage (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Solution>(Service, this.Id, "solution", "configurationpageid", Columns); }
/// <summary>
/// <para><b>Solution (Configuration Page)</b></para>
/// <para>Schema Name: solution_configuration_webresource</para>
/// </summary>
public List<Solution> GetSolutions_ConfigurationPage (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Solution>(Service, this.Id, "solution", "configurationpageid", Columns); }
/// <summary>
/// <para><b>Theme (Logo)</b></para>
/// <para>Schema Name: lk_theme_logoid</para>
/// </summary>
public List<Theme> GetThemes_Logo (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Theme>(Service, this.Id, "theme", "logoid", Columns); }
/// <summary>
/// <para><b>Theme (Logo)</b></para>
/// <para>Schema Name: lk_theme_logoid</para>
/// </summary>
public List<Theme> GetThemes_Logo (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Theme>(Service, this.Id, "theme", "logoid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_webresource</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_webresource</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserChart (Web Resource)</b></para>
/// <para>Schema Name: webresource_userqueryvisualizations</para>
/// </summary>
public List<UserChart> GetUserCharts_WebResource (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserChart>(Service, this.Id, "userqueryvisualization", "webresourceid", Columns); }
/// <summary>
/// <para><b>UserChart (Web Resource)</b></para>
/// <para>Schema Name: webresource_userqueryvisualizations</para>
/// </summary>
public List<UserChart> GetUserCharts_WebResource (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserChart>(Service, this.Id, "userqueryvisualization", "webresourceid", Columns); }


        

        

        public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eType
{
	///<summary><para>Webpage (HTML)</para>
	///<para>Value = 1</para></summary>
	[Description("Webpage (HTML)")]
	Webpage_HTML = 1, 
	///<summary><para>Style Sheet (CSS)</para>
	///<para>Value = 2</para></summary>
	[Description("Style Sheet (CSS)")]
	StyleSheet_CSS = 2, 
	///<summary><para>Script (JScript)</para>
	///<para>Value = 3</para></summary>
	[Description("Script (JScript)")]
	Script_JScript = 3, 
	///<summary><para>Data (XML)</para>
	///<para>Value = 4</para></summary>
	[Description("Data (XML)")]
	Data_XML = 4, 
	///<summary><para>PNG format</para>
	///<para>Value = 5</para></summary>
	[Description("PNG format")]
	PNGFormat = 5, 
	///<summary><para>JPG format</para>
	///<para>Value = 6</para></summary>
	[Description("JPG format")]
	JPGFormat = 6, 
	///<summary><para>GIF format</para>
	///<para>Value = 7</para></summary>
	[Description("GIF format")]
	GIFFormat = 7, 
	///<summary><para>Silverlight (XAP)</para>
	///<para>Value = 8</para></summary>
	[Description("Silverlight (XAP)")]
	Silverlight_XAP = 8, 
	///<summary><para>Style Sheet (XSL)</para>
	///<para>Value = 9</para></summary>
	[Description("Style Sheet (XSL)")]
	StyleSheet_XSL = 9, 
	///<summary><para>ICO format</para>
	///<para>Value = 10</para></summary>
	[Description("ICO format")]
	ICOFormat = 10
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>ismanaged</para>
	/// <para>ismanaged</para></summary>
	public const string IsManaged = "ismanaged";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>content</para>
	/// <para>content</para></summary>
	public const string Content = "content";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>webresourceidunique</para>
	/// <para>webresourceidunique</para></summary>
	public const string WebResourceIdUnique = "webresourceidunique";
	/// <summary><para>Can Be Deleted</para>
	/// <para>canbedeleted</para></summary>
	public const string CanBeDeleted = "canbedeleted";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate2 = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Customizable</para>
	/// <para>iscustomizable</para></summary>
	public const string Customizable = "iscustomizable";
	/// <summary><para>DependencyXML</para>
	/// <para>dependencyxml</para></summary>
	public const string DependencyXML = "dependencyxml";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Display Name</para>
	/// <para>displayname</para></summary>
	public const string DisplayName = "displayname";
	/// <summary><para>Hidden</para>
	/// <para>ishidden</para></summary>
	public const string Hidden = "ishidden";
	/// <summary><para>Introduced Version</para>
	/// <para>introducedversion</para></summary>
	public const string IntroducedVersion = "introducedversion";
	/// <summary><para>Is Available For Mobile Offline</para>
	/// <para>isavailableformobileoffline</para></summary>
	public const string IsAvailableForMobileOffline = "isavailableformobileoffline";
	/// <summary><para>Is Enabled For Mobile Client</para>
	/// <para>isenabledformobileclient</para></summary>
	public const string IsEnabledForMobileClient = "isenabledformobileclient";
	/// <summary><para>Language</para>
	/// <para>languagecode</para></summary>
	public const string Language = "languagecode";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Record Overwrite Time</para>
	/// <para>overwritetime</para></summary>
	public const string RecordOverwriteTime = "overwritetime";
	/// <summary><para>Silverlight Version</para>
	/// <para>silverlightversion</para></summary>
	public const string SilverlightVersion = "silverlightversion";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
	/// <summary><para>Type</para>
	/// <para>webresourcetype</para></summary>
	public const string Type = "webresourcetype";
	/// <summary><para>Web Resource Identifier</para>
	/// <para>webresourceid</para></summary>
	public const string WebResourceIdentifierId = "webresourceid";
}

    }
}
