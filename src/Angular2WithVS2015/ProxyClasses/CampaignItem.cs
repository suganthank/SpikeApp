// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("campaignitem")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class CampaignItem : BaseProxyClass
    {
        public new const string LogicalName = "campaignitem";
        public const int ObjectTypeCode = 4403;
        public const string PrimaryIdAttribute = "campaignitemid";
        public const string PrimaryNameAttribute = "";
        
        static CampaignItem()
        {
            BaseProxyClass.RegisterProxyType(typeof(CampaignItem), "campaignitem");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public CampaignItem() : base(new Entity("campaignitem")) { }
        public CampaignItem(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<CampaignItem>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: entityid</para>
///</summary>
[AttributeLogicalNameAttribute("entityid")]
public Guid EntityId
{
	get { return this.GetPropertyValue<Guid>("entityid"); }
	set { this.SetPropertyValue<Guid>("entityid", value, "EntityId"); }
}
///<summary>
///<para>Logical Name: entitytype</para>
///</summary>
[AttributeLogicalNameAttribute("entitytype")]
public string EntityType
{
	get { return this.GetPropertyValue<string>("entitytype"); }
	set { this.SetPropertyValue<string>("entitytype", value, "EntityType"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: campaignid</para>
///</summary>
[AttributeLogicalNameAttribute("campaignid")]
public EntityReference CampaignId
{
	get { return this.GetPropertyValue<EntityReference>("campaignid"); }
	set { this.SetPropertyValue<EntityReference>("campaignid", value, "CampaignId"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: campaignitemid</para>
///</summary>
[AttributeLogicalNameAttribute("campaignitemid")]
public Guid CampaignItemId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public Guid OwningUser
{
	get { return this.GetPropertyValue<Guid>("owninguser"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public Guid OwningBusinessUnit
{
	get { return this.GetPropertyValue<Guid>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
}


        /// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_campaignitem</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_campaignitem</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>Campaign</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignsalesliterature_association</para>
/// </summary>
public List<Campaign> GetCampaigns (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public List<Campaign> GetCampaigns (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public void RelateCampaigns (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignsalesliterature_association", Items); }
public void RelateCampaigns (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignsalesliterature_association", Items); }
public void UnRelateCampaigns (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignsalesliterature_association", Items); }
public void UnRelateCampaigns (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignsalesliterature_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Campaign</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaigncampaign_association</para>
/// </summary>
public List<Campaign> GetCampaigns2 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public List<Campaign> GetCampaigns2 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public void RelateCampaigns2 (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaigncampaign_association", Items); }
public void RelateCampaigns2 (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaigncampaign_association", Items); }
public void UnRelateCampaigns2 (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaigncampaign_association", Items); }
public void UnRelateCampaigns2 (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaigncampaign_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Campaign</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignproduct_association</para>
/// </summary>
public List<Campaign> GetCampaigns3 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public List<Campaign> GetCampaigns3 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public void RelateCampaigns3 (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignproduct_association", Items); }
public void RelateCampaigns3 (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignproduct_association", Items); }
public void UnRelateCampaigns3 (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignproduct_association", Items); }
public void UnRelateCampaigns3 (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignproduct_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Campaign</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: campaignlist_association</para>
/// </summary>
public List<Campaign> GetCampaigns4 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public List<Campaign> GetCampaigns4 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Campaign>(Service, this, "campaignitem", "campaignitemid", "campaign", "campaignid", "campaignitem", "entityid", "campaignid", Columns); }
public void RelateCampaigns4 (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "campaignlist_association", Items); }
public void RelateCampaigns4 (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "campaignlist_association", Items); }
public void UnRelateCampaigns4 (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "campaignlist_association", Items); }
public void UnRelateCampaigns4 (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "campaignlist_association", Items); }


        

        

        public static class Properties
{
	/// <summary><para>entityid</para>
	/// <para>entityid</para></summary>
	public const string EntityId = "entityid";
	/// <summary><para>entitytype</para>
	/// <para>entitytype</para></summary>
	public const string EntityType = "entitytype";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>campaignid</para>
	/// <para>campaignid</para></summary>
	public const string CampaignId = "campaignid";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>campaignitemid</para>
	/// <para>campaignitemid</para></summary>
	public const string CampaignItemId = "campaignitemid";
	/// <summary><para>owninguser</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>owningbusinessunit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
}

    }
}
