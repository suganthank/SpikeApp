// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("recurrencerule")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class RecurrenceRule : BaseProxyClass
    {
        public new const string LogicalName = "recurrencerule";
        public const int ObjectTypeCode = 4250;
        public const string PrimaryIdAttribute = "ruleid";
        public const string PrimaryNameAttribute = "";
        
        static RecurrenceRule()
        {
            BaseProxyClass.RegisterProxyType(typeof(RecurrenceRule), "recurrencerule");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public RecurrenceRule() : base(new Entity("recurrencerule")) { }
        public RecurrenceRule(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<RecurrenceRule>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference CreatedBy_Delegate2
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: dayofmonth</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 31</para>
///</summary>
[AttributeLogicalNameAttribute("dayofmonth")]
public int? DayOfMonth
{
	get { return this.GetPropertyValue<int?>("dayofmonth"); }
	set { this.SetPropertyValue("dayofmonth", (int?)value, (int)0, (int)31, "DayOfMonth"); }
}
///<summary>
///<para>Logical Name: daysofweekmask</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 127</para>
///</summary>
[AttributeLogicalNameAttribute("daysofweekmask")]
public int? DaysOfWeekMask
{
	get { return this.GetPropertyValue<int?>("daysofweekmask"); }
	set { this.SetPropertyValue("daysofweekmask", (int?)value, (int)1, (int)127, "DaysOfWeekMask"); }
}
///<summary>
///<para>Logical Name: duration</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("duration")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("duration"); }
	set { this.SetPropertyValue("duration", (int?)value, (int)0, (int)2147483647, "Duration"); }
}
///<summary>
///<para>Logical Name: effectiveenddate</para>
///</summary>
[AttributeLogicalNameAttribute("effectiveenddate")]
public DateTime? EffectiveEndDate
{
	get { return this.GetPropertyValue<DateTime?>("effectiveenddate"); }
	set { this.SetPropertyValue<DateTime?>("effectiveenddate", value, "EffectiveEndDate"); }
}
///<summary>
///<para>Logical Name: effectivestartdate</para>
///</summary>
[AttributeLogicalNameAttribute("effectivestartdate")]
public DateTime? EffectiveStartDate
{
	get { return this.GetPropertyValue<DateTime?>("effectivestartdate"); }
	set { this.SetPropertyValue<DateTime?>("effectivestartdate", value, "EffectiveStartDate"); }
}
///<summary>
///<para>Logical Name: endtime</para>
///</summary>
[AttributeLogicalNameAttribute("endtime")]
public DateTime? EndTime
{
	get { return this.GetPropertyValue<DateTime?>("endtime"); }
	set { this.SetPropertyValue<DateTime?>("endtime", value, "EndTime"); }
}
///<summary>
///<para>Logical Name: isweekdaypattern</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isweekdaypattern")]
public bool? EveryWeekday
{
	get { return this.GetPropertyValue<bool?>("isweekdaypattern"); }
	set { this.SetPropertyValue<bool?>("isweekdaypattern", value, "EveryWeekday"); }
}
///<summary>
///<para>Logical Name: firstdayofweek</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 6</para>
///</summary>
[AttributeLogicalNameAttribute("firstdayofweek")]
public int? FirstDayOfWeek
{
	get { return this.GetPropertyValue<int?>("firstdayofweek"); }
	set { this.SetPropertyValue("firstdayofweek", (int?)value, (int)0, (int)6, "FirstDayOfWeek"); }
}
/// <summary>
///Logical Name: instance
/// </summary>
[AttributeLogicalNameAttribute("instance")]
public eInstance? Instance
{
	get
	{
		if (Instance_OptionSetValue != null) { return (eInstance)Instance_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Instance_OptionSetValue = new OptionSetValue((int)value); }
		else this.Instance_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: instance</para>
///</summary>
[AttributeLogicalNameAttribute("instance")]
public OptionSetValue Instance_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("instance"); }
	set { this.SetPropertyValue<OptionSetValue>("instance", value, "Instance_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Instance_Text(IOrganizationService Service)
{
	return this.Instance_OptionSetValue.GetOptionSetText(Service, this, "instance");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Instance_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Instance_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: interval</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 1000</para>
///</summary>
[AttributeLogicalNameAttribute("interval")]
public int? Interval
{
	get { return this.GetPropertyValue<int?>("interval"); }
	set { this.SetPropertyValue("interval", (int?)value, (int)1, (int)1000, "Interval"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
/// <summary>
///Logical Name: monthofyear
/// </summary>
[AttributeLogicalNameAttribute("monthofyear")]
public eMonthOfYear? MonthOfYear
{
	get
	{
		if (MonthOfYear_OptionSetValue != null) { return (eMonthOfYear)MonthOfYear_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.MonthOfYear_OptionSetValue = new OptionSetValue((int)value); }
		else this.MonthOfYear_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: monthofyear</para>
///</summary>
[AttributeLogicalNameAttribute("monthofyear")]
public OptionSetValue MonthOfYear_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("monthofyear"); }
	set { this.SetPropertyValue<OptionSetValue>("monthofyear", value, "MonthOfYear_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string MonthOfYear_Text(IOrganizationService Service)
{
	return this.MonthOfYear_OptionSetValue.GetOptionSetText(Service, this, "monthofyear");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string MonthOfYear_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.MonthOfYear_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: isnthmonthly</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isnthmonthly")]
public bool? NthMonthly
{
	get { return this.GetPropertyValue<bool?>("isnthmonthly"); }
	set { this.SetPropertyValue<bool?>("isnthmonthly", value, "NthMonthly"); }
}
///<summary>
///<para>Logical Name: isnthyearly</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isnthyearly")]
public bool? NthYearly
{
	get { return this.GetPropertyValue<bool?>("isnthyearly"); }
	set { this.SetPropertyValue<bool?>("isnthyearly", value, "NthYearly"); }
}
///<summary>
///<para>Logical Name: objecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("objecttypecode")]
public string ObjectType
{
	get { return this.GetPropertyValue<string>("objecttypecode"); }
	set { this.SetPropertyValue<string>("objecttypecode", value, "ObjectType"); }
}
///<summary>
///<para>Logical Name: occurrences</para>
///<para>Minimum Value: 1</para>
///<para>Maximum Value: 999</para>
///</summary>
[AttributeLogicalNameAttribute("occurrences")]
public int? Occurrences
{
	get { return this.GetPropertyValue<int?>("occurrences"); }
	set { this.SetPropertyValue("occurrences", (int?)value, (int)1, (int)999, "Occurrences"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
/// <summary>
///Logical Name: patternendtype
/// </summary>
[AttributeLogicalNameAttribute("patternendtype")]
public ePatternEndType? PatternEndType
{
	get
	{
		if (PatternEndType_OptionSetValue != null) { return (ePatternEndType)PatternEndType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PatternEndType_OptionSetValue = new OptionSetValue((int)value); }
		else this.PatternEndType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: patternendtype</para>
///</summary>
[AttributeLogicalNameAttribute("patternendtype")]
public OptionSetValue PatternEndType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("patternendtype"); }
	set { this.SetPropertyValue<OptionSetValue>("patternendtype", value, "PatternEndType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string PatternEndType_Text(IOrganizationService Service)
{
	return this.PatternEndType_OptionSetValue.GetOptionSetText(Service, this, "patternendtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string PatternEndType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.PatternEndType_OptionSetValue.Value);
}
/// <summary>
///Logical Name: recurrencepatterntype
/// </summary>
[AttributeLogicalNameAttribute("recurrencepatterntype")]
public eRecurrencePattern? RecurrencePattern
{
	get
	{
		if (RecurrencePattern_OptionSetValue != null) { return (eRecurrencePattern)RecurrencePattern_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.RecurrencePattern_OptionSetValue = new OptionSetValue((int)value); }
		else this.RecurrencePattern_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: recurrencepatterntype</para>
///</summary>
[AttributeLogicalNameAttribute("recurrencepatterntype")]
public OptionSetValue RecurrencePattern_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("recurrencepatterntype"); }
	set { this.SetPropertyValue<OptionSetValue>("recurrencepatterntype", value, "RecurrencePattern_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string RecurrencePattern_Text(IOrganizationService Service)
{
	return this.RecurrencePattern_OptionSetValue.GetOptionSetText(Service, this, "recurrencepatterntype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string RecurrencePattern_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.RecurrencePattern_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: patternenddate</para>
///</summary>
[AttributeLogicalNameAttribute("patternenddate")]
public DateTime? RecurrenceRangeEnd
{
	get { return this.GetPropertyValue<DateTime?>("patternenddate"); }
	set { this.SetPropertyValue<DateTime?>("patternenddate", value, "RecurrenceRangeEnd"); }
}
///<summary>
///<para>Logical Name: patternstartdate</para>
///</summary>
[AttributeLogicalNameAttribute("patternstartdate")]
public DateTime? RecurrenceRangeStart
{
	get { return this.GetPropertyValue<DateTime?>("patternstartdate"); }
	set { this.SetPropertyValue<DateTime?>("patternstartdate", value, "RecurrenceRangeStart"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: ruleid</para>
///</summary>
[AttributeLogicalNameAttribute("ruleid")]
public Guid RecurrenceRuleId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: objectid</para>
///</summary>
[AttributeLogicalNameAttribute("objectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("objectid"); }
	set { this.SetPropertyValue<EntityReference>("objectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: isregenerate</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isregenerate")]
public bool? Regenerate
{
	get { return this.GetPropertyValue<bool?>("isregenerate"); }
	set { this.SetPropertyValue<bool?>("isregenerate", value, "Regenerate"); }
}
///<summary>
///<para>Logical Name: starttime</para>
///</summary>
[AttributeLogicalNameAttribute("starttime")]
public DateTime? StartTime
{
	get { return this.GetPropertyValue<DateTime?>("starttime"); }
	set { this.SetPropertyValue<DateTime?>("starttime", value, "StartTime"); }
}


        /// <summary>
/// <para><b>RecurringAppointment (Recurring Appointment)</b></para>
/// <para>Schema Name: recurrencerule_recurringappointmentmaster</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_RecurringAppointment (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "activityid", Columns); }
/// <summary>
/// <para><b>RecurringAppointment (Recurring Appointment)</b></para>
/// <para>Schema Name: recurrencerule_recurringappointmentmaster</para>
/// </summary>
public List<RecurringAppointment> GetRecurringAppointments_RecurringAppointment (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<RecurringAppointment>(Service, this.Id, "recurringappointmentmaster", "activityid", Columns); }


        

        

        public enum eInstance
{
	///<summary><para>First</para>
	///<para>Value = 1</para></summary>
	[Description("First")]
	First = 1, 
	///<summary><para>Second</para>
	///<para>Value = 2</para></summary>
	[Description("Second")]
	Second = 2, 
	///<summary><para>Third</para>
	///<para>Value = 3</para></summary>
	[Description("Third")]
	Third = 3, 
	///<summary><para>Fourth</para>
	///<para>Value = 4</para></summary>
	[Description("Fourth")]
	Fourth = 4, 
	///<summary><para>Last</para>
	///<para>Value = 5</para></summary>
	[Description("Last")]
	Last = 5
}
public enum eMonthOfYear
{
	///<summary><para>Invalid Month Of Year</para>
	///<para>Value = 0</para></summary>
	[Description("Invalid Month Of Year")]
	InvalidMonthOfYear = 0, 
	///<summary><para>January</para>
	///<para>Value = 1</para></summary>
	[Description("January")]
	January = 1, 
	///<summary><para>February</para>
	///<para>Value = 2</para></summary>
	[Description("February")]
	February = 2, 
	///<summary><para>March</para>
	///<para>Value = 3</para></summary>
	[Description("March")]
	March = 3, 
	///<summary><para>April</para>
	///<para>Value = 4</para></summary>
	[Description("April")]
	April = 4, 
	///<summary><para>May</para>
	///<para>Value = 5</para></summary>
	[Description("May")]
	May = 5, 
	///<summary><para>June</para>
	///<para>Value = 6</para></summary>
	[Description("June")]
	June = 6, 
	///<summary><para>July</para>
	///<para>Value = 7</para></summary>
	[Description("July")]
	July = 7, 
	///<summary><para>August</para>
	///<para>Value = 8</para></summary>
	[Description("August")]
	August = 8, 
	///<summary><para>September</para>
	///<para>Value = 9</para></summary>
	[Description("September")]
	September = 9, 
	///<summary><para>October</para>
	///<para>Value = 10</para></summary>
	[Description("October")]
	October = 10, 
	///<summary><para>November</para>
	///<para>Value = 11</para></summary>
	[Description("November")]
	November = 11, 
	///<summary><para>December</para>
	///<para>Value = 12</para></summary>
	[Description("December")]
	December = 12
}
public enum ePatternEndType
{
	///<summary><para>No End Date</para>
	///<para>Value = 1</para></summary>
	[Description("No End Date")]
	NoEndDate = 1, 
	///<summary><para>Occurrences</para>
	///<para>Value = 2</para></summary>
	[Description("Occurrences")]
	Occurrences = 2, 
	///<summary><para>Pattern End Date</para>
	///<para>Value = 3</para></summary>
	[Description("Pattern End Date")]
	PatternEndDate = 3
}
public enum eRecurrencePattern
{
	///<summary><para>Daily</para>
	///<para>Value = 0</para></summary>
	[Description("Daily")]
	Daily = 0, 
	///<summary><para>Weekly</para>
	///<para>Value = 1</para></summary>
	[Description("Weekly")]
	Weekly = 1, 
	///<summary><para>Monthly</para>
	///<para>Value = 2</para></summary>
	[Description("Monthly")]
	Monthly = 2, 
	///<summary><para>Yearly</para>
	///<para>Value = 3</para></summary>
	[Description("Yearly")]
	Yearly = 3
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string CreatedBy_Delegate2 = "modifiedonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Day Of Month</para>
	/// <para>dayofmonth</para></summary>
	public const string DayOfMonth = "dayofmonth";
	/// <summary><para>Days Of Week Mask</para>
	/// <para>daysofweekmask</para></summary>
	public const string DaysOfWeekMask = "daysofweekmask";
	/// <summary><para>Duration</para>
	/// <para>duration</para></summary>
	public const string Duration = "duration";
	/// <summary><para>Effective End Date</para>
	/// <para>effectiveenddate</para></summary>
	public const string EffectiveEndDate = "effectiveenddate";
	/// <summary><para>Effective Start Date</para>
	/// <para>effectivestartdate</para></summary>
	public const string EffectiveStartDate = "effectivestartdate";
	/// <summary><para>End Time</para>
	/// <para>endtime</para></summary>
	public const string EndTime = "endtime";
	/// <summary><para>Every Weekday</para>
	/// <para>isweekdaypattern</para></summary>
	public const string EveryWeekday = "isweekdaypattern";
	/// <summary><para>First Day Of Week</para>
	/// <para>firstdayofweek</para></summary>
	public const string FirstDayOfWeek = "firstdayofweek";
	/// <summary><para>Instance</para>
	/// <para>instance</para></summary>
	public const string Instance = "instance";
	/// <summary><para>Interval</para>
	/// <para>interval</para></summary>
	public const string Interval = "interval";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Month Of Year</para>
	/// <para>monthofyear</para></summary>
	public const string MonthOfYear = "monthofyear";
	/// <summary><para>Nth Monthly</para>
	/// <para>isnthmonthly</para></summary>
	public const string NthMonthly = "isnthmonthly";
	/// <summary><para>Nth Yearly</para>
	/// <para>isnthyearly</para></summary>
	public const string NthYearly = "isnthyearly";
	/// <summary><para>Object Type </para>
	/// <para>objecttypecode</para></summary>
	public const string ObjectType = "objecttypecode";
	/// <summary><para>Occurrences</para>
	/// <para>occurrences</para></summary>
	public const string Occurrences = "occurrences";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Pattern End Type</para>
	/// <para>patternendtype</para></summary>
	public const string PatternEndType = "patternendtype";
	/// <summary><para>Recurrence Pattern</para>
	/// <para>recurrencepatterntype</para></summary>
	public const string RecurrencePattern = "recurrencepatterntype";
	/// <summary><para>Recurrence Range End</para>
	/// <para>patternenddate</para></summary>
	public const string RecurrenceRangeEnd = "patternenddate";
	/// <summary><para>Recurrence Range Start</para>
	/// <para>patternstartdate</para></summary>
	public const string RecurrenceRangeStart = "patternstartdate";
	/// <summary><para>Recurrence Rule</para>
	/// <para>ruleid</para></summary>
	public const string RecurrenceRuleId = "ruleid";
	/// <summary><para>Regarding</para>
	/// <para>objectid</para></summary>
	public const string Regarding = "objectid";
	/// <summary><para>Regenerate</para>
	/// <para>isregenerate</para></summary>
	public const string Regenerate = "isregenerate";
	/// <summary><para>Start Time</para>
	/// <para>starttime</para></summary>
	public const string StartTime = "starttime";
}

    }
}
