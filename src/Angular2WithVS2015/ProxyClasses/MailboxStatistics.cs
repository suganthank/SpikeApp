// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("mailboxstatistics")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class MailboxStatistics : BaseProxyClass
    {
        public new const string LogicalName = "mailboxstatistics";
        public const int ObjectTypeCode = 9607;
        public const string PrimaryIdAttribute = "mailboxstatisticsid";
        public const string PrimaryNameAttribute = "";
        
        static MailboxStatistics()
        {
            BaseProxyClass.RegisterProxyType(typeof(MailboxStatistics), "mailboxstatistics");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public MailboxStatistics() : base(new Entity("mailboxstatistics")) { }
        public MailboxStatistics(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<MailboxStatistics>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: mailboxstatisticsid</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxstatisticsid")]
public Guid MailboxStatisticsId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: asynceventid</para>
///</summary>
[AttributeLogicalNameAttribute("asynceventid")]
public Guid AsyncEventId
{
	get { return this.GetPropertyValue<Guid>("asynceventid"); }
}
///<summary>
///<para>Logical Name: mailboxprocesscompletedon</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxprocesscompletedon")]
public DateTime? EndTimeForProcessing
{
	get { return this.GetPropertyValue<DateTime?>("mailboxprocesscompletedon"); }
}
///<summary>
///<para>Logical Name: individualstepdurations</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("individualstepdurations")]
public string IndividualStepDurations
{
	get { return this.GetPropertyValue<string>("individualstepdurations"); }
}
///<summary>
///<para>Logical Name: itemsfailed</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("itemsfailed")]
public int? ItemsFailed
{
	get { return this.GetPropertyValue<int?>("itemsfailed"); }
}
///<summary>
///<para>Logical Name: crmitemsbacklog</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("crmitemsbacklog")]
public int? ItemsInCRMLeftToProcess
{
	get { return this.GetPropertyValue<int?>("crmitemsbacklog"); }
}
///<summary>
///<para>Logical Name: itemsprocessed</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("itemsprocessed")]
public int? ItemsProcessed
{
	get { return this.GetPropertyValue<int?>("itemsprocessed"); }
}
///<summary>
///<para>Logical Name: machinename</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("machinename")]
public string MachineName
{
	get { return this.GetPropertyValue<string>("machinename"); }
}
/// <summary>
///Logical Name: operationtypeid
/// </summary>
[AttributeLogicalNameAttribute("operationtypeid")]
public eIncomingEmail_OutgoingEmailAndACT? MailboxOperationType
{
	get
	{
		if (MailboxOperationType_OptionSetValue != null) { return (eIncomingEmail_OutgoingEmailAndACT)MailboxOperationType_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: operationtypeid</para>
///</summary>
[AttributeLogicalNameAttribute("operationtypeid")]
public OptionSetValue MailboxOperationType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("operationtypeid"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string MailboxOperationType_Text(IOrganizationService Service)
{
	return this.MailboxOperationType_OptionSetValue.GetOptionSetText(Service, this, "operationtypeid");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string MailboxOperationType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.MailboxOperationType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: processtimeintervalinminutes</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("processtimeintervalinminutes")]
public int? ProcessDuration
{
	get { return this.GetPropertyValue<int?>("processtimeintervalinminutes"); }
}
///<summary>
///<para>Logical Name: processresult</para>
///<para>True = Success</para>
///<para>False = Failure</para>
///</summary>
[AttributeLogicalNameAttribute("processresult")]
public bool? ProcessResult
{
	get { return this.GetPropertyValue<bool?>("processresult"); }
}
///<summary>
///<para>Logical Name: scheduledtimeintervalinminutes</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledtimeintervalinminutes")]
public int? QueueDuration
{
	get { return this.GetPropertyValue<int?>("scheduledtimeintervalinminutes"); }
}
///<summary>
///<para>Logical Name: mailboxid</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxid")]
public EntityReference RegardingMailbox
{
	get { return this.GetPropertyValue<EntityReference>("mailboxid"); }
}
///<summary>
///<para>Logical Name: mailboxprocessscheduledon</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxprocessscheduledon")]
public DateTime? ScheduledTimeForProcessing
{
	get { return this.GetPropertyValue<DateTime?>("mailboxprocessscheduledon"); }
}
///<summary>
///<para>Logical Name: mailboxprocessstartedon</para>
///</summary>
[AttributeLogicalNameAttribute("mailboxprocessstartedon")]
public DateTime? StartTimeForProcessing
{
	get { return this.GetPropertyValue<DateTime?>("mailboxprocessstartedon"); }
}


        

        

        

        public enum eIncomingEmail_OutgoingEmailAndACT
{
	///<summary><para>Incoming Email</para>
	///<para>Value = 0</para></summary>
	[Description("Incoming Email")]
	IncomingEmail = 0, 
	///<summary><para>Outgoing Email</para>
	///<para>Value = 1</para></summary>
	[Description("Outgoing Email")]
	OutgoingEmail = 1, 
	///<summary><para>ACT</para>
	///<para>Value = 2</para></summary>
	[Description("ACT")]
	ACT = 2
}


        public static class Properties
{
	/// <summary><para>mailboxstatisticsid</para>
	/// <para>mailboxstatisticsid</para></summary>
	public const string MailboxStatisticsId = "mailboxstatisticsid";
	/// <summary><para>Async Event Id</para>
	/// <para>asynceventid</para></summary>
	public const string AsyncEventId = "asynceventid";
	/// <summary><para>End Time for Processing</para>
	/// <para>mailboxprocesscompletedon</para></summary>
	public const string EndTimeForProcessing = "mailboxprocesscompletedon";
	/// <summary><para>Individual Step Durations</para>
	/// <para>individualstepdurations</para></summary>
	public const string IndividualStepDurations = "individualstepdurations";
	/// <summary><para>Items Failed</para>
	/// <para>itemsfailed</para></summary>
	public const string ItemsFailed = "itemsfailed";
	/// <summary><para>Items in CRM Left to Process</para>
	/// <para>crmitemsbacklog</para></summary>
	public const string ItemsInCRMLeftToProcess = "crmitemsbacklog";
	/// <summary><para>Items Processed</para>
	/// <para>itemsprocessed</para></summary>
	public const string ItemsProcessed = "itemsprocessed";
	/// <summary><para>Machine Name</para>
	/// <para>machinename</para></summary>
	public const string MachineName = "machinename";
	/// <summary><para>Mailbox Operation Type</para>
	/// <para>operationtypeid</para></summary>
	public const string MailboxOperationType = "operationtypeid";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Process Duration</para>
	/// <para>processtimeintervalinminutes</para></summary>
	public const string ProcessDuration = "processtimeintervalinminutes";
	/// <summary><para>Process Result</para>
	/// <para>processresult</para></summary>
	public const string ProcessResult = "processresult";
	/// <summary><para>Queue Duration</para>
	/// <para>scheduledtimeintervalinminutes</para></summary>
	public const string QueueDuration = "scheduledtimeintervalinminutes";
	/// <summary><para>Regarding Mailbox</para>
	/// <para>mailboxid</para></summary>
	public const string RegardingMailbox = "mailboxid";
	/// <summary><para>Scheduled Time for Processing</para>
	/// <para>mailboxprocessscheduledon</para></summary>
	public const string ScheduledTimeForProcessing = "mailboxprocessscheduledon";
	/// <summary><para>Start Time for Processing</para>
	/// <para>mailboxprocessstartedon</para></summary>
	public const string StartTimeForProcessing = "mailboxprocessstartedon";
}

    }
}
