// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("privilege")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class Privilege : BaseProxyClass
    {
        public new const string LogicalName = "privilege";
        public const int ObjectTypeCode = 1023;
        public const string PrimaryIdAttribute = "privilegeid";
        public const string PrimaryNameAttribute = "name";
        
        static Privilege()
        {
            BaseProxyClass.RegisterProxyType(typeof(Privilege), "privilege");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Privilege() : base(new Entity("privilege")) { }
        public Privilege(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Privilege>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: canbebasic</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbebasic")]
public bool? CanBeBasic
{
	get { return this.GetPropertyValue<bool?>("canbebasic"); }
	set { this.SetPropertyValue<bool?>("canbebasic", value, "CanBeBasic"); }
}
///<summary>
///<para>Logical Name: canbedeep</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbedeep")]
public bool? CanBeDeep
{
	get { return this.GetPropertyValue<bool?>("canbedeep"); }
	set { this.SetPropertyValue<bool?>("canbedeep", value, "CanBeDeep"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: privilegeid</para>
///</summary>
[AttributeLogicalNameAttribute("privilegeid")]
public Guid PrivilegeId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: accessright</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("accessright")]
public int? AccessRight
{
	get { return this.GetPropertyValue<int?>("accessright"); }
	set { this.SetPropertyValue("accessright", (int?)value, (int)-2147483648, (int)2147483647, "AccessRight"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}
///<summary>
///<para>Logical Name: canbelocal</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbelocal")]
public bool? CanBeLocal
{
	get { return this.GetPropertyValue<bool?>("canbelocal"); }
	set { this.SetPropertyValue<bool?>("canbelocal", value, "CanBeLocal"); }
}
///<summary>
///<para>Logical Name: canbeglobal</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbeglobal")]
public bool? CanBeGlobal
{
	get { return this.GetPropertyValue<bool?>("canbeglobal"); }
	set { this.SetPropertyValue<bool?>("canbeglobal", value, "CanBeGlobal"); }
}
///<summary>
///<para>Logical Name: canbeentityreference</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbeentityreference")]
public bool? CanBeEntityReference
{
	get { return this.GetPropertyValue<bool?>("canbeentityreference"); }
	set { this.SetPropertyValue<bool?>("canbeentityreference", value, "CanBeEntityReference"); }
}
///<summary>
///<para>Logical Name: isdisabledwhenintegrated</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isdisabledwhenintegrated")]
public bool? IsDisabledWhenIntegrated
{
	get { return this.GetPropertyValue<bool?>("isdisabledwhenintegrated"); }
}
///<summary>
///<para>Logical Name: canbeparententityreference</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("canbeparententityreference")]
public bool? CanBeParentEntityReference
{
	get { return this.GetPropertyValue<bool?>("canbeparententityreference"); }
	set { this.SetPropertyValue<bool?>("canbeparententityreference", value, "CanBeParentEntityReference"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 100, "Name"); }
}


        /// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Privilege_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>SystemJob (Regarding)</b></para>
/// <para>Schema Name: Privilege_AsyncOperations</para>
/// </summary>
public List<SystemJob> GetSystemJobs_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SystemJob>(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Privilege_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>BulkDeleteFailure (Name)</b></para>
/// <para>Schema Name: Privilege_BulkDeleteFailures</para>
/// </summary>
public List<BulkDeleteFailure> GetBulkDeleteFailures_Name (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<BulkDeleteFailure>(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>PrivilegeObjectTypeCode ()</b></para>
/// <para>Schema Name: FK_PrivilegeObjectTypeCodes</para>
/// </summary>
public List<PrivilegeObjectTypeCode> GetPrivilegeObjectTypeCodes (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PrivilegeObjectTypeCode>(Service, this.Id, "privilegeobjecttypecodes", "privilegeid", Columns); }
/// <summary>
/// <para><b>PrivilegeObjectTypeCode ()</b></para>
/// <para>Schema Name: FK_PrivilegeObjectTypeCodes</para>
/// </summary>
public List<PrivilegeObjectTypeCode> GetPrivilegeObjectTypeCodes (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<PrivilegeObjectTypeCode>(Service, this.Id, "privilegeobjecttypecodes", "privilegeid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_privilege</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>UserEntityInstanceData (Object Id)</b></para>
/// <para>Schema Name: userentityinstancedata_privilege</para>
/// </summary>
public List<UserEntityInstanceData> GetUserEntityInstanceData_ObjectId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<UserEntityInstanceData>(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>Security Role</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: roleprivileges_association</para>
/// </summary>
public List<SecurityRole> GetSecurityRoles (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<SecurityRole>(Service, this, "privilege", "privilegeid", "role", "roleid", "roleprivileges", "privilegeid", "roleid", Columns); }
public List<SecurityRole> GetSecurityRoles (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<SecurityRole>(Service, this, "privilege", "privilegeid", "role", "roleid", "roleprivileges", "privilegeid", "roleid", Columns); }
public void RelateSecurityRoles (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "roleprivileges_association", Items); }
public void RelateSecurityRoles (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "roleprivileges_association", Items); }
public void UnRelateSecurityRoles (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "roleprivileges_association", Items); }
public void UnRelateSecurityRoles (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "roleprivileges_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Channel Access Profile</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: ChannelAccessProfile_Privilege</para>
/// </summary>
public List<ChannelAccessProfile> GetChannelAccessProfiles (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<ChannelAccessProfile>(Service, this, "privilege", "privilegeid", "channelaccessprofile", "channelaccessprofileid", "channelaccessprofileentityaccesslevel", "entityaccesslevelid", "channelaccessprofileid", Columns); }
public List<ChannelAccessProfile> GetChannelAccessProfiles (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<ChannelAccessProfile>(Service, this, "privilege", "privilegeid", "channelaccessprofile", "channelaccessprofileid", "channelaccessprofileentityaccesslevel", "entityaccesslevelid", "channelaccessprofileid", Columns); }
public void RelateChannelAccessProfiles (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "ChannelAccessProfile_Privilege", Items); }
public void RelateChannelAccessProfiles (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "ChannelAccessProfile_Privilege", Items); }
public void UnRelateChannelAccessProfiles (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "ChannelAccessProfile_Privilege", Items); }
public void UnRelateChannelAccessProfiles (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "ChannelAccessProfile_Privilege", Items); }
/// <summary>
/// <para>Related Entity: <b>Role Template</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: roletemplateprivileges_association</para>
/// </summary>
public List<RoleTemplate> GetRoleTemplates (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<RoleTemplate>(Service, this, "privilege", "privilegeid", "roletemplate", "roletemplateid", "roletemplateprivileges", "privilegeid", "roletemplateid", Columns); }
public List<RoleTemplate> GetRoleTemplates (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<RoleTemplate>(Service, this, "privilege", "privilegeid", "roletemplate", "roletemplateid", "roletemplateprivileges", "privilegeid", "roletemplateid", Columns); }
public void RelateRoleTemplates (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "roletemplateprivileges_association", Items); }
public void RelateRoleTemplates (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "roletemplateprivileges_association", Items); }
public void UnRelateRoleTemplates (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "roletemplateprivileges_association", Items); }
public void UnRelateRoleTemplates (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "roletemplateprivileges_association", Items); }


        

        

        public static class Properties
{
	/// <summary><para>canbebasic</para>
	/// <para>canbebasic</para></summary>
	public const string CanBeBasic = "canbebasic";
	/// <summary><para>canbedeep</para>
	/// <para>canbedeep</para></summary>
	public const string CanBeDeep = "canbedeep";
	/// <summary><para>privilegeid</para>
	/// <para>privilegeid</para></summary>
	public const string PrivilegeId = "privilegeid";
	/// <summary><para>accessright</para>
	/// <para>accessright</para></summary>
	public const string AccessRight = "accessright";
	/// <summary><para>versionnumber</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
	/// <summary><para>canbelocal</para>
	/// <para>canbelocal</para></summary>
	public const string CanBeLocal = "canbelocal";
	/// <summary><para>canbeglobal</para>
	/// <para>canbeglobal</para></summary>
	public const string CanBeGlobal = "canbeglobal";
	/// <summary><para>canbeentityreference</para>
	/// <para>canbeentityreference</para></summary>
	public const string CanBeEntityReference = "canbeentityreference";
	/// <summary><para>isdisabledwhenintegrated</para>
	/// <para>isdisabledwhenintegrated</para></summary>
	public const string IsDisabledWhenIntegrated = "isdisabledwhenintegrated";
	/// <summary><para>canbeparententityreference</para>
	/// <para>canbeparententityreference</para></summary>
	public const string CanBeParentEntityReference = "canbeparententityreference";
	/// <summary><para>name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
}

    }
}
