// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("recommendationmodelmapping")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class ModelEntityMapping : BaseProxyClass
    {
        public new const string LogicalName = "recommendationmodelmapping";
        public const int ObjectTypeCode = 9934;
        public const string PrimaryIdAttribute = "recommendationmodelmappingid";
        public const string PrimaryNameAttribute = "entitydisplayname";
        
        static ModelEntityMapping()
        {
            BaseProxyClass.RegisterProxyType(typeof(ModelEntityMapping), "recommendationmodelmapping");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ModelEntityMapping() : base(new Entity("recommendationmodelmapping")) { }
        public ModelEntityMapping(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ModelEntityMapping>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: recommendationmodelidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelidname")]
public string RecommendationModelIdName
{
	get { return this.GetPropertyValue<string>("recommendationmodelidname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: supportedmapidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("supportedmapidname")]
public string SupportedMapIdName
{
	get { return this.GetPropertyValue<string>("supportedmapidname"); }
}
///<summary>
///<para>Logical Name: recommendationmodelversionidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelversionidname")]
public string RecommendationModelVersionIdName
{
	get { return this.GetPropertyValue<string>("recommendationmodelversionidname"); }
}
///<summary>
///<para>Logical Name: accountfielddisplayname</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("accountfielddisplayname")]
public string AccountField
{
	get { return this.GetPropertyValue<string>("accountfielddisplayname"); }
	set { this.SetPropertyValue("accountfielddisplayname", value, 50, "AccountField"); }
}
///<summary>
///<para>Logical Name: accountfield</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("accountfield")]
public string AccountLookupField
{
	get { return this.GetPropertyValue<string>("accountfield"); }
	set { this.SetPropertyValue("accountfield", value, 100, "AccountLookupField"); }
}
/// <summary>
///Logical Name: accountfieldpicklist
/// </summary>
[AttributeLogicalNameAttribute("accountfieldpicklist")]
public eAccountField? AccountLookupField2
{
	get
	{
		if (AccountLookupField2_OptionSetValue != null) { return (eAccountField)AccountLookupField2_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.AccountLookupField2_OptionSetValue = new OptionSetValue((int)value); }
		else this.AccountLookupField2_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: accountfieldpicklist</para>
///</summary>
[AttributeLogicalNameAttribute("accountfieldpicklist")]
public OptionSetValue AccountLookupField2_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("accountfieldpicklist"); }
	set { this.SetPropertyValue<OptionSetValue>("accountfieldpicklist", value, "AccountLookupField2_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string AccountLookupField2_Text(IOrganizationService Service)
{
	return this.AccountLookupField2_OptionSetValue.GetOptionSetText(Service, this, "accountfieldpicklist");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string AccountLookupField2_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.AccountLookupField2_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: supportedmapid</para>
///</summary>
[AttributeLogicalNameAttribute("supportedmapid")]
public EntityReference AssociatedRecommendationMapping
{
	get { return this.GetPropertyValue<EntityReference>("supportedmapid"); }
	set { this.SetPropertyValue<EntityReference>("supportedmapid", value, "AssociatedRecommendationMapping"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Logical Name: datafilter</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("datafilter")]
public string DataFilter
{
	get { return this.GetPropertyValue<string>("datafilter"); }
	set { this.SetPropertyValue("datafilter", value, 1073741823, "DataFilter"); }
}
/// <summary>
///Logical Name: entitypicklist
/// </summary>
[AttributeLogicalNameAttribute("entitypicklist")]
public eEntity? Entity
{
	get
	{
		if (Entity_OptionSetValue != null) { return (eEntity)Entity_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Entity_OptionSetValue = new OptionSetValue((int)value); }
		else this.Entity_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: entitypicklist</para>
///</summary>
[AttributeLogicalNameAttribute("entitypicklist")]
public OptionSetValue Entity_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("entitypicklist"); }
	set { this.SetPropertyValue<OptionSetValue>("entitypicklist", value, "Entity_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Entity_Text(IOrganizationService Service)
{
	return this.Entity_OptionSetValue.GetOptionSetText(Service, this, "entitypicklist");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Entity_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Entity_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: entity</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entity")]
public string Entity2
{
	get { return this.GetPropertyValue<string>("entity"); }
	set { this.SetPropertyValue("entity", value, 100, "Entity2"); }
}
/// <summary>
///Logical Name: mappingtype
/// </summary>
[AttributeLogicalNameAttribute("mappingtype")]
public eTypeOfEntity? EntityMappingType
{
	get
	{
		if (EntityMappingType_OptionSetValue != null) { return (eTypeOfEntity)EntityMappingType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.EntityMappingType_OptionSetValue = new OptionSetValue((int)value); }
		else this.EntityMappingType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: mappingtype</para>
///</summary>
[AttributeLogicalNameAttribute("mappingtype")]
public OptionSetValue EntityMappingType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("mappingtype"); }
	set { this.SetPropertyValue<OptionSetValue>("mappingtype", value, "EntityMappingType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string EntityMappingType_Text(IOrganizationService Service)
{
	return this.EntityMappingType_OptionSetValue.GetOptionSetText(Service, this, "mappingtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string EntityMappingType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.EntityMappingType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: entitydisplayname</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entitydisplayname")]
public string EntityName
{
	get { return this.GetPropertyValue<string>("entitydisplayname"); }
	set { this.SetPropertyValue("entitydisplayname", value, 50, "EntityName"); }
}
///<summary>
///<para>Logical Name: errorcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("errorcount")]
public int? ErrorCount
{
	get { return this.GetPropertyValue<int?>("errorcount"); }
	set { this.SetPropertyValue("errorcount", (int?)value, (int)0, (int)2147483647, "ErrorCount"); }
}
///<summary>
///<para>Logical Name: filterxml</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("filterxml")]
public string FilterXml
{
	get { return this.GetPropertyValue<string>("filterxml"); }
	set { this.SetPropertyValue("filterxml", value, 1073741823, "FilterXml"); }
}
///<summary>
///<para>Logical Name: recommendationmodelversionid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelversionid")]
public EntityReference ModelVersion
{
	get { return this.GetPropertyValue<EntityReference>("recommendationmodelversionid"); }
	set { this.SetPropertyValue<EntityReference>("recommendationmodelversionid", value, "ModelVersion"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: transactionfield</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactionfield")]
public string PrimaryKeyField
{
	get { return this.GetPropertyValue<string>("transactionfield"); }
	set { this.SetPropertyValue("transactionfield", value, 100, "PrimaryKeyField"); }
}
///<summary>
///<para>Logical Name: productfielddisplayname</para>
///<para>Max Length: 50 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productfielddisplayname")]
public string ProductField
{
	get { return this.GetPropertyValue<string>("productfielddisplayname"); }
	set { this.SetPropertyValue("productfielddisplayname", value, 50, "ProductField"); }
}
/// <summary>
///Logical Name: productlineitemrelationshippicklist
/// </summary>
[AttributeLogicalNameAttribute("productlineitemrelationshippicklist")]
public eProductLineItemRelationship? ProductLineItemRelationship
{
	get
	{
		if (ProductLineItemRelationship_OptionSetValue != null) { return (eProductLineItemRelationship)ProductLineItemRelationship_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ProductLineItemRelationship_OptionSetValue = new OptionSetValue((int)value); }
		else this.ProductLineItemRelationship_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: productlineitemrelationshippicklist</para>
///</summary>
[AttributeLogicalNameAttribute("productlineitemrelationshippicklist")]
public OptionSetValue ProductLineItemRelationship_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("productlineitemrelationshippicklist"); }
	set { this.SetPropertyValue<OptionSetValue>("productlineitemrelationshippicklist", value, "ProductLineItemRelationship_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ProductLineItemRelationship_Text(IOrganizationService Service)
{
	return this.ProductLineItemRelationship_OptionSetValue.GetOptionSetText(Service, this, "productlineitemrelationshippicklist");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ProductLineItemRelationship_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ProductLineItemRelationship_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: productlineitemrelationshipdisplayname</para>
///<para>Max Length: 120 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productlineitemrelationshipdisplayname")]
public string ProductLineItemRelationship2
{
	get { return this.GetPropertyValue<string>("productlineitemrelationshipdisplayname"); }
	set { this.SetPropertyValue("productlineitemrelationshipdisplayname", value, 120, "ProductLineItemRelationship2"); }
}
///<summary>
///<para>Logical Name: productlineitemrelationship</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productlineitemrelationship")]
public string ProductLineItemRelationship3
{
	get { return this.GetPropertyValue<string>("productlineitemrelationship"); }
	set { this.SetPropertyValue("productlineitemrelationship", value, 100, "ProductLineItemRelationship3"); }
}
/// <summary>
///Logical Name: productfieldpicklist
/// </summary>
[AttributeLogicalNameAttribute("productfieldpicklist")]
public eProductField? ProductLookupField
{
	get
	{
		if (ProductLookupField_OptionSetValue != null) { return (eProductField)ProductLookupField_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ProductLookupField_OptionSetValue = new OptionSetValue((int)value); }
		else this.ProductLookupField_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: productfieldpicklist</para>
///</summary>
[AttributeLogicalNameAttribute("productfieldpicklist")]
public OptionSetValue ProductLookupField_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("productfieldpicklist"); }
	set { this.SetPropertyValue<OptionSetValue>("productfieldpicklist", value, "ProductLookupField_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ProductLookupField_Text(IOrganizationService Service)
{
	return this.ProductLookupField_OptionSetValue.GetOptionSetText(Service, this, "productfieldpicklist");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ProductLookupField_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ProductLookupField_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: productfield</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("productfield")]
public string ProductLookupField2
{
	get { return this.GetPropertyValue<string>("productfield"); }
	set { this.SetPropertyValue("productfield", value, 100, "ProductLookupField2"); }
}
///<summary>
///<para>Logical Name: recommendationmodelid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelid")]
public EntityReference RecommendationModel
{
	get { return this.GetPropertyValue<EntityReference>("recommendationmodelid"); }
	set { this.SetPropertyValue<EntityReference>("recommendationmodelid", value, "RecommendationModel"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: recommendationmodelmappingid</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelmappingid")]
public Guid RecommendationModelMappingIdentifierId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: recommendationmodelmappingidunique</para>
///</summary>
[AttributeLogicalNameAttribute("recommendationmodelmappingidunique")]
public Guid RecommendationModelMappingUniqueId
{
	get { return this.GetPropertyValue<Guid>("recommendationmodelmappingidunique"); }
}
///<summary>
///<para>Logical Name: synchronizedcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("synchronizedcount")]
public int? RecordsSynchronized
{
	get { return this.GetPropertyValue<int?>("synchronizedcount"); }
	set { this.SetPropertyValue("synchronizedcount", (int?)value, (int)0, (int)2147483647, "RecordsSynchronized"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? State
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: timerangefilter</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("timerangefilter")]
public string TimeRangeFilter
{
	get { return this.GetPropertyValue<string>("timerangefilter"); }
	set { this.SetPropertyValue("timerangefilter", value, 1073741823, "TimeRangeFilter"); }
}


        /// <summary>
/// <para><b>ModelEntityMapping (Associated Recommendation Mapping)</b></para>
/// <para>Schema Name: recommendationmodelmapping_recommendationmodelmapping_supportedmapid</para>
/// </summary>
public List<ModelEntityMapping> GetModelEntityMappings_AssociatedRecommendationMapping (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ModelEntityMapping>(Service, this.Id, "recommendationmodelmapping", "supportedmapid", Columns); }
/// <summary>
/// <para><b>ModelEntityMapping (Associated Recommendation Mapping)</b></para>
/// <para>Schema Name: recommendationmodelmapping_recommendationmodelmapping_supportedmapid</para>
/// </summary>
public List<ModelEntityMapping> GetModelEntityMappings_AssociatedRecommendationMapping (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ModelEntityMapping>(Service, this.Id, "recommendationmodelmapping", "supportedmapid", Columns); }


        

        

        public enum eAccountField
{
	///<summary><para>Yes</para>
	///<para>Value = 1</para></summary>
	[Description("Yes")]
	Yes = 1, 
	///<summary><para>No</para>
	///<para>Value = 2</para></summary>
	[Description("No")]
	No = 2
}
public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eEntity
{
	///<summary><para>Yes</para>
	///<para>Value = 1</para></summary>
	[Description("Yes")]
	Yes = 1, 
	///<summary><para>No</para>
	///<para>Value = 2</para></summary>
	[Description("No")]
	No = 2
}
public enum eTypeOfEntity
{
	///<summary><para>Basket Entity</para>
	///<para>Value = 1</para></summary>
	[Description("Basket Entity")]
	BasketEntity = 1, 
	///<summary><para>Recommendation Entity</para>
	///<para>Value = 2</para></summary>
	[Description("Recommendation Entity")]
	RecommendationEntity = 2, 
	///<summary><para>Catalog Entity</para>
	///<para>Value = 3</para></summary>
	[Description("Catalog Entity")]
	CatalogEntity = 3
}
public enum eProductLineItemRelationship
{
	///<summary><para>Yes</para>
	///<para>Value = 1</para></summary>
	[Description("Yes")]
	Yes = 1, 
	///<summary><para>No</para>
	///<para>Value = 2</para></summary>
	[Description("No")]
	No = 2
}
public enum eProductField
{
	///<summary><para>Yes</para>
	///<para>Value = 1</para></summary>
	[Description("Yes")]
	Yes = 1, 
	///<summary><para>No</para>
	///<para>Value = 2</para></summary>
	[Description("No")]
	No = 2
}


        public static class Properties
{
	/// <summary><para>recommendationmodelidname</para>
	/// <para>recommendationmodelidname</para></summary>
	public const string RecommendationModelIdName = "recommendationmodelidname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>supportedmapidname</para>
	/// <para>supportedmapidname</para></summary>
	public const string SupportedMapIdName = "supportedmapidname";
	/// <summary><para>recommendationmodelversionidname</para>
	/// <para>recommendationmodelversionidname</para></summary>
	public const string RecommendationModelVersionIdName = "recommendationmodelversionidname";
	/// <summary><para>Account Field</para>
	/// <para>accountfielddisplayname</para></summary>
	public const string AccountField = "accountfielddisplayname";
	/// <summary><para>Account Lookup Field</para>
	/// <para>accountfield</para></summary>
	public const string AccountLookupField = "accountfield";
	/// <summary><para>Account Lookup Field</para>
	/// <para>accountfieldpicklist</para></summary>
	public const string AccountLookupField2 = "accountfieldpicklist";
	/// <summary><para>Associated Recommendation Mapping</para>
	/// <para>supportedmapid</para></summary>
	public const string AssociatedRecommendationMapping = "supportedmapid";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Created On</para>
	/// <para>overwritetime</para></summary>
	public const string CreatedOn = "overwritetime";
	/// <summary><para>Data Filter</para>
	/// <para>datafilter</para></summary>
	public const string DataFilter = "datafilter";
	/// <summary><para>Entity</para>
	/// <para>entitypicklist</para></summary>
	public const string Entity = "entitypicklist";
	/// <summary><para>Entity</para>
	/// <para>entity</para></summary>
	public const string Entity2 = "entity";
	/// <summary><para>Entity Mapping Type</para>
	/// <para>mappingtype</para></summary>
	public const string EntityMappingType = "mappingtype";
	/// <summary><para>Entity Name</para>
	/// <para>entitydisplayname</para></summary>
	public const string EntityName = "entitydisplayname";
	/// <summary><para>Error Count</para>
	/// <para>errorcount</para></summary>
	public const string ErrorCount = "errorcount";
	/// <summary><para>Filter Xml</para>
	/// <para>filterxml</para></summary>
	public const string FilterXml = "filterxml";
	/// <summary><para>Model Version</para>
	/// <para>recommendationmodelversionid</para></summary>
	public const string ModelVersion = "recommendationmodelversionid";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Primary Key Field</para>
	/// <para>transactionfield</para></summary>
	public const string PrimaryKeyField = "transactionfield";
	/// <summary><para>Product Field</para>
	/// <para>productfielddisplayname</para></summary>
	public const string ProductField = "productfielddisplayname";
	/// <summary><para>Product Line Item Relationship</para>
	/// <para>productlineitemrelationshippicklist</para></summary>
	public const string ProductLineItemRelationship = "productlineitemrelationshippicklist";
	/// <summary><para>Product Line Item Relationship</para>
	/// <para>productlineitemrelationshipdisplayname</para></summary>
	public const string ProductLineItemRelationship2 = "productlineitemrelationshipdisplayname";
	/// <summary><para>Product Line Item Relationship</para>
	/// <para>productlineitemrelationship</para></summary>
	public const string ProductLineItemRelationship3 = "productlineitemrelationship";
	/// <summary><para>Product Lookup Field</para>
	/// <para>productfieldpicklist</para></summary>
	public const string ProductLookupField = "productfieldpicklist";
	/// <summary><para>Product Lookup Field</para>
	/// <para>productfield</para></summary>
	public const string ProductLookupField2 = "productfield";
	/// <summary><para>Recommendation Model</para>
	/// <para>recommendationmodelid</para></summary>
	public const string RecommendationModel = "recommendationmodelid";
	/// <summary><para>Recommendation Model Mapping Identifier</para>
	/// <para>recommendationmodelmappingid</para></summary>
	public const string RecommendationModelMappingIdentifierId = "recommendationmodelmappingid";
	/// <summary><para>Recommendation Model Mapping Unique Id</para>
	/// <para>recommendationmodelmappingidunique</para></summary>
	public const string RecommendationModelMappingUniqueId = "recommendationmodelmappingidunique";
	/// <summary><para>Records Synchronized</para>
	/// <para>synchronizedcount</para></summary>
	public const string RecordsSynchronized = "synchronizedcount";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
	/// <summary><para>State</para>
	/// <para>ismanaged</para></summary>
	public const string State = "ismanaged";
	/// <summary><para>Time Range Filter</para>
	/// <para>timerangefilter</para></summary>
	public const string TimeRangeFilter = "timerangefilter";
}

    }
}
