// <auto-generated />
using .ProxyClasses;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;

namespace ProxyClasses
{
    [EntityLogicalNameAttribute("topicmodel")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    public partial class TopicModel : BaseProxyClass
    {
        public new const string LogicalName = "topicmodel";
        public const int ObjectTypeCode = 9944;
        public const string PrimaryIdAttribute = "topicmodelid";
        public const string PrimaryNameAttribute = "name";
        
        static TopicModel()
        {
            BaseProxyClass.RegisterProxyType(typeof(TopicModel), "topicmodel");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public TopicModel() : base(new Entity("topicmodel")) { }
        public TopicModel(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<TopicModel>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: azureserviceconnectionidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("azureserviceconnectionidname")]
public string AzureServiceConnectionIdName
{
	get { return this.GetPropertyValue<string>("azureserviceconnectionidname"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: configurationusedname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("configurationusedname")]
public string ConfigurationUsedName
{
	get { return this.GetPropertyValue<string>("configurationusedname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: avgnumberoftopics</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000</para>
///</summary>
[AttributeLogicalNameAttribute("avgnumberoftopics")]
public int? AverageNumberOfTopicsPerBuild
{
	get { return this.GetPropertyValue<int?>("avgnumberoftopics"); }
	set { this.SetPropertyValue("avgnumberoftopics", (int?)value, (int)0, (int)1000, "AverageNumberOfTopicsPerBuild"); }
}
///<summary>
///<para>Logical Name: azureschedulerjobname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("azureschedulerjobname")]
public string AzureSchedulerJobName
{
	get { return this.GetPropertyValue<string>("azureschedulerjobname"); }
	set { this.SetPropertyValue("azureschedulerjobname", value, 100, "AzureSchedulerJobName"); }
}
///<summary>
///<para>Logical Name: buildrecurrence</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("buildrecurrence")]
public string BuildRecurrence
{
	get { return this.GetPropertyValue<string>("buildrecurrence"); }
	set { this.SetPropertyValue("buildrecurrence", value, 100, "BuildRecurrence"); }
}
///<summary>
///<para>Logical Name: configurationused</para>
///</summary>
[AttributeLogicalNameAttribute("configurationused")]
public EntityReference Configuration
{
	get { return this.GetPropertyValue<EntityReference>("configurationused"); }
	set { this.SetPropertyValue<EntityReference>("configurationused", value, "Configuration"); }
}
///<summary>
///<para>Logical Name: azureserviceconnectionid</para>
///</summary>
[AttributeLogicalNameAttribute("azureserviceconnectionid")]
public EntityReference Connection
{
	get { return this.GetPropertyValue<EntityReference>("azureserviceconnectionid"); }
	set { this.SetPropertyValue<EntityReference>("azureserviceconnectionid", value, "Connection"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: endtime</para>
///</summary>
[AttributeLogicalNameAttribute("endtime")]
public DateTime? EndTime
{
	get { return this.GetPropertyValue<DateTime?>("endtime"); }
	set { this.SetPropertyValue<DateTime?>("endtime", value, "EndTime"); }
}
///<summary>
///<para>Logical Name: maxtopics</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000</para>
///</summary>
[AttributeLogicalNameAttribute("maxtopics")]
public int? MaximumTopics
{
	get { return this.GetPropertyValue<int?>("maxtopics"); }
	set { this.SetPropertyValue("maxtopics", (int?)value, (int)0, (int)1000, "MaximumTopics"); }
}
///<summary>
///<para>Logical Name: maxnumberoftopics</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000</para>
///</summary>
[AttributeLogicalNameAttribute("maxnumberoftopics")]
public int? MaximumTopicsFoundAcrossBuilds
{
	get { return this.GetPropertyValue<int?>("maxnumberoftopics"); }
	set { this.SetPropertyValue("maxnumberoftopics", (int?)value, (int)0, (int)1000, "MaximumTopicsFoundAcrossBuilds"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 160, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
///<summary>
///<para>Logical Name: azureschedulerondemandjobname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("azureschedulerondemandjobname")]
public string SchedulerBuildJob
{
	get { return this.GetPropertyValue<string>("azureschedulerondemandjobname"); }
	set { this.SetPropertyValue("azureschedulerondemandjobname", value, 100, "SchedulerBuildJob"); }
}
///<summary>
///<para>Logical Name: azureschedulertestjobname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("azureschedulertestjobname")]
public string SchedulerTestJob
{
	get { return this.GetPropertyValue<string>("azureschedulertestjobname"); }
	set { this.SetPropertyValue("azureschedulertestjobname", value, 100, "SchedulerTestJob"); }
}
///<summary>
///<para>Logical Name: sourceentity</para>
///</summary>
[AttributeLogicalNameAttribute("sourceentity")]
public string SourceEntity
{
	get { return this.GetPropertyValue<string>("sourceentity"); }
	set { this.SetPropertyValue<string>("sourceentity", value, "SourceEntity"); }
}
///<summary>
///<para>Logical Name: starttime</para>
///</summary>
[AttributeLogicalNameAttribute("starttime")]
public DateTime? StartTime
{
	get { return this.GetPropertyValue<DateTime?>("starttime"); }
	set { this.SetPropertyValue<DateTime?>("starttime", value, "StartTime"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: topicmodelid</para>
///</summary>
[AttributeLogicalNameAttribute("topicmodelid")]
public Guid TopicModelId
{
	get
	{
		return this.Id;
	}
	set
	{
		this.Id = value;
	}
}
///<summary>
///<para>Logical Name: topicslastcreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("topicslastcreatedon")]
public DateTime? TopicsLastCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("topicslastcreatedon"); }
	set { this.SetPropertyValue<DateTime?>("topicslastcreatedon", value, "TopicsLastCreatedOn"); }
}
///<summary>
///<para>Logical Name: totaltopicsfound</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000</para>
///</summary>
[AttributeLogicalNameAttribute("totaltopicsfound")]
public int? TotalTopicsFound
{
	get { return this.GetPropertyValue<int?>("totaltopicsfound"); }
	set { this.SetPropertyValue("totaltopicsfound", (int?)value, (int)0, (int)1000, "TotalTopicsFound"); }
}


        /// <summary>
/// <para><b>TopicModelConfiguration (TopicModelId)</b></para>
/// <para>Schema Name: topicmodel_topicmodelconfiguration</para>
/// </summary>
public List<TopicModelConfiguration> GetTopicModelConfigurations_TopicModelId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModelConfiguration>(Service, this.Id, "topicmodelconfiguration", "topicmodelid", Columns); }
/// <summary>
/// <para><b>TopicModelConfiguration (TopicModelId)</b></para>
/// <para>Schema Name: topicmodel_topicmodelconfiguration</para>
/// </summary>
public List<TopicModelConfiguration> GetTopicModelConfigurations_TopicModelId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModelConfiguration>(Service, this.Id, "topicmodelconfiguration", "topicmodelid", Columns); }
/// <summary>
/// <para><b>TopicModelExecutionHistory (TopicModelId)</b></para>
/// <para>Schema Name: topicmodel_topicmodelexecutionhistory</para>
/// </summary>
public List<TopicModelExecutionHistory> GetTopicModelExecutionHistories_TopicModelId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModelExecutionHistory>(Service, this.Id, "topicmodelexecutionhistory", "topicmodelid", Columns); }
/// <summary>
/// <para><b>TopicModelExecutionHistory (TopicModelId)</b></para>
/// <para>Schema Name: topicmodel_topicmodelexecutionhistory</para>
/// </summary>
public List<TopicModelExecutionHistory> GetTopicModelExecutionHistories_TopicModelId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<TopicModelExecutionHistory>(Service, this.Id, "topicmodelexecutionhistory", "topicmodelid", Columns); }


        

        

        public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1, 
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>azureserviceconnectionidname</para>
	/// <para>azureserviceconnectionidname</para></summary>
	public const string AzureServiceConnectionIdName = "azureserviceconnectionidname";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>configurationusedname</para>
	/// <para>configurationusedname</para></summary>
	public const string ConfigurationUsedName = "configurationusedname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Average Number of Topics per Build</para>
	/// <para>avgnumberoftopics</para></summary>
	public const string AverageNumberOfTopicsPerBuild = "avgnumberoftopics";
	/// <summary><para>AzureSchedulerJobName</para>
	/// <para>azureschedulerjobname</para></summary>
	public const string AzureSchedulerJobName = "azureschedulerjobname";
	/// <summary><para>Build Recurrence</para>
	/// <para>buildrecurrence</para></summary>
	public const string BuildRecurrence = "buildrecurrence";
	/// <summary><para>Configuration</para>
	/// <para>configurationused</para></summary>
	public const string Configuration = "configurationused";
	/// <summary><para>Connection</para>
	/// <para>azureserviceconnectionid</para></summary>
	public const string Connection = "azureserviceconnectionid";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>End Time</para>
	/// <para>endtime</para></summary>
	public const string EndTime = "endtime";
	/// <summary><para>Maximum Topics</para>
	/// <para>maxtopics</para></summary>
	public const string MaximumTopics = "maxtopics";
	/// <summary><para>Maximum Topics Found Across Builds</para>
	/// <para>maxnumberoftopics</para></summary>
	public const string MaximumTopicsFoundAcrossBuilds = "maxnumberoftopics";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Scheduler Build Job</para>
	/// <para>azureschedulerondemandjobname</para></summary>
	public const string SchedulerBuildJob = "azureschedulerondemandjobname";
	/// <summary><para>Scheduler Test Job</para>
	/// <para>azureschedulertestjobname</para></summary>
	public const string SchedulerTestJob = "azureschedulertestjobname";
	/// <summary><para>Source Entity</para>
	/// <para>sourceentity</para></summary>
	public const string SourceEntity = "sourceentity";
	/// <summary><para>Start Time</para>
	/// <para>starttime</para></summary>
	public const string StartTime = "starttime";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>TopicModel</para>
	/// <para>topicmodelid</para></summary>
	public const string TopicModelId = "topicmodelid";
	/// <summary><para>Topics Last Created On</para>
	/// <para>topicslastcreatedon</para></summary>
	public const string TopicsLastCreatedOn = "topicslastcreatedon";
	/// <summary><para>Total Topics Found</para>
	/// <para>totaltopicsfound</para></summary>
	public const string TotalTopicsFound = "totaltopicsfound";
}

    }
}
